{"creation_time": "2024-05-11T05:37:44+00:00", "days_back": 7, "models": {"model.dbt_testing_example.body_mass_indexes": {"name": "body_mass_indexes", "unique_id": "model.dbt_testing_example.body_mass_indexes", "owners": [], "tags": [], "package_name": "dbt_testing_example", "description": "", "full_path": "models/marts/body_mass_indexes.sql", "meta": {}, "materialization": "table", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "patch_path": "dbt_testing_example://models/marts/_body_mass_indexes__models.yml", "model_name": "body_mass_indexes", "normalized_full_path": "dbt_testing_example/models/marts/body_mass_indexes.sql", "fqn": "neondb.dbt_testing_example.body_mass_indexes", "artifact_type": "model"}, "model.dbt_testing_example.int_weight_measurements_with_latest_height": {"name": "int_weight_measurements_with_latest_height", "unique_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "owners": [], "tags": [], "package_name": "dbt_testing_example", "description": "", "full_path": "models/intermediate/int_weight_measurements_with_latest_height.sql", "meta": {}, "materialization": "table", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "int_weight_measurements_with_latest_height", "patch_path": null, "model_name": "int_weight_measurements_with_latest_height", "normalized_full_path": "dbt_testing_example/models/intermediate/int_weight_measurements_with_latest_height.sql", "fqn": "neondb.dbt_testing_example.int_weight_measurements_with_latest_height", "artifact_type": "model"}, "model.dbt_testing_example.stg_gym_app__weight": {"name": "stg_gym_app__weight", "unique_id": "model.dbt_testing_example.stg_gym_app__weight", "owners": [], "tags": [], "package_name": "dbt_testing_example", "description": "", "full_path": "models/staging/gym_app/stg_gym_app__weight.sql", "meta": {}, "materialization": "table", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "stg_gym_app__weight", "patch_path": null, "model_name": "stg_gym_app__weight", "normalized_full_path": "dbt_testing_example/models/staging/gym_app/stg_gym_app__weight.sql", "fqn": "neondb.dbt_testing_example.stg_gym_app__weight", "artifact_type": "model"}, "model.dbt_testing_example.stg_gym_app__height": {"name": "stg_gym_app__height", "unique_id": "model.dbt_testing_example.stg_gym_app__height", "owners": [], "tags": [], "package_name": "dbt_testing_example", "description": "", "full_path": "models/staging/gym_app/stg_gym_app__height.sql", "meta": {}, "materialization": "table", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "stg_gym_app__height", "patch_path": null, "model_name": "stg_gym_app__height", "normalized_full_path": "dbt_testing_example/models/staging/gym_app/stg_gym_app__height.sql", "fqn": "neondb.dbt_testing_example.stg_gym_app__height", "artifact_type": "model"}, "source.dbt_testing_example.gym_app.raw_height": {"name": "raw_height", "unique_id": "source.dbt_testing_example.gym_app.raw_height", "owners": [], "tags": ["contract-test-source", "data-quality"], "package_name": "dbt_testing_example", "description": "", "full_path": "models/staging/gym_app/_gym_app__raw_height_schema.yml", "meta": {}, "materialization": null, "source_name": "gym_app", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "model_name": "raw_height", "normalized_full_path": "dbt_testing_example/sources/staging/gym_app/_gym_app__raw_height_schema.yml", "fqn": "neondb.dbt_testing_example.raw_height", "artifact_type": "source"}, "source.dbt_testing_example.gym_app.raw_weight": {"name": "raw_weight", "unique_id": "source.dbt_testing_example.gym_app.raw_weight", "owners": [], "tags": ["contract-test-source", "data-quality"], "package_name": "dbt_testing_example", "description": "", "full_path": "models/staging/gym_app/_gym_app__raw_weight_schema.yml", "meta": {}, "materialization": null, "source_name": "gym_app", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "model_name": "raw_weight", "normalized_full_path": "dbt_testing_example/sources/staging/gym_app/_gym_app__raw_weight_schema.yml", "fqn": "neondb.dbt_testing_example.raw_weight", "artifact_type": "source"}}, "groups": {"dbt": {"dbt_testing_example": {"models": {"marts": {"__files__": [{"node_id": "model.dbt_testing_example.body_mass_indexes", "resource_type": "model"}]}, "intermediate": {"__files__": [{"node_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "resource_type": "model"}]}, "staging": {"gym_app": {"__files__": [{"node_id": "model.dbt_testing_example.stg_gym_app__weight", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.stg_gym_app__height", "resource_type": "model"}]}}}, "sources": {"staging": {"gym_app": {"__files__": [{"node_id": "source.dbt_testing_example.gym_app.raw_height", "resource_type": "source"}, {"node_id": "source.dbt_testing_example.gym_app.raw_weight", "resource_type": "source"}]}}}}}, "tags": {"No tags": [{"node_id": "model.dbt_testing_example.body_mass_indexes", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.stg_gym_app__weight", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.stg_gym_app__height", "resource_type": "model"}], "contract-test-source": [{"node_id": "source.dbt_testing_example.gym_app.raw_height", "resource_type": "source"}, {"node_id": "source.dbt_testing_example.gym_app.raw_weight", "resource_type": "source"}], "data-quality": [{"node_id": "source.dbt_testing_example.gym_app.raw_height", "resource_type": "source"}, {"node_id": "source.dbt_testing_example.gym_app.raw_weight", "resource_type": "source"}]}, "owners": {"No owners": [{"node_id": "model.dbt_testing_example.body_mass_indexes", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.stg_gym_app__weight", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.stg_gym_app__height", "resource_type": "model"}, {"node_id": "source.dbt_testing_example.gym_app.raw_height", "resource_type": "source"}, {"node_id": "source.dbt_testing_example.gym_app.raw_weight", "resource_type": "source"}]}}, "invocation": {"invocation_id": null, "detected_at": null, "command": null, "selected": null, "full_refresh": null, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, "test_results": {"model.dbt_testing_example.body_mass_indexes": [{"metadata": {"test_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2", "elementary_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": "user_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "source('gym_app', 'raw_height')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "source('gym_app', 'raw_height')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}}, "test_tags": ["data-quality"]}, "test_results": {"display_name": "relationships", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0", "elementary_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": "user_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "source('gym_app', 'raw_weight')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "source('gym_app', 'raw_weight')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}}, "test_tags": ["data-quality"]}, "test_results": {"display_name": "relationships", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "source.dbt_testing_example.gym_app.raw_weight": [{"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "measurement_unit", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MEASUREMENT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "text", "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MEASUREMENT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "text", "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "user_id", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'WEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "double precision", "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'WEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "double precision", "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d", "elementary_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "accepted_range", "test_display_name": "Accepted Range", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not weight > 0\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "inclusive": false, "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not weight > 0\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "accepted_range", "test_params": {"min_value": 0, "inclusive": false, "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "accepted_range", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da", "elementary_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "measurement_unit", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        measurement_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n    group by measurement_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'kg','pounds'\n)", "test_params": {"values": ["kg", "pounds"], "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        measurement_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n    group by measurement_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'kg','pounds'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["kg", "pounds"], "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "user_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-05-11T05:34:24+00:00", "latest_run_time_utc": "2024-05-11T05:34:24+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere user_id is null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere user_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-05-11T05:34:24+00:00", "latest_run_time_utc": "2024-05-11T05:34:24+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select weight\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere weight is null", "test_params": {"column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select weight\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere weight is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "source.dbt_testing_example.gym_app.raw_height": [{"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "double precision", "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "double precision", "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height_unit", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "text", "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "text", "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "user_id", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d", "elementary_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "accepted_range", "test_display_name": "Accepted Range", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not height > 0\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "inclusive": false, "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not height > 0\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "accepted_range", "test_params": {"min_value": 0, "inclusive": false, "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "accepted_range", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08", "elementary_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height_unit", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        height_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n    group by height_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cm','inches'\n)", "test_params": {"values": ["cm", "inches"], "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        height_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n    group by height_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cm','inches'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["cm", "inches"], "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-05-11T05:34:24+00:00", "latest_run_time_utc": "2024-05-11T05:34:24+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select height\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere height is null", "test_params": {"column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select height\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere height is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "user_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-05-11T05:34:24+00:00", "latest_run_time_utc": "2024-05-11T05:34:24+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere user_id is null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere user_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}]}, "test_results_totals": {"model.dbt_testing_example.body_mass_indexes": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "source.dbt_testing_example.gym_app.raw_weight": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "source.dbt_testing_example.gym_app.raw_height": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}}, "test_runs": {"model.dbt_testing_example.body_mass_indexes": [{"metadata": {"test_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2", "elementary_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": "user_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "source('gym_app', 'raw_height')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "source('gym_app', 'raw_height')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}}, "test_tags": ["data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:36+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:36+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:44+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:22+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:29+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:30+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:23+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0", "elementary_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": "user_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "source('gym_app', 'raw_weight')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "source('gym_app', 'raw_weight')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}}, "test_tags": ["data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:36+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:36+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:44+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:22+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:30+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:30+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:23+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}], "source.dbt_testing_example.gym_app.raw_weight": [{"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "measurement_unit", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MEASUREMENT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "text", "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MEASUREMENT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "text", "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:34+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:35+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:43+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:20+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:28+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:29+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:22+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "user_id", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:36+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:36+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:44+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:22+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:29+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:30+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:23+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'WEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "double precision", "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'WEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "double precision", "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:36+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:36+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:44+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:22+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:29+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:30+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:23+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d", "elementary_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "accepted_range", "test_display_name": "Accepted Range", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not weight > 0\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "inclusive": false, "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not weight > 0\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "accepted_range", "test_params": {"min_value": 0, "inclusive": false, "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:34+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:35+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:43+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:20+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:29+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:29+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:22+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da", "elementary_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "measurement_unit", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        measurement_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n    group by measurement_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'kg','pounds'\n)", "test_params": {"values": ["kg", "pounds"], "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        measurement_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n    group by measurement_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'kg','pounds'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["kg", "pounds"], "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:36+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:36+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:44+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:22+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:30+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:30+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:23+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "user_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-05-11T05:34:24+00:00", "latest_run_time_utc": "2024-05-11T05:34:24+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere user_id is null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere user_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:38+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:37+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:45+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:24+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:31+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:31+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:24+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-05-11T05:34:24+00:00", "latest_run_time_utc": "2024-05-11T05:34:24+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select weight\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere weight is null", "test_params": {"column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select weight\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere weight is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:38+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:37+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:45+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:24+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:31+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:31+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:24+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}], "source.dbt_testing_example.gym_app.raw_height": [{"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "double precision", "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "double precision", "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:34+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:35+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:43+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:20+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:28+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:29+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:22+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height_unit", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "text", "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "text", "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:34+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:35+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:43+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:20+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:28+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:29+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:22+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "user_id", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:34+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:35+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:43+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:20+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:28+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:29+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:22+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d", "elementary_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "accepted_range", "test_display_name": "Accepted Range", "latest_run_time": "2024-05-11T05:34:22+00:00", "latest_run_time_utc": "2024-05-11T05:34:22+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not height > 0\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "inclusive": false, "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not height > 0\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "accepted_range", "test_params": {"min_value": 0, "inclusive": false, "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:34+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:35+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:43+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:20+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:29+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:29+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:22+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08", "elementary_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height_unit", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-05-11T05:34:23+00:00", "latest_run_time_utc": "2024-05-11T05:34:23+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        height_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n    group by height_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cm','inches'\n)", "test_params": {"values": ["cm", "inches"], "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        height_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n    group by height_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cm','inches'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["cm", "inches"], "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:36+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:36+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:44+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:22+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:30+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:30+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:23+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-05-11T05:34:24+00:00", "latest_run_time_utc": "2024-05-11T05:34:24+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select height\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere height is null", "test_params": {"column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select height\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere height is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:38+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:37+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:45+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:24+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:31+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:31+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:24+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "user_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-05-11T05:34:24+00:00", "latest_run_time_utc": "2024-05-11T05:34:24+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere user_id is null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere user_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-05-05T05:35:38+00:00", "id": "d5948a57-738d-40c9-98c6-cf704852d71f", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-06T05:34:37+00:00", "id": "79d4e1ab-4e0f-487d-838c-720742886be1", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-07T05:34:45+00:00", "id": "e9553209-355f-43b5-8c59-9078fd610399", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-08T05:35:24+00:00", "id": "411bba30-befd-49e2-9621-e9a2bdeb4b1d", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-09T05:34:31+00:00", "id": "fb7cdb00-7e92-4b81-b901-63bbee1a7877", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-10T05:34:31+00:00", "id": "ccfa6f4f-2ec0-4120-a803-0c3c19138c40", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-05-11T05:34:24+00:00", "id": "6859a5c0-ff8c-4233-b735-801f5049c549", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 7 test runs."}}]}, "test_runs_totals": {"model.dbt_testing_example.body_mass_indexes": {"errors": 0, "warnings": 0, "passed": 14, "failures": 0}, "source.dbt_testing_example.gym_app.raw_weight": {"errors": 0, "warnings": 0, "passed": 49, "failures": 0}, "source.dbt_testing_example.gym_app.raw_height": {"errors": 0, "warnings": 0, "passed": 49, "failures": 0}}, "coverages": {"source.dbt_testing_example.gym_app.raw_weight": {"table_tests": 0, "column_tests": 7}, "model.dbt_testing_example.stg_gym_app__height": {"table_tests": 1, "column_tests": 0}, "source.dbt_testing_example.gym_app.raw_height": {"table_tests": 0, "column_tests": 7}, "model.dbt_testing_example.body_mass_indexes": {"table_tests": 5, "column_tests": 2}, "model.dbt_testing_example.int_weight_measurements_with_latest_height": {"table_tests": 1, "column_tests": 0}, "model.dbt_testing_example.stg_gym_app__weight": {"table_tests": 1, "column_tests": 0}}, "model_runs": [{"unique_id": "model.dbt_testing_example.stg_gym_app__weight", "schema": "dbt_testing_example", "name": "stg_gym_app__weight", "status": "success", "last_exec_time": 1.7, "median_exec_time": 1.8, "compiled_code": "with\n\nsource as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n\n),\n\nrenamed as (\n\n    select\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\n        weight,\n        user_id,\n        measurement_unit\n    from source\n\n)\n\nselect * from renamed", "last_generated_at": "2024-05-11T05:35:24+00:00", "exec_time_change_rate": -5.555555555555558, "totals": {"errors": 0, "success": 7}, "runs": [{"id": "97c7bb31-96cb-4955-9e6e-7f32f82cf3b5", "time_utc": "2024-05-05T05:36:43+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.5}, {"id": "c2ee88f8-a5a0-442d-b8da-18718abface8", "time_utc": "2024-05-06T05:35:36+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.5}, {"id": "65e22b51-68f1-4e5f-9dc4-9fdb1f54545e", "time_utc": "2024-05-07T05:35:50+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.9}, {"id": "a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6", "time_utc": "2024-05-08T05:36:34+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.8}, {"id": "a5c7afb6-6e41-4522-b54d-9dfa3fab52c6", "time_utc": "2024-05-09T05:35:35+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.9}, {"id": "07742efb-649a-4a3c-ad26-999a7cd209cf", "time_utc": "2024-05-10T05:35:47+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.5}, {"id": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "time_utc": "2024-05-11T05:35:24+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.7}]}, {"unique_id": "model.dbt_testing_example.stg_gym_app__height", "schema": "dbt_testing_example", "name": "stg_gym_app__height", "status": "success", "last_exec_time": 1.7, "median_exec_time": 1.8, "compiled_code": "with\n\nsource as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n\n),\n\nrenamed as (\n\n    select\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\n        user_id,\n        height,\n        height_unit as measurement_unit\n    from source\n\n)\n\nselect * from renamed", "last_generated_at": "2024-05-11T05:35:24+00:00", "exec_time_change_rate": -5.555555555555558, "totals": {"errors": 0, "success": 7}, "runs": [{"id": "97c7bb31-96cb-4955-9e6e-7f32f82cf3b5", "time_utc": "2024-05-05T05:36:43+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.5}, {"id": "c2ee88f8-a5a0-442d-b8da-18718abface8", "time_utc": "2024-05-06T05:35:36+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.5}, {"id": "65e22b51-68f1-4e5f-9dc4-9fdb1f54545e", "time_utc": "2024-05-07T05:35:50+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.9}, {"id": "a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6", "time_utc": "2024-05-08T05:36:34+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.8}, {"id": "a5c7afb6-6e41-4522-b54d-9dfa3fab52c6", "time_utc": "2024-05-09T05:35:35+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.9}, {"id": "07742efb-649a-4a3c-ad26-999a7cd209cf", "time_utc": "2024-05-10T05:35:47+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.5}, {"id": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "time_utc": "2024-05-11T05:35:24+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.7}]}, {"unique_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "schema": "dbt_testing_example", "name": "int_weight_measurements_with_latest_height", "status": "success", "last_exec_time": 1.3, "median_exec_time": 1.5, "compiled_code": "with\n\nheight as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"stg_gym_app__height\"\n\n),\n\nweight as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"stg_gym_app__weight\"\n\n),\n\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\n\n    select\n        weight.created_date,\n        user_id,\n        weight,\n        (select height\n         from height\n         where  height.created_date < weight.created_date and\n                height.user_id = weight.user_id\n         order by height.created_date DESC\n         limit 1) as height\n    from weight\n)\n\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement", "last_generated_at": "2024-05-11T05:35:24+00:00", "exec_time_change_rate": -13.33333333333333, "totals": {"errors": 0, "success": 7}, "runs": [{"id": "97c7bb31-96cb-4955-9e6e-7f32f82cf3b5", "time_utc": "2024-05-05T05:36:43+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.3}, {"id": "c2ee88f8-a5a0-442d-b8da-18718abface8", "time_utc": "2024-05-06T05:35:36+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.3}, {"id": "65e22b51-68f1-4e5f-9dc4-9fdb1f54545e", "time_utc": "2024-05-07T05:35:50+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}, {"id": "a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6", "time_utc": "2024-05-08T05:36:34+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}, {"id": "a5c7afb6-6e41-4522-b54d-9dfa3fab52c6", "time_utc": "2024-05-09T05:35:35+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.5}, {"id": "07742efb-649a-4a3c-ad26-999a7cd209cf", "time_utc": "2024-05-10T05:35:47+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.2}, {"id": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "time_utc": "2024-05-11T05:35:24+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.3}]}, {"unique_id": "model.dbt_testing_example.body_mass_indexes", "schema": "dbt_testing_example", "name": "body_mass_indexes", "status": "success", "last_exec_time": 1.3, "median_exec_time": 1.5, "compiled_code": "with\n\nweights_with_latest_height as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"int_weight_measurements_with_latest_height\"\n\n),\n\nbody_mass_indexes as (\n\n    select\n        created_date,\n        user_id,\n        weight,\n        height,\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\n        current_timestamp as processed_at\n    from weights_with_latest_height\n)\n\nselect * from body_mass_indexes", "last_generated_at": "2024-05-11T05:35:24+00:00", "exec_time_change_rate": -13.33333333333333, "totals": {"errors": 0, "success": 7}, "runs": [{"id": "97c7bb31-96cb-4955-9e6e-7f32f82cf3b5", "time_utc": "2024-05-05T05:36:43+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.3}, {"id": "c2ee88f8-a5a0-442d-b8da-18718abface8", "time_utc": "2024-05-06T05:35:36+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.3}, {"id": "65e22b51-68f1-4e5f-9dc4-9fdb1f54545e", "time_utc": "2024-05-07T05:35:50+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.5}, {"id": "a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6", "time_utc": "2024-05-08T05:36:34+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}, {"id": "a5c7afb6-6e41-4522-b54d-9dfa3fab52c6", "time_utc": "2024-05-09T05:35:35+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}, {"id": "07742efb-649a-4a3c-ad26-999a7cd209cf", "time_utc": "2024-05-10T05:35:47+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.1}, {"id": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "time_utc": "2024-05-11T05:35:24+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.3}]}], "model_runs_totals": {"model.dbt_testing_example.stg_gym_app__weight": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "model.dbt_testing_example.stg_gym_app__height": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "model.dbt_testing_example.int_weight_measurements_with_latest_height": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "model.dbt_testing_example.body_mass_indexes": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}}, "filters": {"test_results": [{"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.dbt_testing_example.body_mass_indexes", "source.dbt_testing_example.gym_app.raw_weight", "source.dbt_testing_example.gym_app.raw_height"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.dbt_testing_example.int_weight_measurements_with_latest_height", "model.dbt_testing_example.stg_gym_app__weight", "model.dbt_testing_example.stg_gym_app__height"]}], "test_runs": [{"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.dbt_testing_example.body_mass_indexes", "source.dbt_testing_example.gym_app.raw_weight", "source.dbt_testing_example.gym_app.raw_height"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.dbt_testing_example.int_weight_measurements_with_latest_height", "model.dbt_testing_example.stg_gym_app__weight", "model.dbt_testing_example.stg_gym_app__height"]}], "model_runs": [{"name": "success", "display_name": "Successful Runs", "model_unique_ids": ["model.dbt_testing_example.int_weight_measurements_with_latest_height", "model.dbt_testing_example.body_mass_indexes", "model.dbt_testing_example.stg_gym_app__weight", "model.dbt_testing_example.stg_gym_app__height"]}]}, "lineage": {"nodes": [{"id": "model.dbt_testing_example.body_mass_indexes", "type": "model", "sub_type": "table"}, {"id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "type": "model", "sub_type": "table"}, {"id": "model.dbt_testing_example.stg_gym_app__weight", "type": "model", "sub_type": "table"}, {"id": "model.dbt_testing_example.stg_gym_app__height", "type": "model", "sub_type": "table"}, {"id": "source.dbt_testing_example.gym_app.raw_height", "type": "source", "sub_type": null}, {"id": "source.dbt_testing_example.gym_app.raw_weight", "type": "source", "sub_type": null}], "edges": [["model.dbt_testing_example.body_mass_indexes", "model.dbt_testing_example.int_weight_measurements_with_latest_height"], ["model.dbt_testing_example.int_weight_measurements_with_latest_height", "model.dbt_testing_example.stg_gym_app__height"], ["model.dbt_testing_example.int_weight_measurements_with_latest_height", "model.dbt_testing_example.stg_gym_app__weight"], ["model.dbt_testing_example.stg_gym_app__height", "source.dbt_testing_example.gym_app.raw_height"], ["model.dbt_testing_example.stg_gym_app__weight", "source.dbt_testing_example.gym_app.raw_weight"]]}, "invocations": [{"invocation_id": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "detected_at": null, "command": "run", "selected": "", "full_refresh": false, "job_url": "https://github.com/portovep/dbt-testing-examples/actions/runs/9041469067", "job_name": null, "job_id": null, "orchestrator": "github_actions"}], "resources_latest_invocation": {"model.dbt_testing_example.body_mass_indexes": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.dbt_testing_example.int_weight_measurements_with_latest_height": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.dbt_testing_example.stg_gym_app__height": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.dbt_testing_example.stg_gym_app__weight": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.alerts_anomaly_detection": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.alerts_dbt_models": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.alerts_dbt_source_freshness": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.alerts_dbt_tests": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.alerts_schema_changes": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.anomaly_threshold_sensitivity": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.data_monitoring_metrics": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_artifacts_hashes": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_columns": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_exposures": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_invocations": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_metrics": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_models": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_run_results": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_seeds": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_snapshots": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_source_freshness_results": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_sources": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.dbt_tests": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.elementary_test_results": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.enriched_columns": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.information_schema_columns": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.job_run_results": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.metadata": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.metrics_anomaly_score": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.model_run_results": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.monitors_runs": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.schema_columns_snapshot": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.snapshot_run_results": "bd0fa0be-2477-4b76-b9c7-721c8e395616", "model.elementary.test_result_rows": "bd0fa0be-2477-4b76-b9c7-721c8e395616"}, "invocations_job_identification": {}, "env": {"project_name": "dbt_testing_example", "env": "dev", "warehouse_type": "postgres"}, "tracking": {"posthog_api_key": "phc_56XBEzZmh02mGkadqLiYW51eECyYKWPyecVwkGdGUfg", "report_generator_anonymous_user_id": "7b9e4283-4af8-40ca-8cae-ffa6d18154da", "anonymous_warehouse_id": "c4ceb8ce71b3c19a1e56d64f17a01cf548ae5aed98172c5a89202c22e5018bb0"}}