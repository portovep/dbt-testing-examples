{"creation_time": "2024-04-28T05:38:12+00:00", "days_back": 7, "models": {"model.dbt_testing_example.body_mass_indexes": {"name": "body_mass_indexes", "unique_id": "model.dbt_testing_example.body_mass_indexes", "owners": [], "tags": [], "package_name": "dbt_testing_example", "description": "", "full_path": "models/marts/body_mass_indexes.sql", "meta": {}, "materialization": "table", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "patch_path": "dbt_testing_example://models/marts/_body_mass_indexes__models.yml", "model_name": "body_mass_indexes", "normalized_full_path": "dbt_testing_example/models/marts/body_mass_indexes.sql", "fqn": "neondb.dbt_testing_example.body_mass_indexes", "artifact_type": "model"}, "model.dbt_testing_example.int_weight_measurements_with_latest_height": {"name": "int_weight_measurements_with_latest_height", "unique_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "owners": [], "tags": [], "package_name": "dbt_testing_example", "description": "", "full_path": "models/intermediate/int_weight_measurements_with_latest_height.sql", "meta": {}, "materialization": "table", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "int_weight_measurements_with_latest_height", "patch_path": null, "model_name": "int_weight_measurements_with_latest_height", "normalized_full_path": "dbt_testing_example/models/intermediate/int_weight_measurements_with_latest_height.sql", "fqn": "neondb.dbt_testing_example.int_weight_measurements_with_latest_height", "artifact_type": "model"}, "model.dbt_testing_example.stg_gym_app__weight": {"name": "stg_gym_app__weight", "unique_id": "model.dbt_testing_example.stg_gym_app__weight", "owners": [], "tags": [], "package_name": "dbt_testing_example", "description": "", "full_path": "models/staging/gym_app/stg_gym_app__weight.sql", "meta": {}, "materialization": "table", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "stg_gym_app__weight", "patch_path": null, "model_name": "stg_gym_app__weight", "normalized_full_path": "dbt_testing_example/models/staging/gym_app/stg_gym_app__weight.sql", "fqn": "neondb.dbt_testing_example.stg_gym_app__weight", "artifact_type": "model"}, "model.dbt_testing_example.stg_gym_app__height": {"name": "stg_gym_app__height", "unique_id": "model.dbt_testing_example.stg_gym_app__height", "owners": [], "tags": [], "package_name": "dbt_testing_example", "description": "", "full_path": "models/staging/gym_app/stg_gym_app__height.sql", "meta": {}, "materialization": "table", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "stg_gym_app__height", "patch_path": null, "model_name": "stg_gym_app__height", "normalized_full_path": "dbt_testing_example/models/staging/gym_app/stg_gym_app__height.sql", "fqn": "neondb.dbt_testing_example.stg_gym_app__height", "artifact_type": "model"}, "source.dbt_testing_example.gym_app.raw_height": {"name": "raw_height", "unique_id": "source.dbt_testing_example.gym_app.raw_height", "owners": [], "tags": ["contract-test-source", "data-quality"], "package_name": "dbt_testing_example", "description": "", "full_path": "models/staging/gym_app/_gym_app__raw_height_schema.yml", "meta": {}, "materialization": null, "source_name": "gym_app", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "model_name": "raw_height", "normalized_full_path": "dbt_testing_example/sources/staging/gym_app/_gym_app__raw_height_schema.yml", "fqn": "neondb.dbt_testing_example.raw_height", "artifact_type": "source"}, "source.dbt_testing_example.gym_app.raw_weight": {"name": "raw_weight", "unique_id": "source.dbt_testing_example.gym_app.raw_weight", "owners": [], "tags": ["contract-test-source", "data-quality"], "package_name": "dbt_testing_example", "description": "", "full_path": "models/staging/gym_app/_gym_app__raw_weight_schema.yml", "meta": {}, "materialization": null, "source_name": "gym_app", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "model_name": "raw_weight", "normalized_full_path": "dbt_testing_example/sources/staging/gym_app/_gym_app__raw_weight_schema.yml", "fqn": "neondb.dbt_testing_example.raw_weight", "artifact_type": "source"}}, "groups": {"dbt": {"dbt_testing_example": {"models": {"marts": {"__files__": [{"node_id": "model.dbt_testing_example.body_mass_indexes", "resource_type": "model"}]}, "intermediate": {"__files__": [{"node_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "resource_type": "model"}]}, "staging": {"gym_app": {"__files__": [{"node_id": "model.dbt_testing_example.stg_gym_app__weight", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.stg_gym_app__height", "resource_type": "model"}]}}}, "sources": {"staging": {"gym_app": {"__files__": [{"node_id": "source.dbt_testing_example.gym_app.raw_height", "resource_type": "source"}, {"node_id": "source.dbt_testing_example.gym_app.raw_weight", "resource_type": "source"}]}}}}}, "tags": {"No tags": [{"node_id": "model.dbt_testing_example.body_mass_indexes", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.stg_gym_app__weight", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.stg_gym_app__height", "resource_type": "model"}], "contract-test-source": [{"node_id": "source.dbt_testing_example.gym_app.raw_height", "resource_type": "source"}, {"node_id": "source.dbt_testing_example.gym_app.raw_weight", "resource_type": "source"}], "data-quality": [{"node_id": "source.dbt_testing_example.gym_app.raw_height", "resource_type": "source"}, {"node_id": "source.dbt_testing_example.gym_app.raw_weight", "resource_type": "source"}]}, "owners": {"No owners": [{"node_id": "model.dbt_testing_example.body_mass_indexes", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.stg_gym_app__weight", "resource_type": "model"}, {"node_id": "model.dbt_testing_example.stg_gym_app__height", "resource_type": "model"}, {"node_id": "source.dbt_testing_example.gym_app.raw_height", "resource_type": "source"}, {"node_id": "source.dbt_testing_example.gym_app.raw_weight", "resource_type": "source"}]}}, "invocation": {"invocation_id": null, "detected_at": null, "command": null, "selected": null, "full_refresh": null, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, "test_results": {"model.dbt_testing_example.body_mass_indexes": [{"metadata": {"test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "elementary_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": null, "test_name": "freshness_anomalies", "test_display_name": "Freshness Anomalies", "latest_run_time": "2024-04-24T07:55:35+00:00", "latest_run_time_utc": "2024-04-24T07:55:35+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "anomaly_detection", "test_sub_type": "freshness", "test_query": "select * from (\n  \n  \n    \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n\n        \n        \n        \n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n        \n        \n        \n\n        with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"neondb\".\"dbt_testing_example_elementary\".\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240424075535377057\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n            anomaly_score is not null and\n            (\n              \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n              (\n                case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n                (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n              )\n            ) and\n            bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      )\n\n      select\n        metric_value as value,\n        training_avg as average,\n        \n        case\n        when is_anomalous = TRUE and 'both' = 'spike' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'spike' then\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'spike' then metric_value\n        else min_metric_value end as min_value,\n        case\n        when is_anomalous = TRUE and 'both' = 'drop' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'drop' then\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'drop' then metric_value\n        else max_metric_value end as max_value,\n        bucket_start as start_time,\n        bucket_end as end_time,\n        *\n      from anomaly_scores_with_is_anomalous\n      order by bucket_end, dimension_value\n    \n\n\n) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\n        metric_name = cast('freshness' as varchar(4096))", "test_params": {"timestamp_column": "processed_at", "time_bucket": {"period": "hour", "count": 2}, "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}", "where_expression": null, "anomaly_sensitivity": 3, "anomaly_direction": "both", "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null}, "test_created_at": null, "description": "Monitors the freshness of your table over time, as the expected time between data updates.", "result": {"result_description": "Last update was at 2024-04-24 05:35:39.043204, 0.41 hours ago. Usually the table is updated within 32.66 hours.", "result_query": "select * from (\n  \n  \n    \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n\n        \n        \n        \n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n        \n        \n        \n\n        with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"neondb\".\"dbt_testing_example_elementary\".\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240424075535377057\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n            anomaly_score is not null and\n            (\n              \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n              (\n                case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n                (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n              )\n            ) and\n            bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      )\n\n      select\n        metric_value as value,\n        training_avg as average,\n        \n        case\n        when is_anomalous = TRUE and 'both' = 'spike' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'spike' then\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'spike' then metric_value\n        else min_metric_value end as min_value,\n        case\n        when is_anomalous = TRUE and 'both' = 'drop' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'drop' then\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'drop' then metric_value\n        else max_metric_value end as max_value,\n        bucket_start as start_time,\n        bucket_end as end_time,\n        *\n      from anomaly_scores_with_is_anomalous\n      order by bucket_end, dimension_value\n    \n\n\n) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\n        metric_name = cast('freshness' as varchar(4096))"}, "configuration": {"test_name": "freshness_anomalies", "timestamp_column": "processed_at", "testing_timeframe": "2 hours", "anomaly_threshold": 3}, "test_tags": ["data-quality", "elementary-tests"]}, "test_results": {"display_name": "Freshness", "metrics": [{"value": 58311.0, "average": 54711.0, "min_value": 39437.49352637057, "max_value": 69984.50647362943, "start_time": "2024-04-10T02:00:00", "end_time": "2024-04-10T04:00:00", "id": "613f877a7869b29eacb4025b56ec87f4", "metric_id": "021744640f8b4861a66e1c52366e49eb", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 0.7071067811865475, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-10T02:00:00", "bucket_end": "2024-04-10T04:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 58311.0, "min_metric_value": 39437.49352637057, "max_metric_value": 69984.50647362943, "training_avg": 54711.0, "training_stddev": 5091.168824543142, "training_set_size": 2, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-10T04:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 16.20 hours ago. Usually the table is updated within 15.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 65511.0, "average": 58311.0, "min_value": 36711.0, "max_value": 79911.0, "start_time": "2024-04-10T04:00:00", "end_time": "2024-04-10T06:00:00", "id": "a76a1a329eeda1814e2b5753fd75e3c6", "metric_id": "36aa57d25c113e1235249dc4641e8239", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.0, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-10T04:00:00", "bucket_end": "2024-04-10T06:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 65511.0, "min_metric_value": 36711.0, "max_metric_value": 79911.0, "training_avg": 58311.0, "training_stddev": 7200.0, "training_set_size": 3, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-10T06:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 18.20 hours ago. Usually the table is updated within 16.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 72711.0, "average": 61911.0, "min_value": 34025.519907306596, "max_value": 89796.48009269341, "start_time": "2024-04-10T06:00:00", "end_time": "2024-04-10T08:00:00", "id": "07620459bbc1888510df7f9a0ba0f166", "metric_id": "14fb41376012ced174833d60e82b556d", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.1618950038622249, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-10T06:00:00", "bucket_end": "2024-04-10T08:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 72711.0, "min_metric_value": 34025.519907306596, "max_metric_value": 89796.48009269341, "training_avg": 61911.0, "training_stddev": 9295.160030897801, "training_set_size": 4, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-10T08:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 20.20 hours ago. Usually the table is updated within 17.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 79911.0, "average": 65511.0, "min_value": 31358.4012701815, "max_value": 99663.5987298185, "start_time": "2024-04-10T08:00:00", "end_time": "2024-04-10T10:00:00", "id": "67655fb4108063916eb3c7f2be1425ab", "metric_id": "89cdebe26c520884fbf46ccc6820868e", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.2649110640673515, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-10T08:00:00", "bucket_end": "2024-04-10T10:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 79911.0, "min_metric_value": 31358.4012701815, "max_metric_value": 99663.5987298185, "training_avg": 65511.0, "training_stddev": 11384.199576606166, "training_set_size": 5, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-10T10:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 22.20 hours ago. Usually the table is updated within 18.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 87111.0, "average": 69111.0, "min_value": 28701.100222841436, "max_value": 109520.89977715857, "start_time": "2024-04-10T10:00:00", "end_time": "2024-04-10T12:00:00", "id": "2477124e74d5c4d9214aef1bf85fa6da", "metric_id": "2dbea3ddfa0330ffb20c7dcf74bc9846", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.3363062095621219, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-10T10:00:00", "bucket_end": "2024-04-10T12:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 87111.0, "min_metric_value": 28701.100222841436, "max_metric_value": 109520.89977715857, "training_avg": 69111.0, "training_stddev": 13469.966592386188, "training_set_size": 6, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-10T12:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 24.20 hours ago. Usually the table is updated within 19.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 94311.0, "average": 72711.0, "min_value": 26049.666971463404, "max_value": 119372.3330285366, "start_time": "2024-04-10T12:00:00", "end_time": "2024-04-10T14:00:00", "id": "0285fb3dcbc0514b82a3848c0df9f5b9", "metric_id": "b2702cb5bd4a0bc500a3981f88beeaed", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.3887301496588271, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-10T12:00:00", "bucket_end": "2024-04-10T14:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 94311.0, "min_metric_value": 26049.666971463404, "max_metric_value": 119372.3330285366, "training_avg": 72711.0, "training_stddev": 15553.777676178865, "training_set_size": 7, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-10T14:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 26.20 hours ago. Usually the table is updated within 20.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 101511.0, "average": 76311.0, "min_value": 23402.02155588335, "max_value": 129219.97844411666, "start_time": "2024-04-10T14:00:00", "end_time": "2024-04-10T16:00:00", "id": "50ac9ac917fb3417ec642f77c1735768", "metric_id": "52a198388fd4294f6930effb0a850909", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.4288690166235205, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-10T14:00:00", "bucket_end": "2024-04-10T16:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 101511.0, "min_metric_value": 23402.02155588335, "max_metric_value": 129219.97844411666, "training_avg": 76311.0, "training_stddev": 17636.326148038883, "training_set_size": 8, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-10T16:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 28.20 hours ago. Usually the table is updated within 21.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 108711.0, "average": 79911.0, "min_value": 20756.96378944206, "max_value": 139065.03621055794, "start_time": "2024-04-10T16:00:00", "end_time": "2024-04-10T18:00:00", "id": "5d3ff64041861798934161c0ac71c0d8", "metric_id": "9dd73f25729043ff9a935507d67d98b3", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.4605934866804429, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-10T16:00:00", "bucket_end": "2024-04-10T18:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 108711.0, "min_metric_value": 20756.96378944206, "max_metric_value": 139065.03621055794, "training_avg": 79911.0, "training_stddev": 19718.01207018598, "training_set_size": 9, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-10T18:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 30.20 hours ago. Usually the table is updated within 22.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 115911.0, "average": 83511.0, "min_value": 18113.75235149417, "max_value": 148908.24764850584, "start_time": "2024-04-10T18:00:00", "end_time": "2024-04-10T20:00:00", "id": "6b457036afc5fa5b103b5a5389bec7f0", "metric_id": "08871662dcfe0b4c6e81cf26a560bc8c", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.4863010829205867, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-10T18:00:00", "bucket_end": "2024-04-10T20:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 115911.0, "min_metric_value": 18113.75235149417, "max_metric_value": 148908.24764850584, "training_avg": 83511.0, "training_stddev": 21799.08254950194, "training_set_size": 10, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-10T20:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 32.20 hours ago. Usually the table is updated within 23.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 123111.0, "average": 87111.0, "min_value": 15471.904528323357, "max_value": 158750.09547167664, "start_time": "2024-04-10T20:00:00", "end_time": "2024-04-10T22:00:00", "id": "aec33dbc60e6346fa6f5d8338fc46b09", "metric_id": "94c5f4a88f3c24f8a7f5a0fbb4974dbc", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.507556722888818, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-10T20:00:00", "bucket_end": "2024-04-10T22:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 123111.0, "min_metric_value": 15471.904528323357, "max_metric_value": 158750.09547167664, "training_avg": 87111.0, "training_stddev": 23879.69849055888, "training_set_size": 11, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-10T22:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 34.20 hours ago. Usually the table is updated within 24.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 130311.0, "average": 90711.0, "min_value": 12831.092449977834, "max_value": 168590.90755002218, "start_time": "2024-04-10T22:00:00", "end_time": "2024-04-11T00:00:00", "id": "ace4d93069769fd6b87384115b97dd17", "metric_id": "b5468c5e7efa543d1d41ce3d5105446f", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.52542553961938, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-10T22:00:00", "bucket_end": "2024-04-11T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 130311.0, "min_metric_value": 12831.092449977834, "max_metric_value": 168590.90755002218, "training_avg": 90711.0, "training_stddev": 25959.969183340723, "training_set_size": 12, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-11T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 36.20 hours ago. Usually the table is updated within 25.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 137511.0, "average": 94311.0, "min_value": 10191.085592054966, "max_value": 178430.91440794503, "start_time": "2024-04-11T00:00:00", "end_time": "2024-04-11T02:00:00", "id": "ac7f5f8f19d6a54b91622bd4762bdcb6", "metric_id": "1b0178e022c1bf5cf3cad06249ffe6a9", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.5406577730392865, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-11T00:00:00", "bucket_end": "2024-04-11T02:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 137511.0, "min_metric_value": 10191.085592054966, "max_metric_value": 178430.91440794503, "training_avg": 94311.0, "training_stddev": 28039.971469315013, "training_set_size": 13, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-11T02:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 38.20 hours ago. Usually the table is updated within 26.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 144711.0, "average": 97911.0, "min_value": 7551.717134319842, "max_value": 188270.28286568017, "start_time": "2024-04-11T02:00:00", "end_time": "2024-04-11T04:00:00", "id": "d30283d5b071f2807e5f3709cd87e2e4", "metric_id": "12fef55a2e4f7635dad02405226c8dbe", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.5537971921347118, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-11T02:00:00", "bucket_end": "2024-04-11T04:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 144711.0, "min_metric_value": 7551.717134319842, "max_metric_value": 188270.28286568017, "training_avg": 97911.0, "training_stddev": 30119.76095522672, "training_set_size": 14, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-11T04:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 40.20 hours ago. Usually the table is updated within 27.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 151911.0, "average": 101511.0, "min_value": 4912.8633720090875, "max_value": 198109.13662799093, "start_time": "2024-04-11T04:00:00", "end_time": "2024-04-11T06:00:00", "id": "7b4bc13e186fe1e01f60a9ad8be5c4ac", "metric_id": "ad8e1df818a7515214af1afa100987a7", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.5652475842498528, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-11T04:00:00", "bucket_end": "2024-04-11T06:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 151911.0, "min_metric_value": 4912.8633720090875, "max_metric_value": 198109.13662799093, "training_avg": 101511.0, "training_stddev": 32199.378875996972, "training_set_size": 15, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-11T06:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 42.20 hours ago. Usually the table is updated within 28.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 159111.0, "average": 105111.0, "min_value": 2274.430628982969, "max_value": 207947.56937101705, "start_time": "2024-04-11T06:00:00", "end_time": "2024-04-11T08:00:00", "id": "61d8543890624ddd61fa5d1a226e8570", "metric_id": "c096f3be0ddb5bf1174429a56d2867b5", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.575315094531511, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-11T06:00:00", "bucket_end": "2024-04-11T08:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 159111.0, "min_metric_value": 2274.430628982969, "max_metric_value": 207947.56937101705, "training_avg": 105111.0, "training_stddev": 34278.85645700568, "training_set_size": 16, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-11T08:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 44.20 hours ago. Usually the table is updated within 29.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 166311.0, "average": 108711.0, "min_value": 0.0, "max_value": 217785.65333431042, "start_time": "2024-04-11T08:00:00", "end_time": "2024-04-11T10:00:00", "id": "b212511d19b4c359e48650cd70ea17dc", "metric_id": "fdd01322235c64cdd49bc8ed941d5141", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.584236068762679, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-11T08:00:00", "bucket_end": "2024-04-11T10:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 166311.0, "min_metric_value": 0.0, "max_metric_value": 217785.65333431042, "training_avg": 108711.0, "training_stddev": 36358.21777810348, "training_set_size": 17, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-11T10:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 46.20 hours ago. Usually the table is updated within 30.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 173511.0, "average": 112311.0, "min_value": 0.0, "max_value": 227623.44512193816, "start_time": "2024-04-11T10:00:00", "end_time": "2024-04-11T12:00:00", "id": "0e11627fde62716ecb6259fac585fdeb", "metric_id": "e5d296abc0b9427c768a1a5e3560616e", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.5921958796888798, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-11T10:00:00", "bucket_end": "2024-04-11T12:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 173511.0, "min_metric_value": 0.0, "max_metric_value": 227623.44512193816, "training_avg": 112311.0, "training_stddev": 38437.48170731272, "training_set_size": 18, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-11T12:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 48.20 hours ago. Usually the table is updated within 31.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 180711.0, "average": 115911.0, "min_value": 0.0, "max_value": 237460.98971616576, "start_time": "2024-04-11T12:00:00", "end_time": "2024-04-11T14:00:00", "id": "b05f70970a9c126b5bc1d6c3f51e0628", "metric_id": "dbee61de882f0daeba244d7ea01cb7bd", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.5993419699495495, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-11T12:00:00", "bucket_end": "2024-04-11T14:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 180711.0, "min_metric_value": 0.0, "max_metric_value": 237460.98971616576, "training_avg": 115911.0, "training_stddev": 40516.663238721914, "training_set_size": 19, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-11T14:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 50.20 hours ago. Usually the table is updated within 32.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 187911.0, "average": 119511.0, "min_value": 0.0, "max_value": 247298.3233149517, "start_time": "2024-04-11T14:00:00", "end_time": "2024-04-11T16:00:00", "id": "4a182ac6019c7984dcc56e8ee60edf85", "metric_id": "6f2da9c126dcbd6ff61e355fff1af560", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.6057930839841816, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-11T14:00:00", "bucket_end": "2024-04-11T16:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 187911.0, "min_metric_value": 0.0, "max_metric_value": 247298.3233149517, "training_avg": 119511.0, "training_stddev": 42595.77443831723, "training_set_size": 20, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-11T16:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 52.20 hours ago. Usually the table is updated within 33.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 195111.0, "average": 123111.0, "min_value": 0.0, "max_value": 257135.47537670124, "start_time": "2024-04-11T16:00:00", "end_time": "2024-04-11T18:00:00", "id": "9ac92b88ab4368e0ec6c71c340b7285f", "metric_id": "f677fa34d389092a98c0abc764a9bd6d", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": 1.6116459280507607, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-09 11:48:09.539462", "bucket_start": "2024-04-11T16:00:00", "bucket_end": "2024-04-11T18:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 195111.0, "min_metric_value": 0.0, "max_metric_value": 257135.47537670124, "training_avg": 123111.0, "training_stddev": 44674.825125567084, "training_set_size": 21, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-11T18:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-09 11:48:09.539462, 54.20 hours ago. Usually the table is updated within 34.20 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}, {"value": 1461.0, "average": 117581.45454545454, "min_value": 0.0, "max_value": 269769.5711673153, "start_time": "2024-04-24T04:00:00", "end_time": "2024-04-24T06:00:00", "id": "c9a14c4a35acf4a362f24714ede96c22", "metric_id": "a727e3317bf50d9d2d85efaa1e4eda4e", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "detected_at": "2024-04-24T07:55:35.428737", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "freshness", "anomaly_score": -2.2890181662601896, "anomaly_score_threshold": 3, "anomalous_value": "2024-04-24 05:35:39.043204", "bucket_start": "2024-04-24T04:00:00", "bucket_end": "2024-04-24T06:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 1461.0, "min_metric_value": 0.0, "max_metric_value": 269769.5711673153, "training_avg": 117581.45454545454, "training_stddev": 50729.37220728692, "training_set_size": 22, "training_start": "2024-04-10T02:00:00", "training_end": "2024-04-24T06:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "Last update was at 2024-04-24 05:35:39.043204, 0.41 hours ago. Usually the table is updated within 32.66 hours.", "max_bucket_end": "2024-04-24T06:00:00", "is_anomalous": false}], "result_description": "Last update was at 2024-04-24 05:35:39.043204, 0.41 hours ago. Usually the table is updated within 32.66 hours."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a", "elementary_unique_id": "test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": null, "test_name": "schema_changes", "test_display_name": "Schema Changes", "latest_run_time": "2024-04-24T07:55:38+00:00", "latest_run_time_utc": "2024-04-24T07:55:38+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "schema_change", "test_sub_type": "generic", "test_query": "select * from \"neondb\".\"dbt_testing_example_elementary\".\"test_5e7b3caf3__schema_changes_alerts__tmp_20240424075535585666\"", "test_params": {"model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}, "test_created_at": null, "description": "Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.", "result": {"result_description": null, "result_query": "select * from \"neondb\".\"dbt_testing_example_elementary\".\"test_5e7b3caf3__schema_changes_alerts__tmp_20240424075535585666\""}, "configuration": {"test_name": "schema_changes", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["data-quality", "elementary-tests"]}, "test_results": {"display_name": "generic", "metrics": null, "result_description": null}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103", "elementary_unique_id": "test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": null, "test_name": "volume_anomalies", "test_display_name": "Volume Anomalies", "latest_run_time": "2024-04-24T07:55:35+00:00", "latest_run_time_utc": "2024-04-24T07:55:35+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "anomaly_detection", "test_sub_type": "row_count", "test_query": "select * from (\n  \n\n  \n    \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n\n        \n        \n        \n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n        \n        \n        \n\n        with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"neondb\".\"dbt_testing_example_elementary\".\"test_c1d889d103_eleme__anomaly_scores__tmp_20240424075535180288\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n            anomaly_score is not null and\n            (\n              \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n              (\n                case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n                (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n              )\n            ) and\n            bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      )\n\n      select\n        metric_value as value,\n        training_avg as average,\n        \n        case\n        when is_anomalous = TRUE and 'both' = 'spike' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'spike' then\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'spike' then metric_value\n        else min_metric_value end as min_value,\n        case\n        when is_anomalous = TRUE and 'both' = 'drop' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'drop' then\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'drop' then metric_value\n        else max_metric_value end as max_value,\n        bucket_start as start_time,\n        bucket_end as end_time,\n        *\n      from anomaly_scores_with_is_anomalous\n      order by bucket_end, dimension_value\n    \n\n\n) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))", "test_params": {"model": "{{ get_where_subquery(ref('body_mass_indexes')) }}", "timestamp_column": null, "where_expression": null, "anomaly_sensitivity": 3, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null}, "test_created_at": null, "description": "Monitors the row count of your table over time.", "result": {"result_description": "The last row_count value is 4.000. The average for this metric is 4.000.", "result_query": "select * from (\n  \n\n  \n    \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n\n        \n        \n        \n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n        \n        \n        \n\n        with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"neondb\".\"dbt_testing_example_elementary\".\"test_c1d889d103_eleme__anomaly_scores__tmp_20240424075535180288\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n            anomaly_score is not null and\n            (\n              \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n              (\n                case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n                (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n              )\n            ) and\n            bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      )\n\n      select\n        metric_value as value,\n        training_avg as average,\n        \n        case\n        when is_anomalous = TRUE and 'both' = 'spike' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'spike' then\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'spike' then metric_value\n        else min_metric_value end as min_value,\n        case\n        when is_anomalous = TRUE and 'both' = 'drop' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'drop' then\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'drop' then metric_value\n        else max_metric_value end as max_value,\n        bucket_start as start_time,\n        bucket_end as end_time,\n        *\n      from anomaly_scores_with_is_anomalous\n      order by bucket_end, dimension_value\n    \n\n\n) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))"}, "configuration": {"test_name": "volume_anomalies", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": 3}, "test_tags": ["data-quality", "elementary-tests"]}, "test_results": {"display_name": "Row Count", "metrics": [{"value": 4.0, "average": 4.0, "min_value": 4.0, "max_value": 4.0, "start_time": null, "end_time": "2024-04-11T18:30:50", "id": "1ed4ced454ad947a235c2f5cc3cdd30a", "metric_id": "e9b2bbf939a6b2af8a315d006ff13276", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103", "test_unique_id": "test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103", "detected_at": "2024-04-24T07:55:35.232632", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": null, "bucket_end": "2024-04-11T18:30:50", "bucket_seasonality": "no_seasonality", "metric_value": 4.0, "min_metric_value": 4.0, "max_metric_value": 4.0, "training_avg": 4.0, "training_stddev": 0.0, "training_set_size": 2, "training_start": "2024-04-11T18:30:03", "training_end": "2024-04-11T18:30:50", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 4.000. The average for this metric is 4.000.", "max_bucket_end": "2024-04-24T07:55:28", "is_anomalous": false}, {"value": 4.0, "average": 4.0, "min_value": 4.0, "max_value": 4.0, "start_time": null, "end_time": "2024-04-24T07:37:30", "id": "7e203da95d6cf881c10c70ac4dfbee4c", "metric_id": "c7c6d0e13ea10ee9d4d0b560982e1066", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103", "test_unique_id": "test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103", "detected_at": "2024-04-24T07:55:35.232632", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": null, "bucket_end": "2024-04-24T07:37:30", "bucket_seasonality": "no_seasonality", "metric_value": 4.0, "min_metric_value": 4.0, "max_metric_value": 4.0, "training_avg": 4.0, "training_stddev": 0.0, "training_set_size": 3, "training_start": "2024-04-11T18:30:03", "training_end": "2024-04-24T07:37:30", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 4.000. The average for this metric is 4.000.", "max_bucket_end": "2024-04-24T07:55:28", "is_anomalous": false}, {"value": 4.0, "average": 4.0, "min_value": 4.0, "max_value": 4.0, "start_time": null, "end_time": "2024-04-24T07:55:28", "id": "98478d0339ca59e86a47512e69fb2062", "metric_id": "e3d91cc5595c0894f6b827b76176cb9a", "test_execution_id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103", "test_unique_id": "test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103", "detected_at": "2024-04-24T07:55:35.232632", "full_table_name": "NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": null, "bucket_end": "2024-04-24T07:55:28", "bucket_seasonality": "no_seasonality", "metric_value": 4.0, "min_metric_value": 4.0, "max_metric_value": 4.0, "training_avg": 4.0, "training_stddev": 0.0, "training_set_size": 4, "training_start": "2024-04-11T18:30:03", "training_end": "2024-04-24T07:55:28", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 4.000. The average for this metric is 4.000.", "max_bucket_end": "2024-04-24T07:55:28", "is_anomalous": false}], "result_description": "The last row_count value is 4.000. The average for this metric is 4.000."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2", "elementary_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": "user_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "source('gym_app', 'raw_height')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "source('gym_app', 'raw_height')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}}, "test_tags": ["data-quality"]}, "test_results": {"display_name": "relationships", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0", "elementary_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": "user_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "source('gym_app', 'raw_weight')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "source('gym_app', 'raw_weight')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}}, "test_tags": ["data-quality"]}, "test_results": {"display_name": "relationships", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "source.dbt_testing_example.gym_app.raw_height": [{"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:31+00:00", "latest_run_time_utc": "2024-04-28T05:34:31+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "double precision", "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "double precision", "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height_unit", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:31+00:00", "latest_run_time_utc": "2024-04-28T05:34:31+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "text", "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "text", "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "user_id", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:31+00:00", "latest_run_time_utc": "2024-04-28T05:34:31+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d", "elementary_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "accepted_range", "test_display_name": "Accepted Range", "latest_run_time": "2024-04-28T05:34:32+00:00", "latest_run_time_utc": "2024-04-28T05:34:32+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not height > 0\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "inclusive": false, "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not height > 0\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "accepted_range", "test_params": {"min_value": 0, "inclusive": false, "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "accepted_range", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08", "elementary_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height_unit", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        height_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n    group by height_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cm','inches'\n)", "test_params": {"values": ["cm", "inches"], "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        height_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n    group by height_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cm','inches'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["cm", "inches"], "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select height\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere height is null", "test_params": {"column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select height\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere height is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "user_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere user_id is null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere user_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "source.dbt_testing_example.gym_app.raw_weight": [{"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "measurement_unit", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:31+00:00", "latest_run_time_utc": "2024-04-28T05:34:31+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MEASUREMENT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "text", "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MEASUREMENT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "text", "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "user_id", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:32+00:00", "latest_run_time_utc": "2024-04-28T05:34:32+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:32+00:00", "latest_run_time_utc": "2024-04-28T05:34:32+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'WEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "double precision", "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'WEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "double precision", "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d", "elementary_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "accepted_range", "test_display_name": "Accepted Range", "latest_run_time": "2024-04-28T05:34:32+00:00", "latest_run_time_utc": "2024-04-28T05:34:32+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not weight > 0\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "inclusive": false, "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not weight > 0\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "accepted_range", "test_params": {"min_value": 0, "inclusive": false, "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "accepted_range", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da", "elementary_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "measurement_unit", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        measurement_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n    group by measurement_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'kg','pounds'\n)", "test_params": {"values": ["kg", "pounds"], "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        measurement_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n    group by measurement_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'kg','pounds'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["kg", "pounds"], "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "user_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-28T05:34:34+00:00", "latest_run_time_utc": "2024-04-28T05:34:34+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere user_id is null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere user_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-28T05:34:34+00:00", "latest_run_time_utc": "2024-04-28T05:34:34+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select weight\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere weight is null", "test_params": {"column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select weight\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere weight is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}]}, "test_results_totals": {"model.dbt_testing_example.body_mass_indexes": {"errors": 0, "warnings": 0, "passed": 5, "failures": 0}, "source.dbt_testing_example.gym_app.raw_height": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "source.dbt_testing_example.gym_app.raw_weight": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}}, "test_runs": {"model.dbt_testing_example.body_mass_indexes": [{"metadata": {"test_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "elementary_unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": null, "test_name": "freshness_anomalies", "test_display_name": "Freshness Anomalies", "latest_run_time": "2024-04-24T07:55:35+00:00", "latest_run_time_utc": "2024-04-24T07:55:35+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "anomaly_detection", "test_sub_type": "freshness", "test_query": "select * from (\n  \n  \n    \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n\n        \n        \n        \n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n        \n        \n        \n\n        with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"neondb\".\"dbt_testing_example_elementary\".\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240424075535377057\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n            anomaly_score is not null and\n            (\n              \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n              (\n                case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n                (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n              )\n            ) and\n            bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      )\n\n      select\n        metric_value as value,\n        training_avg as average,\n        \n        case\n        when is_anomalous = TRUE and 'both' = 'spike' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'spike' then\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'spike' then metric_value\n        else min_metric_value end as min_value,\n        case\n        when is_anomalous = TRUE and 'both' = 'drop' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'drop' then\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'drop' then metric_value\n        else max_metric_value end as max_value,\n        bucket_start as start_time,\n        bucket_end as end_time,\n        *\n      from anomaly_scores_with_is_anomalous\n      order by bucket_end, dimension_value\n    \n\n\n) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\n        metric_name = cast('freshness' as varchar(4096))", "test_params": {"timestamp_column": "processed_at", "time_bucket": {"period": "hour", "count": 2}, "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}", "where_expression": null, "anomaly_sensitivity": 3, "anomaly_direction": "both", "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null}, "test_created_at": null, "description": "Monitors the freshness of your table over time, as the expected time between data updates.", "result": {"result_description": "Last update was at 2024-04-24 05:35:39.043204, 0.41 hours ago. Usually the table is updated within 32.66 hours.", "result_query": "select * from (\n  \n  \n    \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n\n        \n        \n        \n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n        \n        \n        \n\n        with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"neondb\".\"dbt_testing_example_elementary\".\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240424075535377057\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n            anomaly_score is not null and\n            (\n              \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n              (\n                case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n                (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n              )\n            ) and\n            bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      )\n\n      select\n        metric_value as value,\n        training_avg as average,\n        \n        case\n        when is_anomalous = TRUE and 'both' = 'spike' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'spike' then\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'spike' then metric_value\n        else min_metric_value end as min_value,\n        case\n        when is_anomalous = TRUE and 'both' = 'drop' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'drop' then\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'drop' then metric_value\n        else max_metric_value end as max_value,\n        bucket_start as start_time,\n        bucket_end as end_time,\n        *\n      from anomaly_scores_with_is_anomalous\n      order by bucket_end, dimension_value\n    \n\n\n) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\n        metric_name = cast('freshness' as varchar(4096))"}, "configuration": {"test_name": "freshness_anomalies", "timestamp_column": "processed_at", "testing_timeframe": "2 hours", "anomaly_threshold": 3}, "test_tags": ["data-quality", "elementary-tests"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-24T07:37:36+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:35+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a", "elementary_unique_id": "test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": null, "test_name": "schema_changes", "test_display_name": "Schema Changes", "latest_run_time": "2024-04-24T07:55:38+00:00", "latest_run_time_utc": "2024-04-24T07:55:38+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "schema_change", "test_sub_type": "generic", "test_query": "select * from \"neondb\".\"dbt_testing_example_elementary\".\"test_5e7b3caf3__schema_changes_alerts__tmp_20240424075535585666\"", "test_params": {"model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}, "test_created_at": null, "description": "Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.", "result": {"result_description": null, "result_query": "select * from \"neondb\".\"dbt_testing_example_elementary\".\"test_5e7b3caf3__schema_changes_alerts__tmp_20240424075535585666\""}, "configuration": {"test_name": "schema_changes", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["data-quality", "elementary-tests"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-24T07:37:39+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:38+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103", "elementary_unique_id": "test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": null, "test_name": "volume_anomalies", "test_display_name": "Volume Anomalies", "latest_run_time": "2024-04-24T07:55:35+00:00", "latest_run_time_utc": "2024-04-24T07:55:35+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "anomaly_detection", "test_sub_type": "row_count", "test_query": "select * from (\n  \n\n  \n    \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n\n        \n        \n        \n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n        \n        \n        \n\n        with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"neondb\".\"dbt_testing_example_elementary\".\"test_c1d889d103_eleme__anomaly_scores__tmp_20240424075535180288\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n            anomaly_score is not null and\n            (\n              \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n              (\n                case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n                (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n              )\n            ) and\n            bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      )\n\n      select\n        metric_value as value,\n        training_avg as average,\n        \n        case\n        when is_anomalous = TRUE and 'both' = 'spike' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'spike' then\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'spike' then metric_value\n        else min_metric_value end as min_value,\n        case\n        when is_anomalous = TRUE and 'both' = 'drop' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'drop' then\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'drop' then metric_value\n        else max_metric_value end as max_value,\n        bucket_start as start_time,\n        bucket_end as end_time,\n        *\n      from anomaly_scores_with_is_anomalous\n      order by bucket_end, dimension_value\n    \n\n\n) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))", "test_params": {"model": "{{ get_where_subquery(ref('body_mass_indexes')) }}", "timestamp_column": null, "where_expression": null, "anomaly_sensitivity": 3, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null}, "test_created_at": null, "description": "Monitors the row count of your table over time.", "result": {"result_description": "The last row_count value is 4.000. The average for this metric is 4.000.", "result_query": "select * from (\n  \n\n  \n    \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n\n        \n        \n        \n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n\n        \n        \n        \n\n        \n        \n        \n        \n\n        \n        \n        \n        \n\n        with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"neondb\".\"dbt_testing_example_elementary\".\"test_c1d889d103_eleme__anomaly_scores__tmp_20240424075535180288\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n            anomaly_score is not null and\n            (\n              \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n              (\n                case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n                (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n              )\n            ) and\n            bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      )\n\n      select\n        metric_value as value,\n        training_avg as average,\n        \n        case\n        when is_anomalous = TRUE and 'both' = 'spike' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'spike' then\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'spike' then metric_value\n        else min_metric_value end as min_value,\n        case\n        when is_anomalous = TRUE and 'both' = 'drop' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when is_anomalous = TRUE and 'both' != 'drop' then\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n        when 'both' = 'drop' then metric_value\n        else max_metric_value end as max_value,\n        bucket_start as start_time,\n        bucket_end as end_time,\n        *\n      from anomaly_scores_with_is_anomalous\n      order by bucket_end, dimension_value\n    \n\n\n) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))"}, "configuration": {"test_name": "volume_anomalies", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": 3}, "test_tags": ["data-quality", "elementary-tests"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-24T07:37:35+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:35+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2", "elementary_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": "user_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "source('gym_app', 'raw_height')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "source('gym_app', 'raw_height')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}}, "test_tags": ["data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:36+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:43+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:26+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:34+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:22+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:34+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:05+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:35:00+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:34+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:33+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0", "elementary_unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "body_mass_indexes", "column_name": "user_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_testing_example.body_mass_indexes", "table_unique_id": "neondb.dbt_testing_example.body_mass_indexes", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "source('gym_app', 'raw_weight')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "source('gym_app', 'raw_weight')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('body_mass_indexes')) }}"}}, "test_tags": ["data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:36+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:43+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:26+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:35+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:22+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:35+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:05+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:35:00+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:34+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:33+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}], "source.dbt_testing_example.gym_app.raw_height": [{"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:31+00:00", "latest_run_time_utc": "2024-04-28T05:34:31+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "double precision", "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "double precision", "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:34+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:41+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:24+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:33+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:21+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:33+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:03+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:34:59+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:32+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:31+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height_unit", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:31+00:00", "latest_run_time_utc": "2024-04-28T05:34:31+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "text", "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "text", "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:34+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:41+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:24+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:33+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:21+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:33+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:03+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:34:59+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:32+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:31+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "user_id", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:31+00:00", "latest_run_time_utc": "2024-04-28T05:34:31+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:34+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:41+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:24+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:33+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:21+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:33+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:03+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:34:59+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:32+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:31+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d", "elementary_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "accepted_range", "test_display_name": "Accepted Range", "latest_run_time": "2024-04-28T05:34:32+00:00", "latest_run_time_utc": "2024-04-28T05:34:32+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not height > 0\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "inclusive": false, "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not height > 0\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "accepted_range", "test_params": {"min_value": 0, "inclusive": false, "column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:34+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:42+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:25+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:34+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:21+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:33+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:03+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:34:59+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:33+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:32+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08", "elementary_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height_unit", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        height_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n    group by height_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cm','inches'\n)", "test_params": {"values": ["cm", "inches"], "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        height_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n    group by height_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cm','inches'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["cm", "inches"], "column_name": "height_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:36+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:43+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:26+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:36+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:22+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:35+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:05+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:35:01+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:34+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:33+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "height", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select height\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere height is null", "test_params": {"column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select height\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere height is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "height", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:37+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:45+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:27+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:36+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:23+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:36+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:07+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:35:01+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:35+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:33+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_height", "column_name": "user_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_height", "table_unique_id": "neondb.dbt_testing_example.raw_height", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere user_id is null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere user_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_height')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:37+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:45+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:27+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:36+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:23+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:36+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:07+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:35:01+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:35+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:33+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}], "source.dbt_testing_example.gym_app.raw_weight": [{"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "measurement_unit", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:31+00:00", "latest_run_time_utc": "2024-04-28T05:34:31+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MEASUREMENT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "text", "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MEASUREMENT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "text", "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:34+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:41+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:24+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:33+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:21+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:33+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:03+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:34:59+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:32+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:31+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "user_id", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:32+00:00", "latest_run_time_utc": "2024-04-28T05:34:32+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "integer", "column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:35+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:43+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:25+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:34+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:22+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:34+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:05+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:35:00+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:34+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:32+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381", "elementary_unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-28T05:34:32+00:00", "latest_run_time_utc": "2024-04-28T05:34:32+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'WEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "double precision", "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'WEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "double precision", "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:35+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:43+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:25+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:34+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:22+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:34+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:05+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:35:00+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:34+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:32+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d", "elementary_unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "accepted_range", "test_display_name": "Accepted Range", "latest_run_time": "2024-04-28T05:34:32+00:00", "latest_run_time_utc": "2024-04-28T05:34:32+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not weight > 0\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "inclusive": false, "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not weight > 0\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "accepted_range", "test_params": {"min_value": 0, "inclusive": false, "column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:34+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:42+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:25+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:34+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:21+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:33+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:03+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:34:59+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:33+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:32+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da", "elementary_unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "measurement_unit", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-28T05:34:33+00:00", "latest_run_time_utc": "2024-04-28T05:34:33+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        measurement_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n    group by measurement_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'kg','pounds'\n)", "test_params": {"values": ["kg", "pounds"], "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        measurement_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n    group by measurement_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'kg','pounds'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["kg", "pounds"], "column_name": "measurement_unit", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:36+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:43+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:26+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:36+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:22+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:35+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:05+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:35:01+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:34+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:33+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "user_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-28T05:34:34+00:00", "latest_run_time_utc": "2024-04-28T05:34:34+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere user_id is null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere user_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "user_id", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:37+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:45+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:27+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:36+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:23+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:36+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:07+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:35:02+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:35+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:34+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d", "elementary_unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic", "database_name": "neondb", "schema_name": "dbt_testing_example", "table_name": "raw_weight", "column_name": "weight", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-28T05:34:34+00:00", "latest_run_time_utc": "2024-04-28T05:34:34+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbt_testing_example.gym_app.raw_weight", "table_unique_id": "neondb.dbt_testing_example.raw_weight", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select weight\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere weight is null", "test_params": {"column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select weight\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere weight is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "weight", "model": "{{ get_where_subquery(source('gym_app', 'raw_weight')) }}"}}, "test_tags": ["contract-test-source", "data-quality"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T05:34:37+00:00", "id": "0ac05f4e-fd37-4933-9e7b-7ae27e90e9fb", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-23T05:34:45+00:00", "id": "1e4b9450-617d-46ca-aab9-64c37afe2514", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T05:34:27+00:00", "id": "116b0b1c-d1f6-4937-90d8-22c3c1be9bf3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:37:36+00:00", "id": "847704fc-37d9-46d6-9807-9d39a68668c3", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:51:23+00:00", "id": "0534ca30-5d5f-42c3-954d-f5cb46186bcd", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-24T07:55:36+00:00", "id": "ac85c409-1354-4bcd-a493-c0eacb9ab49c", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-25T05:35:07+00:00", "id": "747fe8f5-f558-4692-b017-e55e84ab9724", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-26T05:35:02+00:00", "id": "ab19ac11-9047-4988-9e2c-224721853a4a", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-27T05:34:35+00:00", "id": "b2c4bf33-8d84-48ad-8acb-3706376942a8", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-04-28T05:34:34+00:00", "id": "f2d87f37-37e3-4383-95ce-36aaee2e59c7", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 10 test runs."}}]}, "test_runs_totals": {"model.dbt_testing_example.body_mass_indexes": {"errors": 0, "warnings": 0, "passed": 26, "failures": 0}, "source.dbt_testing_example.gym_app.raw_height": {"errors": 0, "warnings": 0, "passed": 70, "failures": 0}, "source.dbt_testing_example.gym_app.raw_weight": {"errors": 0, "warnings": 0, "passed": 70, "failures": 0}}, "coverages": {"source.dbt_testing_example.gym_app.raw_weight": {"table_tests": 0, "column_tests": 7}, "model.dbt_testing_example.stg_gym_app__height": {"table_tests": 1, "column_tests": 0}, "source.dbt_testing_example.gym_app.raw_height": {"table_tests": 0, "column_tests": 7}, "model.dbt_testing_example.body_mass_indexes": {"table_tests": 5, "column_tests": 2}, "model.dbt_testing_example.int_weight_measurements_with_latest_height": {"table_tests": 1, "column_tests": 0}, "model.dbt_testing_example.stg_gym_app__weight": {"table_tests": 1, "column_tests": 0}}, "model_runs": [{"unique_id": "model.dbt_testing_example.stg_gym_app__weight", "schema": "dbt_testing_example", "name": "stg_gym_app__weight", "status": "success", "last_exec_time": 2.5, "median_exec_time": 2.3, "compiled_code": "with\n\nsource as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n\n),\n\nrenamed as (\n\n    select\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\n        weight,\n        user_id,\n        measurement_unit\n    from source\n\n)\n\nselect * from renamed", "last_generated_at": "2024-04-28T05:35:48+00:00", "exec_time_change_rate": 8.69565217391306, "totals": {"errors": 0, "success": 7}, "runs": [{"id": "60bf1407-e910-433d-a0d0-6163cbeb61fc", "time_utc": "2024-04-22T05:35:41+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.7}, {"id": "50f697e7-f9a9-4ddc-bbf8-589c9ef033a9", "time_utc": "2024-04-23T05:35:52+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.8}, {"id": "9291f231-52a3-45f9-b0fa-d0e6bde1d17c", "time_utc": "2024-04-24T05:35:43+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.3}, {"id": "7e28e995-96e2-4d8e-936d-3dcd0339aaed", "time_utc": "2024-04-25T05:36:28+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.3}, {"id": "8d6632c2-7844-4a60-84e2-d65cfc6d3b5b", "time_utc": "2024-04-26T05:36:15+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.3}, {"id": "689b1adc-e564-4104-8673-3bb33a796644", "time_utc": "2024-04-27T05:35:36+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}, {"id": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "time_utc": "2024-04-28T05:35:48+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.5}]}, {"unique_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "schema": "dbt_testing_example", "name": "int_weight_measurements_with_latest_height", "status": "success", "last_exec_time": 2.4, "median_exec_time": 1.9, "compiled_code": "with\n\nheight as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"stg_gym_app__height\"\n\n),\n\nweight as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"stg_gym_app__weight\"\n\n),\n\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\n\n    select\n        weight.created_date,\n        user_id,\n        weight,\n        (select height\n         from height\n         where  height.created_date < weight.created_date and\n                height.user_id = weight.user_id\n         order by height.created_date DESC\n         limit 1) as height\n    from weight\n)\n\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement", "last_generated_at": "2024-04-28T05:35:48+00:00", "exec_time_change_rate": 26.315789473684205, "totals": {"errors": 0, "success": 7}, "runs": [{"id": "60bf1407-e910-433d-a0d0-6163cbeb61fc", "time_utc": "2024-04-22T05:35:41+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.4}, {"id": "50f697e7-f9a9-4ddc-bbf8-589c9ef033a9", "time_utc": "2024-04-23T05:35:52+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}, {"id": "9291f231-52a3-45f9-b0fa-d0e6bde1d17c", "time_utc": "2024-04-24T05:35:43+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.0}, {"id": "7e28e995-96e2-4d8e-936d-3dcd0339aaed", "time_utc": "2024-04-25T05:36:28+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.1}, {"id": "8d6632c2-7844-4a60-84e2-d65cfc6d3b5b", "time_utc": "2024-04-26T05:36:15+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.9}, {"id": "689b1adc-e564-4104-8673-3bb33a796644", "time_utc": "2024-04-27T05:35:36+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.5}, {"id": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "time_utc": "2024-04-28T05:35:48+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.4}]}, {"unique_id": "model.dbt_testing_example.stg_gym_app__height", "schema": "dbt_testing_example", "name": "stg_gym_app__height", "status": "success", "last_exec_time": 2.5, "median_exec_time": 2.1, "compiled_code": "with\n\nsource as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n\n),\n\nrenamed as (\n\n    select\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\n        user_id,\n        height,\n        height_unit as measurement_unit\n    from source\n\n)\n\nselect * from renamed", "last_generated_at": "2024-04-28T05:35:48+00:00", "exec_time_change_rate": 19.047619047619047, "totals": {"errors": 0, "success": 7}, "runs": [{"id": "60bf1407-e910-433d-a0d0-6163cbeb61fc", "time_utc": "2024-04-22T05:35:41+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.7}, {"id": "50f697e7-f9a9-4ddc-bbf8-589c9ef033a9", "time_utc": "2024-04-23T05:35:52+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.8}, {"id": "9291f231-52a3-45f9-b0fa-d0e6bde1d17c", "time_utc": "2024-04-24T05:35:43+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.3}, {"id": "7e28e995-96e2-4d8e-936d-3dcd0339aaed", "time_utc": "2024-04-25T05:36:28+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.1}, {"id": "8d6632c2-7844-4a60-84e2-d65cfc6d3b5b", "time_utc": "2024-04-26T05:36:15+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.3}, {"id": "689b1adc-e564-4104-8673-3bb33a796644", "time_utc": "2024-04-27T05:35:36+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}, {"id": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "time_utc": "2024-04-28T05:35:48+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.5}]}, {"unique_id": "model.dbt_testing_example.body_mass_indexes", "schema": "dbt_testing_example", "name": "body_mass_indexes", "status": "success", "last_exec_time": 2.2, "median_exec_time": 1.9, "compiled_code": "with\n\nweights_with_latest_height as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"int_weight_measurements_with_latest_height\"\n\n),\n\nbody_mass_indexes as (\n\n    select\n        created_date,\n        user_id,\n        weight,\n        height,\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\n        current_timestamp as processed_at\n    from weights_with_latest_height\n)\n\nselect * from body_mass_indexes", "last_generated_at": "2024-04-28T05:35:48+00:00", "exec_time_change_rate": 15.789473684210531, "totals": {"errors": 0, "success": 7}, "runs": [{"id": "60bf1407-e910-433d-a0d0-6163cbeb61fc", "time_utc": "2024-04-22T05:35:42+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.4}, {"id": "50f697e7-f9a9-4ddc-bbf8-589c9ef033a9", "time_utc": "2024-04-23T05:35:52+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}, {"id": "9291f231-52a3-45f9-b0fa-d0e6bde1d17c", "time_utc": "2024-04-24T05:35:43+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.0}, {"id": "7e28e995-96e2-4d8e-936d-3dcd0339aaed", "time_utc": "2024-04-25T05:36:28+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.1}, {"id": "8d6632c2-7844-4a60-84e2-d65cfc6d3b5b", "time_utc": "2024-04-26T05:36:15+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.9}, {"id": "689b1adc-e564-4104-8673-3bb33a796644", "time_utc": "2024-04-27T05:35:36+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.3}, {"id": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "time_utc": "2024-04-28T05:35:48+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.2}]}], "model_runs_totals": {"model.dbt_testing_example.stg_gym_app__weight": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "model.dbt_testing_example.int_weight_measurements_with_latest_height": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "model.dbt_testing_example.stg_gym_app__height": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}, "model.dbt_testing_example.body_mass_indexes": {"errors": 0, "warnings": 0, "passed": 7, "failures": 0}}, "filters": {"test_results": [{"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.dbt_testing_example.body_mass_indexes", "source.dbt_testing_example.gym_app.raw_height", "source.dbt_testing_example.gym_app.raw_weight"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.dbt_testing_example.stg_gym_app__weight", "model.dbt_testing_example.int_weight_measurements_with_latest_height", "model.dbt_testing_example.stg_gym_app__height"]}], "test_runs": [{"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.dbt_testing_example.body_mass_indexes", "source.dbt_testing_example.gym_app.raw_height", "source.dbt_testing_example.gym_app.raw_weight"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.dbt_testing_example.stg_gym_app__weight", "model.dbt_testing_example.int_weight_measurements_with_latest_height", "model.dbt_testing_example.stg_gym_app__height"]}], "model_runs": [{"name": "success", "display_name": "Successful Runs", "model_unique_ids": ["model.dbt_testing_example.stg_gym_app__weight", "model.dbt_testing_example.body_mass_indexes", "model.dbt_testing_example.int_weight_measurements_with_latest_height", "model.dbt_testing_example.stg_gym_app__height"]}]}, "lineage": {"nodes": [{"id": "model.dbt_testing_example.body_mass_indexes", "type": "model", "sub_type": "table"}, {"id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "type": "model", "sub_type": "table"}, {"id": "model.dbt_testing_example.stg_gym_app__weight", "type": "model", "sub_type": "table"}, {"id": "model.dbt_testing_example.stg_gym_app__height", "type": "model", "sub_type": "table"}, {"id": "source.dbt_testing_example.gym_app.raw_height", "type": "source", "sub_type": null}, {"id": "source.dbt_testing_example.gym_app.raw_weight", "type": "source", "sub_type": null}], "edges": [["model.dbt_testing_example.body_mass_indexes", "model.dbt_testing_example.int_weight_measurements_with_latest_height"], ["model.dbt_testing_example.int_weight_measurements_with_latest_height", "model.dbt_testing_example.stg_gym_app__height"], ["model.dbt_testing_example.int_weight_measurements_with_latest_height", "model.dbt_testing_example.stg_gym_app__weight"], ["model.dbt_testing_example.stg_gym_app__height", "source.dbt_testing_example.gym_app.raw_height"], ["model.dbt_testing_example.stg_gym_app__weight", "source.dbt_testing_example.gym_app.raw_weight"]]}, "invocations": [{"invocation_id": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "detected_at": null, "command": "run", "selected": "", "full_refresh": false, "job_url": "https://github.com/portovep/dbt-testing-examples/actions/runs/8865387834", "job_name": null, "job_id": null, "orchestrator": "github_actions"}], "resources_latest_invocation": {"model.dbt_testing_example.body_mass_indexes": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.dbt_testing_example.int_weight_measurements_with_latest_height": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.dbt_testing_example.stg_gym_app__height": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.dbt_testing_example.stg_gym_app__weight": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.alerts_anomaly_detection": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.alerts_dbt_models": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.alerts_dbt_source_freshness": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.alerts_dbt_tests": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.alerts_schema_changes": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.anomaly_threshold_sensitivity": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.data_monitoring_metrics": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_artifacts_hashes": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_columns": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_exposures": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_invocations": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_metrics": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_models": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_run_results": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_seeds": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_snapshots": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_source_freshness_results": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_sources": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.dbt_tests": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.elementary_test_results": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.enriched_columns": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.information_schema_columns": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.job_run_results": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.metadata": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.metrics_anomaly_score": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.model_run_results": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.monitors_runs": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.schema_columns_snapshot": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.snapshot_run_results": "c448076b-91c1-49d3-9a25-6159e90cdcc6", "model.elementary.test_result_rows": "c448076b-91c1-49d3-9a25-6159e90cdcc6"}, "invocations_job_identification": {}, "env": {"project_name": "dbt_testing_example", "env": "dev", "warehouse_type": "postgres"}, "tracking": {"posthog_api_key": "phc_56XBEzZmh02mGkadqLiYW51eECyYKWPyecVwkGdGUfg", "report_generator_anonymous_user_id": "e5de9f3c-46a8-4d23-b001-81b331110dc3", "anonymous_warehouse_id": "c4ceb8ce71b3c19a1e56d64f17a01cf548ae5aed98172c5a89202c22e5018bb0"}}