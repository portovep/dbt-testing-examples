{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.11", "generated_at": "2024-09-10T05:37:46.155308Z", "invocation_id": "a721b1ca-ffba-49f0-a3b0-d15a4a36c45b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.617905Z", "completed_at": "2024-09-10T05:37:43.659608Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.662498Z", "completed_at": "2024-09-10T05:37:43.662513Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.051766395568847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_testing_example.stg_gym_app__height", "compiled": true, "compiled_code": "with\n\nsource as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n\n),\n\nrenamed as (\n\n    select\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\n        user_id,\n        height,\n        height_unit as measurement_unit\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"neondb\".\"dbt_testing_example\".\"stg_gym_app__height\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.626697Z", "completed_at": "2024-09-10T05:37:43.660223Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.663597Z", "completed_at": "2024-09-10T05:37:43.663604Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05241656303405762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_testing_example.stg_gym_app__weight", "compiled": true, "compiled_code": "with\n\nsource as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n\n),\n\nrenamed as (\n\n    select\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\n        weight,\n        user_id,\n        measurement_unit\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"neondb\".\"dbt_testing_example\".\"stg_gym_app__weight\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.645905Z", "completed_at": "2024-09-10T05:37:43.661904Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.666876Z", "completed_at": "2024-09-10T05:37:43.666886Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05422234535217285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_columns", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as parent_unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as table_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as resource_type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_columns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.630545Z", "completed_at": "2024-09-10T05:37:43.663082Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.668056Z", "completed_at": "2024-09-10T05:37:43.668064Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05655527114868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.data_monitoring_metrics", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n    \n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metric_name\n\n,\n                \n        cast(123456789.99 as float) as metric_value\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as source_value\n\n,\n                cast('2091-02-17' as timestamp) as bucket_start\n\n,\n                cast('2091-02-17' as timestamp) as bucket_end\n\n,\n                \n        cast(123456789 as integer) as bucket_duration_hours\n\n,\n                cast('2091-02-17' as timestamp) as updated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dimension\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dimension_value\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metric_properties\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"data_monitoring_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.675124Z", "completed_at": "2024-09-10T05:37:43.717840Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.751339Z", "completed_at": "2024-09-10T05:37:43.751348Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08317852020263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_exposures", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as maturity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner_email\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as url\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_columns\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as label\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as raw_queries\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.692568Z", "completed_at": "2024-09-10T05:37:43.748980Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.752482Z", "completed_at": "2024-09-10T05:37:43.752492Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0835576057434082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_invocations", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as invocation_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as job_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as job_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as job_run_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as run_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as run_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as command\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dbt_version\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as elementary_version\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as invocation_vars\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as vars\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_database\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_schema\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_profile_name\n\n,\n                \n        cast(123456789 as integer) as threads\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as selected\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as yaml_selector\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as project_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as project_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as env\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as env_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as cause_category\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as cause\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as pull_request_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as git_sha\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as orchestrator\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dbt_user\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as job_url\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as job_run_url\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as account_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as target_adapter_specific_fields\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.718360Z", "completed_at": "2024-09-10T05:37:43.751858Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.756948Z", "completed_at": "2024-09-10T05:37:43.756955Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08510589599609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_metrics", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as label\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as model\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as sql\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as timestamp\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as filters\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as time_grains\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as dimensions\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.733549Z", "completed_at": "2024-09-10T05:37:43.754018Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.758792Z", "completed_at": "2024-09-10T05:37:43.758799Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06962084770202637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_models", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as patch_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.763174Z", "completed_at": "2024-09-10T05:37:43.797371Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.832407Z", "completed_at": "2024-09-10T05:37:43.832424Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07614445686340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_run_results", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as message\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as resource_type\n\n,\n                \n        cast(123456789.99 as float) as execution_time\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_completed_at\n\n,\n                \n        cast(31474836478 as bigint) as rows_affected\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as compiled_code\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as query_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as thread_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as adapter_response\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.781788Z", "completed_at": "2024-09-10T05:37:43.799546Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.835628Z", "completed_at": "2024-09-10T05:37:43.835640Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07805037498474121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_seeds", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_seeds\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.800080Z", "completed_at": "2024-09-10T05:37:43.835093Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.839971Z", "completed_at": "2024-09-10T05:37:43.839979Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.061266422271728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_snapshots", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as patch_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_snapshots\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.810366Z", "completed_at": "2024-09-10T05:37:43.836172Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.841053Z", "completed_at": "2024-09-10T05:37:43.841060Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04723072052001953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_source_freshness_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as source_freshness_execution_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as max_loaded_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as snapshotted_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast(123456789.99 as float) as max_loaded_at_time_ago_in_s\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as warn_after\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as filter\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.844457Z", "completed_at": "2024-09-10T05:37:43.875546Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.908794Z", "completed_at": "2024-09-10T05:37:43.908813Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07722043991088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_sources", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as source_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as identifier\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as loaded_at_field\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as freshness_warn_after\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as freshness_error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as freshness_filter\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as freshness_description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as relation_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as source_description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.865200Z", "completed_at": "2024-09-10T05:37:43.887743Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.917574Z", "completed_at": "2024-09-10T05:37:43.917585Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0772855281829834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_tests", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as short_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as severity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as warn_if\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error_if\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_params\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_namespace\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_owners\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as parent_model_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as quality_dimension\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.888281Z", "completed_at": "2024-09-10T05:37:43.918174Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.923156Z", "completed_at": "2024-09-10T05:37:43.923163Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.061231374740600586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.elementary_test_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_issue_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_sub_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_results_description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owners\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_results_query\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as other\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_params\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as severity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_short_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_alias\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as result_rows\n\n,\n                \n        cast(31474836478 as bigint) as failed_row_count\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.910568Z", "completed_at": "2024-09-10T05:37:43.918718Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.923709Z", "completed_at": "2024-09-10T05:37:43.923716Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04123258590698242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.metadata", "compiled": true, "compiled_code": "\n\nSELECT\n    '0.14.1' as dbt_pkg_version", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"metadata\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.927161Z", "completed_at": "2024-09-10T05:37:43.948629Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.968001Z", "completed_at": "2024-09-10T05:37:43.968017Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.048990488052368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.schema_columns_snapshot", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as column_state_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_type\n\n,\n                \n        cast (True as boolean) as is_new\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"schema_columns_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.940837Z", "completed_at": "2024-09-10T05:37:43.963923Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.971556Z", "completed_at": "2024-09-10T05:37:43.971567Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04957437515258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.elementary.elementary-on-run-end-0", "compiled": true, "compiled_code": "\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.964615Z", "completed_at": "2024-09-10T05:37:43.967393Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.972124Z", "completed_at": "2024-09-10T05:37:43.972136Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027370452880859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_testing_example.raw_height", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.950856Z", "completed_at": "2024-09-10T05:37:43.969910Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:43.975920Z", "completed_at": "2024-09-10T05:37:43.975932Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.031606197357177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.elementary.elementary-on-run-start-0", "compiled": true, "compiled_code": "\n  \n  \n\n  \n  \n\n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.981937Z", "completed_at": "2024-09-10T05:37:43.984881Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:44.100429Z", "completed_at": "2024-09-10T05:37:44.100449Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13537049293518066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_testing_example.raw_weight", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:43.987661Z", "completed_at": "2024-09-10T05:37:44.946879Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:44.947905Z", "completed_at": "2024-09-10T05:37:44.947916Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0640497207641602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:44.102239Z", "completed_at": "2024-09-10T05:37:44.953200Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:44.954202Z", "completed_at": "2024-09-10T05:37:44.954210Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0719003677368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:44.002065Z", "completed_at": "2024-09-10T05:37:44.972470Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:44.974057Z", "completed_at": "2024-09-10T05:37:44.974064Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.09199857711792, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:44.117539Z", "completed_at": "2024-09-10T05:37:44.970908Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:44.971983Z", "completed_at": "2024-09-10T05:37:44.971992Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.958219051361084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MEASUREMENT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.078619Z", "completed_at": "2024-09-10T05:37:45.091063Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.093107Z", "completed_at": "2024-09-10T05:37:45.093120Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018230199813842773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not height > 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.085333Z", "completed_at": "2024-09-10T05:37:45.091649Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.093675Z", "completed_at": "2024-09-10T05:37:45.093684Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018412351608276367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not weight > 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.099499Z", "completed_at": "2024-09-10T05:37:45.111516Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.113541Z", "completed_at": "2024-09-10T05:37:45.113554Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017777681350708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        height_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n    group by height_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cm','inches'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.106034Z", "completed_at": "2024-09-10T05:37:45.112051Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.114129Z", "completed_at": "2024-09-10T05:37:45.114137Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01796579360961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        measurement_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n    group by measurement_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'kg','pounds'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.119966Z", "completed_at": "2024-09-10T05:37:45.136098Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.138150Z", "completed_at": "2024-09-10T05:37:45.138163Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02183365821838379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect height\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere height is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.129584Z", "completed_at": "2024-09-10T05:37:45.136635Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.138693Z", "completed_at": "2024-09-10T05:37:45.138702Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022044897079467773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.144450Z", "completed_at": "2024-09-10T05:37:45.156229Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.158285Z", "completed_at": "2024-09-10T05:37:45.158297Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0174252986907959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.149994Z", "completed_at": "2024-09-10T05:37:45.156817Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.158817Z", "completed_at": "2024-09-10T05:37:45.158824Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017668724060058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect weight\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere weight is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.180095Z", "completed_at": "2024-09-10T05:37:45.202958Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.204144Z", "completed_at": "2024-09-10T05:37:45.204163Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04186272621154785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "compiled": true, "compiled_code": "with\n\nheight as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"stg_gym_app__height\"\n\n),\n\nweight as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"stg_gym_app__weight\"\n\n),\n\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\n\n    select\n        weight.created_date,\n        user_id,\n        weight,\n        (select height\n         from height\n         where  height.created_date < weight.created_date and\n                height.user_id = weight.user_id\n         order by height.created_date DESC\n         limit 1) as height\n    from weight\n)\n\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement", "relation_name": "\"neondb\".\"dbt_testing_example\".\"int_weight_measurements_with_latest_height\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.164746Z", "completed_at": "2024-09-10T05:37:45.212844Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.215919Z", "completed_at": "2024-09-10T05:37:45.215930Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05440974235534668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.stg_gym_app__height_unit_test", "compiled": true, "compiled_code": "\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n\n\nUNION ALL\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.207731Z", "completed_at": "2024-09-10T05:37:45.217402Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.219699Z", "completed_at": "2024-09-10T05:37:45.219709Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014647245407104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.stg_gym_app__weight_unit_test", "compiled": true, "compiled_code": "\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.221595Z", "completed_at": "2024-09-10T05:37:45.240850Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.242048Z", "completed_at": "2024-09-10T05:37:45.242060Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023984432220458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.metrics_anomaly_score", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"data_monitoring_metrics\"\n\n),\n\ntime_window_aggregation as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        updated_at,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_start\n    from data_monitoring_metrics\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        case\n            when training_stddev is null then null\n            when training_stddev = 0 then 0\n            else (metric_value - training_avg) / (training_stddev)\n        end as anomaly_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and bucket_end >= \n    cast(date_trunc('day', \n    current_timestamp::timestamp\n) as timestamp) + cast(-7 as integer) * INTERVAL '1 day'\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        anomaly_score,\n        latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        updated_at,\n        case\n            when abs(anomaly_score) > 3 then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n)\n\nselect * from final", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"metrics_anomaly_score\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.234388Z", "completed_at": "2024-09-10T05:37:45.243633Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.246006Z", "completed_at": "2024-09-10T05:37:45.246016Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014142036437988281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.monitors_runs", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"data_monitoring_metrics\"\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           metric_properties,\n           max(bucket_end) as last_bucket_end,\n           min(bucket_end) as first_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3,4\n\n)\n\nselect * from max_bucket_end", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"monitors_runs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.247877Z", "completed_at": "2024-09-10T05:37:45.259191Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.269042Z", "completed_at": "2024-09-10T05:37:45.269055Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.024644851684570312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.job_run_results", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith jobs as (\n  select\n    job_name,\n    job_id,\n    job_run_id,\n    \nmin(cast(run_started_at as timestamp))\n as job_run_started_at,\n    \nmax(cast(run_completed_at as timestamp))\n as job_run_completed_at,\n    \n    \n        (\n        (\n        (\n        ((\nmax(cast(run_completed_at as timestamp))\n)::date - (\nmin(cast(run_started_at as timestamp))\n)::date)\n     * 24 + date_part('hour', (\nmax(cast(run_completed_at as timestamp))\n)::timestamp) - date_part('hour', (\nmin(cast(run_started_at as timestamp))\n)::timestamp))\n     * 60 + date_part('minute', (\nmax(cast(run_completed_at as timestamp))\n)::timestamp) - date_part('minute', (\nmin(cast(run_started_at as timestamp))\n)::timestamp))\n     * 60 + floor(date_part('second', (\nmax(cast(run_completed_at as timestamp))\n)::timestamp)) - floor(date_part('second', (\nmin(cast(run_started_at as timestamp))\n)::timestamp)))\n    \n as job_run_execution_time\n  from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\"\n  where job_id is not null\n  group by job_name, job_id, job_run_id\n)\n\nselect\n  job_name as name,\n  job_id as id,\n  job_run_id as run_id,\n  job_run_started_at as run_started_at,\n  job_run_completed_at as run_completed_at,\n  job_run_execution_time as run_execution_time\nfrom jobs", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"job_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.259703Z", "completed_at": "2024-09-10T05:37:45.270599Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.272842Z", "completed_at": "2024-09-10T05:37:45.272851Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016155004501342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.model_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\"\n),\n\ndbt_models as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    models.database_name,\n    models.schema_name,\n    coalesce(run_results.materialization, models.materialization) as materialization,\n    models.tags,\n    models.package_name,\n    models.path,\n    models.original_path,\n    models.owner,\n    models.alias,\n    ROW_NUMBER() OVER (PARTITION BY run_results.unique_id ORDER BY run_results.generated_at DESC) AS model_invocation_reverse_index,\n    CASE WHEN FIRST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as timestamp))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_first_invocation_of_the_day,\n    CASE WHEN LAST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as timestamp))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_last_invocation_of_the_day\n    \nFROM dbt_run_results run_results\nJOIN dbt_models models ON run_results.unique_id = models.unique_id", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.274760Z", "completed_at": "2024-09-10T05:37:45.288039Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.291894Z", "completed_at": "2024-09-10T05:37:45.291906Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020567655563354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.snapshot_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\"\n),\n\ndbt_snapshots as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_snapshots\"\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    snapshots.database_name,\n    snapshots.schema_name,\n    coalesce(run_results.materialization, snapshots.materialization) as materialization,\n    snapshots.tags,\n    snapshots.package_name,\n    snapshots.path,\n    snapshots.original_path,\n    snapshots.owner,\n    snapshots.alias\nFROM dbt_run_results run_results\nJOIN dbt_snapshots snapshots ON run_results.unique_id = snapshots.unique_id", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"snapshot_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.282942Z", "completed_at": "2024-09-10T05:37:45.294069Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.296277Z", "completed_at": "2024-09-10T05:37:45.296286Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11876726150512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_source_freshness", "compiled": true, "compiled_code": "\n\nwith results as (\n  select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n),\n\nsources as (\n  select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n)\n\nselect\n  results.source_freshness_execution_id as alert_id,\n  results.max_loaded_at,\n  results.snapshotted_at,\n  cast(results.generated_at as timestamp) as detected_at,\n  results.max_loaded_at_time_ago_in_s,\n  results.status,\n  results.error,\n  results.warn_after,\n  results.error_after,\n  results.filter,\n  sources.unique_id,\n  sources.database_name,\n  sources.schema_name,\n  sources.source_name,\n  sources.identifier,\n  sources.tags,\n  sources.meta,\n  sources.owner,\n  sources.package_name,\n  sources.path,\n  -- These columns below are deprecated. We add them since this view\n  -- was used to be loaded into an incremental model with those columns, their names were later changed\n  -- and Databricks doesn't respect `on_schema_change = 'append_new_columns'` properly, as described here -\n  -- https://docs.databricks.com/en/delta/update-schema.html#automatic-schema-evolution-for-delta-lake-merge\n  results.error_after as freshness_error_after,\n  results.warn_after as freshness_warn_after,\n  results.filter as freshness_filter\nfrom results\njoin sources on results.unique_id = sources.unique_id\nwhere True and lower(status) != 'pass'", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"alerts_dbt_source_freshness\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.407666Z", "completed_at": "2024-09-10T05:37:45.418084Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.419069Z", "completed_at": "2024-09-10T05:37:45.419081Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014002084732055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_artifacts_hashes", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n  'dbt_models' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n union all \n\nselect\n  'dbt_tests' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n union all \n\nselect\n  'dbt_sources' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n union all \n\nselect\n  'dbt_snapshots' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_snapshots\"\n union all \n\nselect\n  'dbt_metrics' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_metrics\"\n union all \n\nselect\n  'dbt_exposures' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n union all \n\nselect\n  'dbt_seeds' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_seeds\"\n union all \n\nselect\n  'dbt_columns' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_columns\"\n\n\norder by metadata_hash", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_artifacts_hashes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.422154Z", "completed_at": "2024-09-10T05:37:45.430030Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.430993Z", "completed_at": "2024-09-10T05:37:45.431001Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010686159133911133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_anomaly_detection", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n),\n\nalerts_anomaly_detection as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'anomaly_detection'\n)\n\nselect * from alerts_anomaly_detection", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"alerts_anomaly_detection\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.433993Z", "completed_at": "2024-09-10T05:37:45.442563Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.443516Z", "completed_at": "2024-09-10T05:37:45.443524Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011412620544433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_tests", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n),\n\nalerts_dbt_tests as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'   and lower(status) != 'skipped'  and test_type = 'dbt_test'\n)\n\nselect * from alerts_dbt_tests", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"alerts_dbt_tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.446459Z", "completed_at": "2024-09-10T05:37:45.453706Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.454663Z", "completed_at": "2024-09-10T05:37:45.454671Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010066986083984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_schema_changes", "compiled": true, "compiled_code": "\n\n\nwith elementary_test_results as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n),\n\nalerts_schema_changes as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'schema_change'\n)\n\nselect * from alerts_schema_changes", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"alerts_schema_changes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.457634Z", "completed_at": "2024-09-10T05:37:45.467559Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.468526Z", "completed_at": "2024-09-10T05:37:45.468535Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012727975845336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.test_result_rows", "compiled": true, "compiled_code": "\n\n-- depends_on: \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as elementary_test_results_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as result_row\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.471509Z", "completed_at": "2024-09-10T05:37:45.476966Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.477931Z", "completed_at": "2024-09-10T05:37:45.477938Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008198261260986328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_testing_example.body_mass_indexes", "compiled": true, "compiled_code": "with\n\nweights_with_latest_height as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"int_weight_measurements_with_latest_height\"\n\n),\n\nbody_mass_indexes as (\n\n    select\n        created_date,\n        user_id,\n        weight,\n        height,\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\n        current_timestamp as processed_at\n    from weights_with_latest_height\n)\n\nselect * from body_mass_indexes", "relation_name": "\"neondb\".\"dbt_testing_example\".\"body_mass_indexes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.481031Z", "completed_at": "2024-09-10T05:37:45.490157Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.491118Z", "completed_at": "2024-09-10T05:37:45.491125Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012062311172485352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test", "compiled": true, "compiled_code": "\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n\n\nUNION ALL\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.494111Z", "completed_at": "2024-09-10T05:37:45.501879Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.502835Z", "completed_at": "2024-09-10T05:37:45.502842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01056528091430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.anomaly_threshold_sensitivity", "compiled": true, "compiled_code": "\n\nwith metrics_anomaly_score as (\n\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"metrics_anomaly_score\"\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        training_stddev as metric_stddev,\n        anomaly_score,\n        case when abs(anomaly_score) >= 1.5 then true else false end as \"is_anomaly_1_5\",\n        case when abs(anomaly_score) >= 2 then true else false end as \"is_anomaly_2\",\n        case when abs(anomaly_score) >= 2.5 then true else false end as \"is_anomaly_2_5\",\n        case when abs(anomaly_score) >= 3 then true else false end as \"is_anomaly_3\",\n        case when abs(anomaly_score) >= 3.5 then true else false end as \"is_anomaly_3_5\",\n        case when abs(anomaly_score) >= 4 then true else false end as \"is_anomaly_4\",\n        case when abs(anomaly_score) >= 4.5 then true else false end as \"is_anomaly_4_5\"\n    from metrics_anomaly_score\n    where abs(anomaly_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"anomaly_threshold_sensitivity\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.505737Z", "completed_at": "2024-09-10T05:37:45.513533Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.514497Z", "completed_at": "2024-09-10T05:37:45.514504Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010540962219238281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_models", "compiled": true, "compiled_code": "\n\nwith error_models as (\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias \n    from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n  \n    union all\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias  \n  from \"neondb\".\"dbt_testing_example_elementary\".\"snapshot_run_results\"\n)\n\n\nselect model_execution_id as alert_id,\n       unique_id,\n       cast(generated_at as timestamp) as detected_at,\n       database_name,\n       materialization,\n       path,\n       original_path,\n       schema_name,\n       message,\n       owner as owners,\n       tags,\n       alias,\n       status,\n       full_refresh\nfrom error_models\nwhere True and lower(status) != 'success'and lower(status) != 'skipped'", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"alerts_dbt_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.517460Z", "completed_at": "2024-09-10T05:37:45.524618Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.525575Z", "completed_at": "2024-09-10T05:37:45.525582Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00992131233215332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.body_mass_indexes_component_test", "compiled": true, "compiled_code": "\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.528531Z", "completed_at": "2024-09-10T05:37:45.535875Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.536813Z", "completed_at": "2024-09-10T05:37:45.536820Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010055780410766602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.body_mass_indexes_unit_test", "compiled": true, "compiled_code": "\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.539723Z", "completed_at": "2024-09-10T05:37:45.545387Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.546370Z", "completed_at": "2024-09-10T05:37:45.546377Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008428573608398438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "compiled": true, "compiled_code": "\n  \n  \n    \n\n        \n        \n    with nothing as (select 1 as num)\n    select * from nothing where num = 2\n\n\n    \n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.549291Z", "completed_at": "2024-09-10T05:37:45.555613Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.556559Z", "completed_at": "2024-09-10T05:37:45.556566Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009100198745727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a", "compiled": true, "compiled_code": "\n    \n\n        \n        \n    with nothing as (select 1 as num)\n    select * from nothing where num = 2\n\n\n    \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.559485Z", "completed_at": "2024-09-10T05:37:45.564760Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.565717Z", "completed_at": "2024-09-10T05:37:45.565724Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007994651794433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103", "compiled": true, "compiled_code": "\n  \n\n  \n    \n\n        \n        \n    with nothing as (select 1 as num)\n    select * from nothing where num = 2\n\n\n    \n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.568623Z", "completed_at": "2024-09-10T05:37:45.574759Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.575697Z", "completed_at": "2024-09-10T05:37:45.575704Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008873701095581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.578639Z", "completed_at": "2024-09-10T05:37:45.585663Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.586624Z", "completed_at": "2024-09-10T05:37:45.586631Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01001429557800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.046892Z", "completed_at": "2024-09-10T05:37:45.891483Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.892478Z", "completed_at": "2024-09-10T05:37:45.892489Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9388206005096436, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.061839Z", "completed_at": "2024-09-10T05:37:45.903338Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:45.904294Z", "completed_at": "2024-09-10T05:37:45.904301Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9352467060089111, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'WEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:45.296808Z", "completed_at": "2024-09-10T05:37:46.138657Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:46.139641Z", "completed_at": "2024-09-10T05:37:46.139653Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8464028835296631, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.information_schema_columns", "compiled": true, "compiled_code": "\n\n    \n  \n    \n  \n\n  with dbt_models_data as (\n      select\n          database_name,\n          schema_name,\n          alias as table_name\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n  ),\n\n  dbt_snapshots_data as (\n      select\n          database_name,\n          schema_name,\n          alias as table_name\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_snapshots\"\n  ),\n\n  dbt_sources_data as (\n      select\n          database_name,\n          schema_name,\n          name as table_name\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n  ),\n\n  dbt_seeds_data as (\n      select\n          database_name,\n          schema_name,\n          name as table_name\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_seeds\"\n  ),\n\n  tables_information as (\n      select * from dbt_models_data\n      union all\n      select * from dbt_sources_data\n      union all\n      select * from dbt_snapshots_data\n      union all\n      select * from dbt_seeds_data\n  ),\n\n  columns_information as (\n      \n    \n    \n    \n        (\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from information_schema.columns\n    where upper(table_schema) = upper('dbt_testing_example')\n    \n)\n        \n    \n\n\n\n  ),\n\n  information_schema_columns as (\n      select col_info.*\n      from tables_information tbl_info\n      join columns_information col_info\n          on (lower(tbl_info.database_name) = lower(col_info.database_name) and\n              lower(tbl_info.schema_name) = lower(col_info.schema_name) and\n              lower(tbl_info.table_name) = lower(col_info.table_name)\n          )\n  )\n\n  select *\n  from information_schema_columns\n\n", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"information_schema_columns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-10T05:37:46.143736Z", "completed_at": "2024-09-10T05:37:46.150337Z"}, {"name": "execute", "started_at": "2024-09-10T05:37:46.151262Z", "completed_at": "2024-09-10T05:37:46.151269Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009346961975097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.enriched_columns", "compiled": true, "compiled_code": "\n\n\nwith information_schema_columns as (\n    select\n        lower(database_name) as database_name,\n        lower(schema_name) as schema_name,\n        lower(table_name) as table_name,\n        lower(column_name) as name,\n        data_type\n    from \"neondb\".\"dbt_testing_example_elementary\".\"information_schema_columns\"\n),\n\ndbt_columns as (\n    select\n        lower(database_name) as database_name,\n        lower(schema_name) as schema_name,\n        lower(table_name) as table_name,\n        lower(name) as name,\n        description\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_columns\"\n)\n\nselect\n    database_name,\n    schema_name,\n    table_name,\n    name,\n    data_type,\n    description\nfrom information_schema_columns\nleft join dbt_columns using (database_name, schema_name, table_name, name)", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"enriched_columns\""}], "elapsed_time": 4.571996688842773, "args": {"invocation_command": "dbt docs generate --target-path docs --target test", "version_check": true, "target_path": "docs", "print": true, "partial_parse_file_diff": true, "defer": false, "log_path": "/__w/dbt-testing-examples/dbt-testing-examples/logs", "compile": true, "write_json": true, "target": "test", "vars": {}, "quiet": false, "introspect": true, "project_dir": "/__w/dbt-testing-examples/dbt-testing-examples", "log_level": "info", "exclude": [], "populate_cache": true, "empty_catalog": false, "profiles_dir": "/__w/dbt-testing-examples/dbt-testing-examples", "favor_state": false, "macro_debugging": false, "log_level_file": "debug", "show_resource_report": false, "indirect_selection": "eager", "send_anonymous_usage_stats": true, "warn_error_options": {"include": [], "exclude": []}, "use_colors": true, "select": [], "which": "generate", "printer_width": 80, "static": false, "static_parser": true, "log_file_max_bytes": 10485760, "strict_mode": false, "cache_selected_only": false, "log_format": "default", "log_format_file": "debug", "partial_parse": true, "enable_legacy_logger": false, "use_colors_file": true}}