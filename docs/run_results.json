{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.11", "generated_at": "2025-03-16T05:37:05.457269Z", "invocation_id": "1feaea7e-a7fe-4a98-af64-5128d13ab387", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:02.949996Z", "completed_at": "2025-03-16T05:37:02.992291Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:02.996564Z", "completed_at": "2025-03-16T05:37:02.996578Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05838608741760254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_testing_example.stg_gym_app__weight", "compiled": true, "compiled_code": "with\n\nsource as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n\n),\n\nrenamed as (\n\n    select\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\n        weight,\n        user_id,\n        measurement_unit\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"neondb\".\"dbt_testing_example\".\"stg_gym_app__weight\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:02.977871Z", "completed_at": "2025-03-16T05:37:02.992882Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:02.997128Z", "completed_at": "2025-03-16T05:37:02.997137Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05782270431518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_columns", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as parent_unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as table_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as resource_type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_columns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:02.961936Z", "completed_at": "2025-03-16T05:37:02.993419Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:02.997666Z", "completed_at": "2025-03-16T05:37:02.997673Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.059552907943725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.data_monitoring_metrics", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n    \n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metric_name\n\n,\n                \n        cast(123456789.99 as float) as metric_value\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as source_value\n\n,\n                cast('2091-02-17' as timestamp) as bucket_start\n\n,\n                cast('2091-02-17' as timestamp) as bucket_end\n\n,\n                \n        cast(123456789 as integer) as bucket_duration_hours\n\n,\n                cast('2091-02-17' as timestamp) as updated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dimension\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dimension_value\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metric_properties\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"data_monitoring_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:02.944871Z", "completed_at": "2025-03-16T05:37:02.994047Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:02.998232Z", "completed_at": "2025-03-16T05:37:02.998240Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06186318397521973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_testing_example.stg_gym_app__height", "compiled": true, "compiled_code": "with\n\nsource as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n\n),\n\nrenamed as (\n\n    select\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\n        user_id,\n        height,\n        height_unit as measurement_unit\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"neondb\".\"dbt_testing_example\".\"stg_gym_app__height\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.009662Z", "completed_at": "2025-03-16T05:37:03.083948Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.087834Z", "completed_at": "2025-03-16T05:37:03.087843Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0852351188659668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_exposures", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as maturity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner_email\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as url\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_columns\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as label\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as raw_queries\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.025031Z", "completed_at": "2025-03-16T05:37:03.084517Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.088884Z", "completed_at": "2025-03-16T05:37:03.088891Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08599710464477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_invocations", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as invocation_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as job_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as job_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as job_run_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as run_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as run_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as command\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dbt_version\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as elementary_version\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as invocation_vars\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as vars\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_database\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_schema\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_profile_name\n\n,\n                \n        cast(123456789 as integer) as threads\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as selected\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as yaml_selector\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as project_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as project_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as env\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as env_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as cause_category\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as cause\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as pull_request_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as git_sha\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as orchestrator\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dbt_user\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as job_url\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as job_run_url\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as account_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as target_adapter_specific_fields\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.042158Z", "completed_at": "2025-03-16T05:37:03.085119Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.089444Z", "completed_at": "2025-03-16T05:37:03.089453Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.08626937866210938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_metrics", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as label\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as model\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as sql\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as timestamp\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as filters\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as time_grains\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as dimensions\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.067101Z", "completed_at": "2025-03-16T05:37:03.086248Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.090971Z", "completed_at": "2025-03-16T05:37:03.090980Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08715415000915527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_models", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as patch_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.119068Z", "completed_at": "2025-03-16T05:37:03.164218Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.167228Z", "completed_at": "2025-03-16T05:37:03.167237Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0723421573638916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_seeds", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_seeds\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.132882Z", "completed_at": "2025-03-16T05:37:03.164966Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.168910Z", "completed_at": "2025-03-16T05:37:03.168917Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0737311840057373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_snapshots", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as patch_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_snapshots\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.101510Z", "completed_at": "2025-03-16T05:37:03.166059Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.171013Z", "completed_at": "2025-03-16T05:37:03.171023Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07779455184936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_run_results", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as message\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as resource_type\n\n,\n                \n        cast(123456789.99 as float) as execution_time\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_completed_at\n\n,\n                \n        cast(31474836478 as bigint) as rows_affected\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as compiled_code\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as query_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as thread_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as adapter_response\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.148225Z", "completed_at": "2025-03-16T05:37:03.167851Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.173122Z", "completed_at": "2025-03-16T05:37:03.173130Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0763387680053711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_source_freshness_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as source_freshness_execution_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as max_loaded_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as snapshotted_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast(123456789.99 as float) as max_loaded_at_time_ago_in_s\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as warn_after\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as filter\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.180537Z", "completed_at": "2025-03-16T05:37:03.238564Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.246526Z", "completed_at": "2025-03-16T05:37:03.246535Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07370996475219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_sources", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as source_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as identifier\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as loaded_at_field\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as freshness_warn_after\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as freshness_error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as freshness_filter\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as freshness_description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as relation_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as source_description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.198942Z", "completed_at": "2025-03-16T05:37:03.244072Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.248176Z", "completed_at": "2025-03-16T05:37:03.248182Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07336020469665527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_tests", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as short_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as severity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as warn_if\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error_if\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_params\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_namespace\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_owners\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as parent_model_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as quality_dimension\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.218541Z", "completed_at": "2025-03-16T05:37:03.245336Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.249606Z", "completed_at": "2025-03-16T05:37:03.249612Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07304549217224121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.elementary_test_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_issue_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_sub_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_results_description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owners\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_results_query\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as other\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_params\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as severity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_short_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_alias\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as result_rows\n\n,\n                \n        cast(31474836478 as bigint) as failed_row_count\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.239260Z", "completed_at": "2025-03-16T05:37:03.247603Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.253158Z", "completed_at": "2025-03-16T05:37:03.253165Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05991792678833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.metadata", "compiled": true, "compiled_code": "\n\nSELECT\n    '0.14.1' as dbt_pkg_version", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"metadata\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.259562Z", "completed_at": "2025-03-16T05:37:03.349457Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.355527Z", "completed_at": "2025-03-16T05:37:03.355537Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.10362672805786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.schema_columns_snapshot", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as column_state_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_type\n\n,\n                \n        cast (True as boolean) as is_new\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"schema_columns_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.350216Z", "completed_at": "2025-03-16T05:37:03.352657Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.357040Z", "completed_at": "2025-03-16T05:37:03.357049Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08879208564758301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_testing_example.raw_height", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.271796Z", "completed_at": "2025-03-16T05:37:03.353890Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.358540Z", "completed_at": "2025-03-16T05:37:03.358548Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10475683212280273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.elementary.elementary-on-run-end-0", "compiled": true, "compiled_code": "\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.277295Z", "completed_at": "2025-03-16T05:37:03.354500Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.359110Z", "completed_at": "2025-03-16T05:37:03.359116Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.10447883605957031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.elementary.elementary-on-run-start-0", "compiled": true, "compiled_code": "\n  \n  \n\n  \n  \n\n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.368517Z", "completed_at": "2025-03-16T05:37:03.370863Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:03.403932Z", "completed_at": "2025-03-16T05:37:03.403942Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04259991645812988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_testing_example.raw_weight", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.394858Z", "completed_at": "2025-03-16T05:37:04.272222Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.273893Z", "completed_at": "2025-03-16T05:37:04.273906Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0012438297271729, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.386461Z", "completed_at": "2025-03-16T05:37:04.273321Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.275424Z", "completed_at": "2025-03-16T05:37:04.275431Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0047204494476318, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.372568Z", "completed_at": "2025-03-16T05:37:04.289335Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.290482Z", "completed_at": "2025-03-16T05:37:04.290490Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0297374725341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:03.410997Z", "completed_at": "2025-03-16T05:37:04.291526Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.292597Z", "completed_at": "2025-03-16T05:37:04.292602Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9873058795928955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MEASUREMENT_UNIT'\n            and\n            relation_column_type not in ('TEXT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.401439Z", "completed_at": "2025-03-16T05:37:04.412626Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.414346Z", "completed_at": "2025-03-16T05:37:04.414354Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016666173934936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not height > 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.407225Z", "completed_at": "2025-03-16T05:37:04.413829Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.416266Z", "completed_at": "2025-03-16T05:37:04.416273Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017776012420654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not weight > 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.420721Z", "completed_at": "2025-03-16T05:37:04.432222Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.433306Z", "completed_at": "2025-03-16T05:37:04.433312Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015789508819580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        height_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n    group by height_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cm','inches'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.427034Z", "completed_at": "2025-03-16T05:37:04.434744Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.436996Z", "completed_at": "2025-03-16T05:37:04.437002Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01820969581604004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        measurement_unit as value_field,\n        count(*) as n_records\n\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n    group by measurement_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'kg','pounds'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.438929Z", "completed_at": "2025-03-16T05:37:04.455371Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.457225Z", "completed_at": "2025-03-16T05:37:04.457232Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0217130184173584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect height\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere height is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.450276Z", "completed_at": "2025-03-16T05:37:04.459904Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.466494Z", "completed_at": "2025-03-16T05:37:04.466502Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018474817276000977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_height\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.461523Z", "completed_at": "2025-03-16T05:37:04.468225Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.470619Z", "completed_at": "2025-03-16T05:37:04.470625Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012675285339355469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.472536Z", "completed_at": "2025-03-16T05:37:04.490038Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.502820Z", "completed_at": "2025-03-16T05:37:04.502828Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0339512825012207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect weight\nfrom \"neondb\".\"dbt_testing_example\".\"raw_weight\"\nwhere weight is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.479833Z", "completed_at": "2025-03-16T05:37:04.516983Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.518075Z", "completed_at": "2025-03-16T05:37:04.518082Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04014992713928223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.stg_gym_app__weight_unit_test", "compiled": true, "compiled_code": "\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.506209Z", "completed_at": "2025-03-16T05:37:04.519511Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.521792Z", "completed_at": "2025-03-16T05:37:04.521799Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017933368682861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.metrics_anomaly_score", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"data_monitoring_metrics\"\n\n),\n\ntime_window_aggregation as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        updated_at,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_start\n    from data_monitoring_metrics\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        case\n            when training_stddev is null then null\n            when training_stddev = 0 then 0\n            else (metric_value - training_avg) / (training_stddev)\n        end as anomaly_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and bucket_end >= \n    cast(date_trunc('day', \n    current_timestamp::timestamp\n) as timestamp) + cast(-7 as integer) * INTERVAL '1 day'\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        anomaly_score,\n        latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        updated_at,\n        case\n            when abs(anomaly_score) > 3 then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n)\n\nselect * from final", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"metrics_anomaly_score\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.523661Z", "completed_at": "2025-03-16T05:37:04.534721Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.535984Z", "completed_at": "2025-03-16T05:37:04.535991Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015655994415283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.monitors_runs", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"data_monitoring_metrics\"\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           metric_properties,\n           max(bucket_end) as last_bucket_end,\n           min(bucket_end) as first_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3,4\n\n)\n\nselect * from max_bucket_end", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"monitors_runs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.530462Z", "completed_at": "2025-03-16T05:37:04.539032Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.614320Z", "completed_at": "2025-03-16T05:37:04.614331Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08609986305236816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_testing_example.int_weight_measurements_with_latest_height", "compiled": true, "compiled_code": "with\n\nheight as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"stg_gym_app__height\"\n\n),\n\nweight as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"stg_gym_app__weight\"\n\n),\n\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\n\n    select\n        weight.created_date,\n        user_id,\n        weight,\n        (select height\n         from height\n         where  height.created_date < weight.created_date and\n                height.user_id = weight.user_id\n         order by height.created_date DESC\n         limit 1) as height\n    from weight\n)\n\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement", "relation_name": "\"neondb\".\"dbt_testing_example\".\"int_weight_measurements_with_latest_height\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.539633Z", "completed_at": "2025-03-16T05:37:04.616559Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.619026Z", "completed_at": "2025-03-16T05:37:04.619033Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09093427658081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.stg_gym_app__height_unit_test", "compiled": true, "compiled_code": "\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n\n\nUNION ALL\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.619556Z", "completed_at": "2025-03-16T05:37:04.631020Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.640764Z", "completed_at": "2025-03-16T05:37:04.640773Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.024550437927246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.job_run_results", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith jobs as (\n  select\n    job_name,\n    job_id,\n    job_run_id,\n    \nmin(cast(run_started_at as timestamp))\n as job_run_started_at,\n    \nmax(cast(run_completed_at as timestamp))\n as job_run_completed_at,\n    \n    \n        (\n        (\n        (\n        ((\nmax(cast(run_completed_at as timestamp))\n)::date - (\nmin(cast(run_started_at as timestamp))\n)::date)\n     * 24 + date_part('hour', (\nmax(cast(run_completed_at as timestamp))\n)::timestamp) - date_part('hour', (\nmin(cast(run_started_at as timestamp))\n)::timestamp))\n     * 60 + date_part('minute', (\nmax(cast(run_completed_at as timestamp))\n)::timestamp) - date_part('minute', (\nmin(cast(run_started_at as timestamp))\n)::timestamp))\n     * 60 + floor(date_part('second', (\nmax(cast(run_completed_at as timestamp))\n)::timestamp)) - floor(date_part('second', (\nmin(cast(run_started_at as timestamp))\n)::timestamp)))\n    \n as job_run_execution_time\n  from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\"\n  where job_id is not null\n  group by job_name, job_id, job_run_id\n)\n\nselect\n  job_name as name,\n  job_id as id,\n  job_run_id as run_id,\n  job_run_started_at as run_started_at,\n  job_run_completed_at as run_completed_at,\n  job_run_execution_time as run_execution_time\nfrom jobs", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"job_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.632510Z", "completed_at": "2025-03-16T05:37:04.642409Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.644686Z", "completed_at": "2025-03-16T05:37:04.644711Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015618324279785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.model_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\"\n),\n\ndbt_models as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    models.database_name,\n    models.schema_name,\n    coalesce(run_results.materialization, models.materialization) as materialization,\n    models.tags,\n    models.package_name,\n    models.path,\n    models.original_path,\n    models.owner,\n    models.alias,\n    ROW_NUMBER() OVER (PARTITION BY run_results.unique_id ORDER BY run_results.generated_at DESC) AS model_invocation_reverse_index,\n    CASE WHEN FIRST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as timestamp))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_first_invocation_of_the_day,\n    CASE WHEN LAST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as timestamp))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_last_invocation_of_the_day\n    \nFROM dbt_run_results run_results\nJOIN dbt_models models ON run_results.unique_id = models.unique_id", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.646571Z", "completed_at": "2025-03-16T05:37:04.659040Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.662477Z", "completed_at": "2025-03-16T05:37:04.662486Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019283294677734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.snapshot_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\"\n),\n\ndbt_snapshots as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_snapshots\"\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    snapshots.database_name,\n    snapshots.schema_name,\n    coalesce(run_results.materialization, snapshots.materialization) as materialization,\n    snapshots.tags,\n    snapshots.package_name,\n    snapshots.path,\n    snapshots.original_path,\n    snapshots.owner,\n    snapshots.alias\nFROM dbt_run_results run_results\nJOIN dbt_snapshots snapshots ON run_results.unique_id = snapshots.unique_id", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"snapshot_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.653950Z", "completed_at": "2025-03-16T05:37:04.663997Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.666341Z", "completed_at": "2025-03-16T05:37:04.666347Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014791250228881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_source_freshness", "compiled": true, "compiled_code": "\n\nwith results as (\n  select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n),\n\nsources as (\n  select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n)\n\nselect\n  results.source_freshness_execution_id as alert_id,\n  results.max_loaded_at,\n  results.snapshotted_at,\n  cast(results.generated_at as timestamp) as detected_at,\n  results.max_loaded_at_time_ago_in_s,\n  results.status,\n  results.error,\n  results.warn_after,\n  results.error_after,\n  results.filter,\n  sources.unique_id,\n  sources.database_name,\n  sources.schema_name,\n  sources.source_name,\n  sources.identifier,\n  sources.tags,\n  sources.meta,\n  sources.owner,\n  sources.package_name,\n  sources.path,\n  -- These columns below are deprecated. We add them since this view\n  -- was used to be loaded into an incremental model with those columns, their names were later changed\n  -- and Databricks doesn't respect `on_schema_change = 'append_new_columns'` properly, as described here -\n  -- https://docs.databricks.com/en/delta/update-schema.html#automatic-schema-evolution-for-delta-lake-merge\n  results.error_after as freshness_error_after,\n  results.warn_after as freshness_warn_after,\n  results.filter as freshness_filter\nfrom results\njoin sources on results.unique_id = sources.unique_id\nwhere True and lower(status) != 'pass'", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"alerts_dbt_source_freshness\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.690711Z", "completed_at": "2025-03-16T05:37:04.700308Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.701287Z", "completed_at": "2025-03-16T05:37:04.701294Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013134241104125977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_artifacts_hashes", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n  'dbt_models' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n union all \n\nselect\n  'dbt_tests' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n union all \n\nselect\n  'dbt_sources' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n union all \n\nselect\n  'dbt_snapshots' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_snapshots\"\n union all \n\nselect\n  'dbt_metrics' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_metrics\"\n union all \n\nselect\n  'dbt_exposures' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n union all \n\nselect\n  'dbt_seeds' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_seeds\"\n union all \n\nselect\n  'dbt_columns' as artifacts_model,\n   metadata_hash\nfrom \"neondb\".\"dbt_testing_example_elementary\".\"dbt_columns\"\n\n\norder by metadata_hash", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"dbt_artifacts_hashes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.704297Z", "completed_at": "2025-03-16T05:37:04.711656Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.712629Z", "completed_at": "2025-03-16T05:37:04.712635Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010178089141845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_anomaly_detection", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n),\n\nalerts_anomaly_detection as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'anomaly_detection'\n)\n\nselect * from alerts_anomaly_detection", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"alerts_anomaly_detection\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.715628Z", "completed_at": "2025-03-16T05:37:04.723081Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.724064Z", "completed_at": "2025-03-16T05:37:04.724070Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01026010513305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_tests", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n),\n\nalerts_dbt_tests as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'   and lower(status) != 'skipped'  and test_type = 'dbt_test'\n)\n\nselect * from alerts_dbt_tests", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"alerts_dbt_tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.727029Z", "completed_at": "2025-03-16T05:37:04.735178Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.736134Z", "completed_at": "2025-03-16T05:37:04.736141Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010930776596069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_schema_changes", "compiled": true, "compiled_code": "\n\n\nwith elementary_test_results as (\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n),\n\nalerts_schema_changes as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'schema_change'\n)\n\nselect * from alerts_schema_changes", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"alerts_schema_changes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.739101Z", "completed_at": "2025-03-16T05:37:04.748984Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.749974Z", "completed_at": "2025-03-16T05:37:04.749980Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01271820068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.test_result_rows", "compiled": true, "compiled_code": "\n\n-- depends_on: \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as elementary_test_results_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as result_row\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.752939Z", "completed_at": "2025-03-16T05:37:04.760631Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.761651Z", "completed_at": "2025-03-16T05:37:04.761658Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01056671142578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.anomaly_threshold_sensitivity", "compiled": true, "compiled_code": "\n\nwith metrics_anomaly_score as (\n\n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"metrics_anomaly_score\"\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        training_stddev as metric_stddev,\n        anomaly_score,\n        case when abs(anomaly_score) >= 1.5 then true else false end as \"is_anomaly_1_5\",\n        case when abs(anomaly_score) >= 2 then true else false end as \"is_anomaly_2\",\n        case when abs(anomaly_score) >= 2.5 then true else false end as \"is_anomaly_2_5\",\n        case when abs(anomaly_score) >= 3 then true else false end as \"is_anomaly_3\",\n        case when abs(anomaly_score) >= 3.5 then true else false end as \"is_anomaly_3_5\",\n        case when abs(anomaly_score) >= 4 then true else false end as \"is_anomaly_4\",\n        case when abs(anomaly_score) >= 4.5 then true else false end as \"is_anomaly_4_5\"\n    from metrics_anomaly_score\n    where abs(anomaly_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"anomaly_threshold_sensitivity\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.764658Z", "completed_at": "2025-03-16T05:37:04.768969Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.769931Z", "completed_at": "2025-03-16T05:37:04.769937Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007065534591674805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_testing_example.body_mass_indexes", "compiled": true, "compiled_code": "with\n\nweights_with_latest_height as (\n\n    select * from \"neondb\".\"dbt_testing_example\".\"int_weight_measurements_with_latest_height\"\n\n),\n\nbody_mass_indexes as (\n\n    select\n        created_date,\n        user_id,\n        weight,\n        height,\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\n        current_timestamp as processed_at\n    from weights_with_latest_height\n)\n\nselect * from body_mass_indexes", "relation_name": "\"neondb\".\"dbt_testing_example\".\"body_mass_indexes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.773168Z", "completed_at": "2025-03-16T05:37:04.783081Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.784088Z", "completed_at": "2025-03-16T05:37:04.784094Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013011455535888672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test", "compiled": true, "compiled_code": "\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n\n\nUNION ALL\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.787228Z", "completed_at": "2025-03-16T05:37:04.795043Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.796027Z", "completed_at": "2025-03-16T05:37:04.796033Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010646820068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_models", "compiled": true, "compiled_code": "\n\nwith error_models as (\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias \n    from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n  \n    union all\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias  \n  from \"neondb\".\"dbt_testing_example_elementary\".\"snapshot_run_results\"\n)\n\n\nselect model_execution_id as alert_id,\n       unique_id,\n       cast(generated_at as timestamp) as detected_at,\n       database_name,\n       materialization,\n       path,\n       original_path,\n       schema_name,\n       message,\n       owner as owners,\n       tags,\n       alias,\n       status,\n       full_refresh\nfrom error_models\nwhere True and lower(status) != 'success'and lower(status) != 'skipped'", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"alerts_dbt_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.799052Z", "completed_at": "2025-03-16T05:37:04.806190Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.807183Z", "completed_at": "2025-03-16T05:37:04.807190Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010026693344116211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.body_mass_indexes_component_test", "compiled": true, "compiled_code": "\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.810185Z", "completed_at": "2025-03-16T05:37:04.817130Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.818122Z", "completed_at": "2025-03-16T05:37:04.818129Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009804248809814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.body_mass_indexes_unit_test", "compiled": true, "compiled_code": "\n\n\n  \n  \n\n\n  \n    \n      select * from (select 1) as t where 1 = 0\n    \n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.821086Z", "completed_at": "2025-03-16T05:37:04.826675Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.827671Z", "completed_at": "2025-03-16T05:37:04.827678Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008443117141723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299", "compiled": true, "compiled_code": "\n  \n  \n    \n\n        \n        \n    with nothing as (select 1 as num)\n    select * from nothing where num = 2\n\n\n    \n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.830681Z", "completed_at": "2025-03-16T05:37:04.836637Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.837606Z", "completed_at": "2025-03-16T05:37:04.837612Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00888514518737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a", "compiled": true, "compiled_code": "\n    \n\n        \n        \n    with nothing as (select 1 as num)\n    select * from nothing where num = 2\n\n\n    \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.840717Z", "completed_at": "2025-03-16T05:37:04.846053Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.847025Z", "completed_at": "2025-03-16T05:37:04.847032Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008208513259887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103", "compiled": true, "compiled_code": "\n  \n\n  \n    \n\n        \n        \n    with nothing as (select 1 as num)\n    select * from nothing where num = 2\n\n\n    \n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.850009Z", "completed_at": "2025-03-16T05:37:04.856213Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.857375Z", "completed_at": "2025-03-16T05:37:04.857382Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009572029113769531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_height\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.860961Z", "completed_at": "2025-03-16T05:37:04.868069Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:04.869053Z", "completed_at": "2025-03-16T05:37:04.869066Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009953022003173828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select user_id as from_field\n    from \"neondb\".\"dbt_testing_example\".\"body_mass_indexes\"\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from \"neondb\".\"dbt_testing_example\".\"raw_weight\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.373162Z", "completed_at": "2025-03-16T05:37:05.266525Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:05.268260Z", "completed_at": "2025-03-16T05:37:05.268270Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9934697151184082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('INTEGER')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.384941Z", "completed_at": "2025-03-16T05:37:05.267663Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:05.269810Z", "completed_at": "2025-03-16T05:37:05.269817Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.982166051864624, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WEIGHT' as TEXT) as relation_column,\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'WEIGHT'\n            and\n            relation_column_type not in ('DOUBLE PRECISION')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:04.668262Z", "completed_at": "2025-03-16T05:37:05.440705Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:05.441647Z", "completed_at": "2025-03-16T05:37:05.441653Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.777235746383667, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.information_schema_columns", "compiled": true, "compiled_code": "\n\n    \n  \n    \n  \n\n  with dbt_models_data as (\n      select\n          database_name,\n          schema_name,\n          alias as table_name\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n  ),\n\n  dbt_snapshots_data as (\n      select\n          database_name,\n          schema_name,\n          alias as table_name\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_snapshots\"\n  ),\n\n  dbt_sources_data as (\n      select\n          database_name,\n          schema_name,\n          name as table_name\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n  ),\n\n  dbt_seeds_data as (\n      select\n          database_name,\n          schema_name,\n          name as table_name\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_seeds\"\n  ),\n\n  tables_information as (\n      select * from dbt_models_data\n      union all\n      select * from dbt_sources_data\n      union all\n      select * from dbt_snapshots_data\n      union all\n      select * from dbt_seeds_data\n  ),\n\n  columns_information as (\n      \n    \n    \n    \n        (\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from information_schema.columns\n    where upper(table_schema) = upper('dbt_testing_example')\n    \n)\n        \n    \n\n\n\n  ),\n\n  information_schema_columns as (\n      select col_info.*\n      from tables_information tbl_info\n      join columns_information col_info\n          on (lower(tbl_info.database_name) = lower(col_info.database_name) and\n              lower(tbl_info.schema_name) = lower(col_info.schema_name) and\n              lower(tbl_info.table_name) = lower(col_info.table_name)\n          )\n  )\n\n  select *\n  from information_schema_columns\n\n", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"information_schema_columns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-16T05:37:05.445722Z", "completed_at": "2025-03-16T05:37:05.452182Z"}, {"name": "execute", "started_at": "2025-03-16T05:37:05.453147Z", "completed_at": "2025-03-16T05:37:05.453153Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009351491928100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.enriched_columns", "compiled": true, "compiled_code": "\n\n\nwith information_schema_columns as (\n    select\n        lower(database_name) as database_name,\n        lower(schema_name) as schema_name,\n        lower(table_name) as table_name,\n        lower(column_name) as name,\n        data_type\n    from \"neondb\".\"dbt_testing_example_elementary\".\"information_schema_columns\"\n),\n\ndbt_columns as (\n    select\n        lower(database_name) as database_name,\n        lower(schema_name) as schema_name,\n        lower(table_name) as table_name,\n        lower(name) as name,\n        description\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_columns\"\n)\n\nselect\n    database_name,\n    schema_name,\n    table_name,\n    name,\n    data_type,\n    description\nfrom information_schema_columns\nleft join dbt_columns using (database_name, schema_name, table_name, name)", "relation_name": "\"neondb\".\"dbt_testing_example_elementary\".\"enriched_columns\""}], "elapsed_time": 4.496219635009766, "args": {"log_level": "info", "log_path": "/__w/dbt-testing-examples/dbt-testing-examples/logs", "use_colors": true, "version_check": true, "which": "generate", "partial_parse": true, "log_file_max_bytes": 10485760, "quiet": false, "compile": true, "vars": {}, "enable_legacy_logger": false, "log_format_file": "debug", "send_anonymous_usage_stats": true, "write_json": true, "populate_cache": true, "use_colors_file": true, "project_dir": "/__w/dbt-testing-examples/dbt-testing-examples", "log_level_file": "debug", "target": "test", "indirect_selection": "eager", "select": [], "invocation_command": "dbt docs generate --target-path docs --target test", "empty_catalog": false, "macro_debugging": false, "static": false, "favor_state": false, "warn_error_options": {"include": [], "exclude": []}, "cache_selected_only": false, "print": true, "target_path": "docs", "introspect": true, "show_resource_report": false, "profiles_dir": "/__w/dbt-testing-examples/dbt-testing-examples", "partial_parse_file_diff": true, "strict_mode": false, "static_parser": true, "printer_width": 80, "defer": false, "exclude": [], "log_format": "default"}}