{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b0fe7520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5af088550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5af0884f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b0fe7520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5af088550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5af0884f0>]}", "name": "SendingEvent", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.139772Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.143642Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'version_check': 'True', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.144413Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '086642fa-d3db-4087-a5a9-435d36921609', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b0d70e50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '086642fa-d3db-4087-a5a9-435d36921609', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b0d70e50>]}", "name": "SendingEvent", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.277015Z"}}
{"data": {"path": "/tmp/dbt-downloads-lb7z2lpp"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-lb7z2lpp'", "name": "DepsSetDownloadDirectory", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.289143Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M022", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Making package index registry request: GET https://hub.getdbt.com/api/v1/index.json", "name": "RegistryIndexProgressGETRequest", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.289902Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M023", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Response from registry index: GET https://hub.getdbt.com/api/v1/index.json 200", "name": "RegistryIndexProgressGETResponse", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.374355Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json", "name": "RegistryProgressGETRequest", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.375289Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json 200", "name": "RegistryProgressGETResponse", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.398523Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json", "name": "RegistryProgressGETRequest", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.406933Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json 200", "name": "RegistryProgressGETResponse", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.431537Z"}}
{"data": {"lock_filepath": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml"}, "info": {"category": "", "code": "M031", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "info", "msg": "Updating lock file in file path: /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml", "name": "DepsLockUpdating", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.457382Z"}}
{"data": {"path": "/tmp/dbt-downloads-6o_plzuj"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-6o_plzuj'", "name": "DepsSetDownloadDirectory", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.460150Z"}}
{"data": {"package_name": "dbt-labs/dbt_utils"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "info", "msg": "Installing dbt-labs/dbt_utils", "name": "DepsStartPackageInstall", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.470763Z"}}
{"data": {"version_name": "version 0.8.6"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "info", "msg": "Installed from version 0.8.6", "name": "DepsInstallInfo", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.588078Z"}}
{"data": {"version_latest": "1.1.1"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "info", "msg": "Updated version available: 1.1.1", "name": "DepsUpdateAvailable", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.588749Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '086642fa-d3db-4087-a5a9-435d36921609', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b11e3400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b11ab460>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '086642fa-d3db-4087-a5a9-435d36921609', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b11e3400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b11ab460>]}", "name": "SendingEvent", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.589375Z"}}
{"data": {"package_name": "elementary-data/elementary"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "info", "msg": "Installing elementary-data/elementary", "name": "DepsStartPackageInstall", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.589957Z"}}
{"data": {"version_name": "version 0.14.1"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "info", "msg": "Installed from version 0.14.1", "name": "DepsInstallInfo", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.726544Z"}}
{"data": {"version_latest": "0.15.2"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "info", "msg": "Updated version available: 0.15.2", "name": "DepsUpdateAvailable", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.727326Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '086642fa-d3db-4087-a5a9-435d36921609', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b11e3400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5aed99d90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '086642fa-d3db-4087-a5a9-435d36921609', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b11e3400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5aed99d90>]}", "name": "SendingEvent", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.727943Z"}}
{"data": {"msg": ""}, "info": {"category": "", "code": "Z017", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "info", "msg": "", "name": "Formatting", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.728538Z"}}
{"data": {"packages": ["dbt-labs/dbt_utils", "elementary-data/elementary"]}, "info": {"category": "", "code": "M019", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "info", "msg": "Updates available for packages: ['dbt-labs/dbt_utils', 'elementary-data/elementary']                 \nUpdate your versions in packages.yml, then run dbt deps", "name": "DepsNotifyUpdatesAvailable", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.729103Z"}}
{"data": {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.68268466, "process_in_blocks": "0", "process_kernel_time": 0.215353, "process_mem_max_rss": "90340", "process_out_blocks": "7160", "process_user_time": 1.487534}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Resource report: {\"command_name\": \"deps\", \"command_success\": true, \"command_wall_clock_time\": 0.68268466, \"process_user_time\": 1.487534, \"process_kernel_time\": 0.215353, \"process_mem_max_rss\": \"90340\", \"process_out_blocks\": \"7160\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.730603Z"}}
{"data": {"command": "dbt deps", "completed_at": "2024-05-23T05:38:03.731483Z", "elapsed": 0.68374807, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Command `dbt deps` succeeded at 05:38:03.731483 after 0.68 seconds", "name": "CommandCompleted", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.731608Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b0fe7520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b11e3400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b11e54f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b0fe7520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b11e3400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc5b11e54f0>]}", "name": "SendingEvent", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.732255Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "086642fa-d3db-4087-a5a9-435d36921609", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 227, "thread": "MainThread", "ts": "2024-05-23T05:38:03.732816Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825e270550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825c30aaf0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825c30ab50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825e270550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825c30aaf0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825c30ab50>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:05.200830Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:05.204876Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:05.205688Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:05.209784Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825c365a00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825c365a00>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:05.392863Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825b78b9a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825b78b9a0>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:05.456410Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:05.457502Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:05.481936Z"}}
{"data": {"reason": "saved manifest not found. Starting full parse."}, "info": {"category": "", "code": "I024", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "info", "msg": "Unable to do partial parsing because saved manifest not found. Starting full parse.", "name": "UnableToPartialParse", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:05.483180Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'partial_parser', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825b76f160>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825b76f160>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:05.483800Z"}}
{"data": {"deprecated_path": "tests", "exp_path": "data_tests"}, "info": {"category": "", "code": "D012", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "warn", "msg": "[\u001b[33mWARNING\u001b[0m]: Deprecated functionality\nThe `tests` config has been renamed to `data_tests`. Please see\nhttps://docs.getdbt.com/docs/build/data-tests#new-data_tests-syntax for more\ninformation.", "name": "TestsConfigDeprecation", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:10.308368Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'deprecation', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825af37250>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825af37250>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:10.309194Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825b2ec400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825b2ec400>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:10.713983Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825ae07c40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825ae07c40>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:10.923074Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:10.923924Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825b4f93a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'df6a5c8d-eb09-459f-a992-2281871c6172', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825b4f93a0>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:10.924520Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:10.925314Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:10.925901Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:10.926441Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:10.927032Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:11.690843Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:11.691652Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:11.692192Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:11.692722Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:11.786758Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:11.804687Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:11.848113Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:11.848757Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:11.946810Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:11.947587Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:11.948171Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.047735Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, metadata, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models, metrics_anomaly_score, monitors_runs, alerts_schema_changes, enriched_columns, job_run_results, alerts_dbt_source_freshness, model_run_results, information_schema_columns", "name": "ListRelations", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.055461Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.062472Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  ", "name": "SQLQuery", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.063087Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "SQL status: SELECT 1 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.158118Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"9202764504\", \"run_started_at\": \"2024-05-23 05:35:55\", \"run_completed_at\": \"2024-05-23 05:36:31\", \"generated_at\": \"2024-05-23 05:36:31\", \"created_at\": \"2024-05-23T05:36:31.739945\", \"command\": \"run\", \"dbt_version\": \"1.7.11\", \"elementary_version\": \"0.14.1\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"b20c185e15cb00e9b46864e6dc6dfd5febb0ae1f\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9202764504\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9202764504\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"9202764504\", \"run_started_at\": \"2024-05-23 05:35:55\", \"run_completed_at\": \"2024-05-23 05:36:31\", \"generated_at\": \"2024-05-23 05:36:31\", \"created_at\": \"2024-05-23T05:36:31.739945\", \"command\": \"run\", \"dbt_version\": \"1.7.11\", \"elementary_version\": \"0.14.1\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"b20c185e15cb00e9b46864e6dc6dfd5febb0ae1f\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9202764504\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9202764504\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]", "name": "JinjaLogInfo", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.167251Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.168019Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.261726Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 7.1562204, "process_in_blocks": "0", "process_kernel_time": 0.23182, "process_mem_max_rss": "119204", "process_out_blocks": "7296", "process_user_time": 6.910649}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 7.1562204, \"process_user_time\": 6.910649, \"process_kernel_time\": 0.23182, \"process_mem_max_rss\": \"119204\", \"process_out_blocks\": \"7296\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.270425Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:12.271215Z", "elapsed": 7.157172, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:12.271215 after 7.16 seconds", "name": "CommandCompleted", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.271336Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.271933Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825e270550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825c365a00>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825c910a60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825e270550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825c365a00>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f825c910a60>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.272485Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "df6a5c8d-eb09-459f-a992-2281871c6172", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 229, "thread": "MainThread", "ts": "2024-05-23T05:38:12.273064Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104f85b400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104d941a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104d941a90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104f85b400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104d941a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104d941a90>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:13.778090Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:13.781969Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/github/workspace/report', 'version_check': 'True', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:13.782779Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:13.786723Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'c6fba7aa-533d-407d-9e4b-36fb65efd601', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104d9807c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'c6fba7aa-533d-407d-9e4b-36fb65efd601', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104d9807c0>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:13.969701Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'c6fba7aa-533d-407d-9e4b-36fb65efd601', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104ce4ce50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'c6fba7aa-533d-407d-9e4b-36fb65efd601', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104ce4ce50>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.032827Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.033907Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.058664Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.330059Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.330840Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'c6fba7aa-533d-407d-9e4b-36fb65efd601', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104ccb59d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'c6fba7aa-533d-407d-9e4b-36fb65efd601', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104ccb59d0>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.411244Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'c6fba7aa-533d-407d-9e4b-36fb65efd601', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104ca6b370>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'c6fba7aa-533d-407d-9e4b-36fb65efd601', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104ca6b370>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.650635Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.651539Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'c6fba7aa-533d-407d-9e4b-36fb65efd601', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104ca6b760>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'c6fba7aa-533d-407d-9e4b-36fb65efd601', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104ca6b760>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.652132Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.652901Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.653500Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.654053Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:14.654588Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.423203Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.424160Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.424714Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.425258Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.525587Z"}}
{"data": {"msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "info", "msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]", "name": "JinjaLogInfo", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.542219Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.542959Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.8657649, "process_in_blocks": "0", "process_kernel_time": 0.183617, "process_mem_max_rss": "105020", "process_out_blocks": "3744", "process_user_time": 2.027774}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.8657649, \"process_user_time\": 2.027774, \"process_kernel_time\": 0.183617, \"process_mem_max_rss\": \"105020\", \"process_out_blocks\": \"3744\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.551501Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:15.552265Z", "elapsed": 1.8666925, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:15.552265 after 1.87 seconds", "name": "CommandCompleted", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.552385Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.552987Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104f85b400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104d9807c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104ded7160>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104f85b400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104d9807c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f104ded7160>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.553537Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "c6fba7aa-533d-407d-9e4b-36fb65efd601", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 236, "thread": "MainThread", "ts": "2024-05-23T05:38:15.554133Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0d934550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0b9ceaf0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0b9ceb50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0d934550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0b9ceaf0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0b9ceb50>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.015644Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.019436Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'debug': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'log_format': 'json', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.020196Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.024092Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'fb5f98a4-0338-4430-a91c-9db1e43e71ef', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0ba2aa00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'fb5f98a4-0338-4430-a91c-9db1e43e71ef', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0ba2aa00>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.205743Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'fb5f98a4-0338-4430-a91c-9db1e43e71ef', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0ae4d9a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'fb5f98a4-0338-4430-a91c-9db1e43e71ef', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0ae4d9a0>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.268584Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.269650Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.293794Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.562181Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.562916Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'fb5f98a4-0338-4430-a91c-9db1e43e71ef', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0ad419a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'fb5f98a4-0338-4430-a91c-9db1e43e71ef', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0ad419a0>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.643207Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'fb5f98a4-0338-4430-a91c-9db1e43e71ef', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0aa0a0a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'fb5f98a4-0338-4430-a91c-9db1e43e71ef', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0aa0a0a0>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.893243Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.894179Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'fb5f98a4-0338-4430-a91c-9db1e43e71ef', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0aa0a0a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'fb5f98a4-0338-4430-a91c-9db1e43e71ef', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0aa0a0a0>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.894862Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.895693Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.896282Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.896826Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:17.897351Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.671830Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.672674Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.673223Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.673748Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.771650Z"}}
{"data": {"msg": "Elementary: \"neondb.dbt_testing_example_elementary\""}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "info", "msg": "Elementary: \"neondb.dbt_testing_example_elementary\"", "name": "JinjaLogInfo", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.790387Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.791103Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.870396, "process_in_blocks": "0", "process_kernel_time": 0.172675, "process_mem_max_rss": "105300", "process_out_blocks": "3744", "process_user_time": 2.035962}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.870396, \"process_user_time\": 2.035962, \"process_kernel_time\": 0.172675, \"process_mem_max_rss\": \"105300\", \"process_out_blocks\": \"3744\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.799548Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:18.800294Z", "elapsed": 1.8712962, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:18.800294 after 1.87 seconds", "name": "CommandCompleted", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.800413Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.801011Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0d934550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0bf64160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0d57fc10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0d934550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0bf64160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0d57fc10>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.801561Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "fb5f98a4-0338-4430-a91c-9db1e43e71ef", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 240, "thread": "MainThread", "ts": "2024-05-23T05:38:18.802127Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f63191564c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f63171f0be0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f63171f0c40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f63191564c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f63171f0be0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f63171f0c40>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:20.268700Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:20.272472Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'debug': 'False', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'static_parser': 'True', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:20.273262Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:20.277133Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'ebe94873-6e48-4eb4-ab82-513344f02739', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f631670d6a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ebe94873-6e48-4eb4-ab82-513344f02739', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f631670d6a0>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:20.458648Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'ebe94873-6e48-4eb4-ab82-513344f02739', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f631729d310>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ebe94873-6e48-4eb4-ab82-513344f02739', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f631729d310>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:20.520925Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:20.521922Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:20.545616Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:20.812831Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:20.813571Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'ebe94873-6e48-4eb4-ab82-513344f02739', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f631655e130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ebe94873-6e48-4eb4-ab82-513344f02739', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f631655e130>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:20.893770Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'ebe94873-6e48-4eb4-ab82-513344f02739', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f631636b070>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ebe94873-6e48-4eb4-ab82-513344f02739', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f631636b070>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:21.135486Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:21.136365Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'ebe94873-6e48-4eb4-ab82-513344f02739', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f631636b130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ebe94873-6e48-4eb4-ab82-513344f02739', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f631636b130>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:21.136944Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:21.137705Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:21.138280Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:21.138935Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:21.139594Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:21.912303Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:21.913119Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:21.913680Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:21.914221Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.008663Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.113133Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  ", "name": "SQLQuery", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.114011Z"}}
{"data": {"elapsed": 1.0, "status": "SELECT 112"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "SQL status: SELECT 112 in 1.0 seconds", "name": "SQLQueryStatus", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.661822Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.676206Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  ", "name": "SQLQuery", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.676823Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.831330Z"}}
{"data": {"msg": "Elementary: [{\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-17T05:36:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-19T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-20T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-22T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-17T05:36:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-19T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-20T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-22T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-17T05:36:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-19T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-20T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-22T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-17T05:36:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-19T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-20T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-22T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-17T05:36:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-19T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-21T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-22T05:35:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-17T05:36:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-19T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-21T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-22T05:35:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-17T05:36:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-19T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-20T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-22T05:35:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-17T05:36:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-19T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-20T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-22T05:35:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-17T05:36:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-19T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-21T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-22T05:35:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-17T05:36:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-19T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-21T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-22T05:35:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-17T05:36:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-19T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-21T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-22T05:35:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-17T05:36:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-19T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-21T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-22T05:35:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-17T05:36:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-18T05:34:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-19T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-20T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-21T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-22T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-23T05:35:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-17T05:36:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-18T05:34:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-19T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-20T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-21T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-22T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-23T05:35:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-17T05:36:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-18T05:34:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-19T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-20T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-21T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-22T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-23T05:35:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-17T05:36:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-18T05:34:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-19T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-20T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-21T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-22T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-23T05:35:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "info", "msg": "Elementary: [{\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-17T05:36:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-19T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-20T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-22T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-17T05:36:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-19T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-20T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-22T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-17T05:36:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-19T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-20T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-22T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-17T05:36:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-19T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-20T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-22T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-17T05:36:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-19T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-21T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-22T05:35:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-17T05:36:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-19T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-21T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-22T05:35:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-17T05:36:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-19T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-20T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-22T05:35:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-17T05:36:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-18T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-19T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-20T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-21T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-22T05:35:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-23T05:35:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-17T05:36:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-19T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-21T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-22T05:35:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-17T05:36:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-19T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-21T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-22T05:35:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-17T05:36:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-19T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-21T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-22T05:35:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-17T05:36:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-18T05:34:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-19T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-20T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-21T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-22T05:35:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-23T05:35:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-17T05:36:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-18T05:34:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-19T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-20T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-21T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-22T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-23T05:35:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-17T05:36:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-18T05:34:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-19T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-20T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-21T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-22T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-23T05:35:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-17T05:36:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-18T05:34:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-19T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-20T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-21T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-22T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-23T05:35:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf\", \"test_execution_id\": \"4b45d855-e817-469d-b26e-6f974e4cd6bf.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-17T05:36:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739\", \"test_execution_id\": \"04cbe7c3-4e77-490a-8568-0f0b42a04739.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-18T05:34:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f\", \"test_execution_id\": \"3e61230a-cd97-4425-9d80-3a415314ed8f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-19T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e\", \"test_execution_id\": \"3ffc5f10-3af8-40ec-86ef-ebc487be766e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-20T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3\", \"test_execution_id\": \"8183c93d-f4bc-4ed7-a31b-c10fa62179b3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-21T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67\", \"test_execution_id\": \"1f45c1f8-8d33-4059-97ec-495a9a8b2c67.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-22T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951\", \"test_execution_id\": \"5398a059-074b-4d3b-b1a9-2eb327906951.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-23T05:35:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]", "name": "JinjaLogInfo", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.893706Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.910602Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.7358267, "process_in_blocks": "0", "process_kernel_time": 0.244117, "process_mem_max_rss": "112168", "process_out_blocks": "4864", "process_user_time": 2.14103}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.7358267, \"process_user_time\": 2.14103, \"process_kernel_time\": 0.244117, \"process_mem_max_rss\": \"112168\", \"process_out_blocks\": \"4864\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.919497Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:22.920268Z", "elapsed": 2.7367647, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:22.920268 after 2.74 seconds", "name": "CommandCompleted", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.920391Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.920993Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f63191564c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f63166a9250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6317785790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f63191564c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f63166a9250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6317785790>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.921540Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "ebe94873-6e48-4eb4-ab82-513344f02739", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 243, "thread": "MainThread", "ts": "2024-05-23T05:38:22.922113Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f817550c550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f81735a7af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f81735a7b50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f817550c550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f81735a7af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f81735a7b50>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:24.417210Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:24.421033Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'log_format': 'json', 'introspect': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:24.421814Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:24.425712Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '9f33ef9e-aae7-41fb-bedd-71000582b390', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8173603a00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '9f33ef9e-aae7-41fb-bedd-71000582b390', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8173603a00>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:24.607707Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '9f33ef9e-aae7-41fb-bedd-71000582b390', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8172a259a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '9f33ef9e-aae7-41fb-bedd-71000582b390', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8172a259a0>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:24.670270Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:24.671327Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:24.695731Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:24.993071Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:24.993790Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '9f33ef9e-aae7-41fb-bedd-71000582b390', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f81729149a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '9f33ef9e-aae7-41fb-bedd-71000582b390', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f81729149a0>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:25.077327Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '9f33ef9e-aae7-41fb-bedd-71000582b390', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8172665fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '9f33ef9e-aae7-41fb-bedd-71000582b390', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8172665fa0>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:25.317714Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:25.318561Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '9f33ef9e-aae7-41fb-bedd-71000582b390', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8172665fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '9f33ef9e-aae7-41fb-bedd-71000582b390', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8172665fa0>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:25.319170Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:25.319928Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:25.320507Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:25.321049Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:25.321574Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.090836Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.091663Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.092210Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.092818Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.186035Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.271789Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.272479Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.369747Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.370711Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.371341Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 17"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "SQL status: SELECT 17 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.471878Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.481028Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.481668Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 22"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "SQL status: SELECT 22 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.577771Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.614499Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  ", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.615274Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.710235Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.718647Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.719408Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.812929Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.497227, "process_in_blocks": "0", "process_kernel_time": 0.220117, "process_mem_max_rss": "108648", "process_out_blocks": "3768", "process_user_time": 2.145146}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.497227, \"process_user_time\": 2.145146, \"process_kernel_time\": 0.220117, \"process_mem_max_rss\": \"108648\", \"process_out_blocks\": \"3768\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.822190Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:26.823050Z", "elapsed": 2.4982717, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:26.823050 after 2.50 seconds", "name": "CommandCompleted", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.823174Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.823789Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f817550c550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8173b3c400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8175157c10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f817550c550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8173b3c400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8175157c10>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.824345Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "9f33ef9e-aae7-41fb-bedd-71000582b390", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 246, "thread": "MainThread", "ts": "2024-05-23T05:38:26.824922Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b5fb94c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b4053b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b4053bb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b5fb94c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b4053b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b4053bb0>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:28.357273Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:28.361209Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'debug': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'introspect': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:28.362006Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:28.366009Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '0a4562ff-4a34-496c-8745-89dc495f128c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b51a2190>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '0a4562ff-4a34-496c-8745-89dc495f128c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b51a2190>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:28.551768Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '0a4562ff-4a34-496c-8745-89dc495f128c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b4bc7430>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '0a4562ff-4a34-496c-8745-89dc495f128c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b4bc7430>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:28.616416Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:28.617498Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:28.642356Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:28.921802Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:28.922553Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '0a4562ff-4a34-496c-8745-89dc495f128c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b33c1130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '0a4562ff-4a34-496c-8745-89dc495f128c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b33c1130>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:29.004846Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '0a4562ff-4a34-496c-8745-89dc495f128c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b2fa2e50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '0a4562ff-4a34-496c-8745-89dc495f128c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b2fa2e50>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:29.254475Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:29.255403Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '0a4562ff-4a34-496c-8745-89dc495f128c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b2e695b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '0a4562ff-4a34-496c-8745-89dc495f128c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b2e695b0>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:29.256014Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:29.256821Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:29.257447Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:29.258015Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:29.258568Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.030001Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.030904Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.031525Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.032108Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.126459Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.155737Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.206108Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.207001Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.301534Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.302350Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.302995Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.399719Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, metadata, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models, metrics_anomaly_score, monitors_runs, alerts_schema_changes, enriched_columns, job_run_results, alerts_dbt_source_freshness, model_run_results, information_schema_columns", "name": "ListRelations", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.407248Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.429478Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.430134Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "SQL status: SELECT 19 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.528764Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.539316Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  ", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.539983Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 4"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "SQL status: SELECT 4 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.635280Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "info", "msg": "Elementary: [{\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}]", "name": "JinjaLogInfo", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.644455Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.645281Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.739646Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.485022, "process_in_blocks": "0", "process_kernel_time": 0.203404, "process_mem_max_rss": "108332", "process_out_blocks": "3776", "process_user_time": 2.181613}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.485022, \"process_user_time\": 2.181613, \"process_kernel_time\": 0.203404, \"process_mem_max_rss\": \"108332\", \"process_out_blocks\": \"3776\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.749663Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:30.750450Z", "elapsed": 2.4859645, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:30.750450 after 2.49 seconds", "name": "CommandCompleted", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.750570Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.751226Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b5fb94c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b3525040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b34c7e80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b5fb94c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b3525040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f02b34c7e80>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.751811Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "0a4562ff-4a34-496c-8745-89dc495f128c", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 249, "thread": "MainThread", "ts": "2024-05-23T05:38:30.752407Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1aa0070400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9e156a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9e156a90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1aa0070400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9e156a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9e156a90>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:32.255089Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:32.258976Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'debug': 'False', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'introspect': 'True', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:32.259784Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:32.263686Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'db1007d6-b521-4166-b266-5ea7547d9632', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9e1957c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'db1007d6-b521-4166-b266-5ea7547d9632', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9e1957c0>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:32.446212Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'db1007d6-b521-4166-b266-5ea7547d9632', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9d660e50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'db1007d6-b521-4166-b266-5ea7547d9632', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9d660e50>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:32.509835Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:32.511035Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:32.535835Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:32.809669Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:32.810378Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'db1007d6-b521-4166-b266-5ea7547d9632', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9d4c99d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'db1007d6-b521-4166-b266-5ea7547d9632', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9d4c99d0>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:32.891376Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'db1007d6-b521-4166-b266-5ea7547d9632', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9d27f370>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'db1007d6-b521-4166-b266-5ea7547d9632', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9d27f370>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:33.136808Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:33.137644Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'db1007d6-b521-4166-b266-5ea7547d9632', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9d27f760>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'db1007d6-b521-4166-b266-5ea7547d9632', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9d27f760>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:33.138232Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:33.139030Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:33.139615Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:33.140158Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:33.140689Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:33.909998Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:33.910980Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:33.911539Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:33.912098Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.006554Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.026738Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.070982Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.071657Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.166181Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.167034Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.167623Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.264280Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, metadata, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models, metrics_anomaly_score, monitors_runs, alerts_schema_changes, enriched_columns, job_run_results, alerts_dbt_source_freshness, model_run_results, information_schema_columns", "name": "ListRelations", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.271925Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.279018Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  ", "name": "SQLQuery", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.279643Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 2"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "SQL status: SELECT 2 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.374555Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}, {\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "info", "msg": "Elementary: [{\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}, {\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}]", "name": "JinjaLogInfo", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.382785Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.383537Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.478291Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.3172896, "process_in_blocks": "0", "process_kernel_time": 0.243166, "process_mem_max_rss": "108496", "process_out_blocks": "3768", "process_user_time": 2.056951}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.3172896, \"process_user_time\": 2.056951, \"process_kernel_time\": 0.243166, \"process_mem_max_rss\": \"108496\", \"process_out_blocks\": \"3768\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.487512Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:34.488280Z", "elapsed": 2.31822, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:34.488280 after 2.32 seconds", "name": "CommandCompleted", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.488399Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.488998Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1aa0070400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9e1957c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9e76b160>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1aa0070400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9e1957c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1a9e76b160>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.489549Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "db1007d6-b521-4166-b266-5ea7547d9632", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 252, "thread": "MainThread", "ts": "2024-05-23T05:38:34.490140Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ed0e75490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecef0dbb0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecef0dc10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ed0e75490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecef0dbb0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecef0dc10>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:35.986626Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:35.990548Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'debug': 'False', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:35.991354Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:35.995324Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '19f1257e-dcb8-40b1-811c-7c286a37d507', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ed009e970>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '19f1257e-dcb8-40b1-811c-7c286a37d507', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ed009e970>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.178368Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '19f1257e-dcb8-40b1-811c-7c286a37d507', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecf091190>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '19f1257e-dcb8-40b1-811c-7c286a37d507', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecf091190>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.241618Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.242637Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.267019Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.536211Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.536903Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '19f1257e-dcb8-40b1-811c-7c286a37d507', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ece281130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '19f1257e-dcb8-40b1-811c-7c286a37d507', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ece281130>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.616575Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '19f1257e-dcb8-40b1-811c-7c286a37d507', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecdf6edf0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '19f1257e-dcb8-40b1-811c-7c286a37d507', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecdf6edf0>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.864436Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.865351Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '19f1257e-dcb8-40b1-811c-7c286a37d507', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecdd24520>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '19f1257e-dcb8-40b1-811c-7c286a37d507', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecdd24520>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.865948Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.866740Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.867331Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.867875Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:36.868406Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:37.657842Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:37.658814Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:37.659981Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:37.660678Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:37.756879Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:37.779947Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:37.823908Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:37.824567Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:37.920899Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:37.921636Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:37.922287Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.020781Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, metadata, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models, metrics_anomaly_score, monitors_runs, alerts_schema_changes, enriched_columns, job_run_results, alerts_dbt_source_freshness, model_run_results, information_schema_columns", "name": "ListRelations", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.028277Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.049944Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.050560Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "SQL status: SELECT 20 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.159599Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.168879Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.169493Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "SQL status: SELECT 20 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.268079Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.274838Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.275474Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "SQL status: SELECT 20 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.373921Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.382498Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  \n                    depends_on_columns\n                  \n\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  \n                    depends_on_columns\n                  \n\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  ", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.383145Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.479718Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.487701Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.488369Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.584480Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.6964705, "process_in_blocks": "0", "process_kernel_time": 0.195932, "process_mem_max_rss": "109144", "process_out_blocks": "3784", "process_user_time": 2.155258}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.6964705, \"process_user_time\": 2.155258, \"process_kernel_time\": 0.195932, \"process_mem_max_rss\": \"109144\", \"process_out_blocks\": \"3784\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.593391Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:38.594170Z", "elapsed": 2.6974168, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:38.594170 after 2.70 seconds", "name": "CommandCompleted", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.594291Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.594929Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ed0e75490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ed009e970>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecf091190>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ed0e75490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ed009e970>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ecf091190>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.595491Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "19f1257e-dcb8-40b1-811c-7c286a37d507", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 255, "thread": "MainThread", "ts": "2024-05-23T05:38:38.596060Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb3f11550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb1fabaf0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb1fabb50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb3f11550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb1fabaf0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb1fabb50>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.089580Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.093501Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.094281Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.098219Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'a90591e6-a6f5-498d-93f8-589961ccba24', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb2007a00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'a90591e6-a6f5-498d-93f8-589961ccba24', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb2007a00>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.280209Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'a90591e6-a6f5-498d-93f8-589961ccba24', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb142c9a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'a90591e6-a6f5-498d-93f8-589961ccba24', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb142c9a0>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.342575Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.343625Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.367815Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.639209Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.639947Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'a90591e6-a6f5-498d-93f8-589961ccba24', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb13199a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'a90591e6-a6f5-498d-93f8-589961ccba24', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb13199a0>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.720145Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'a90591e6-a6f5-498d-93f8-589961ccba24', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb10e5fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'a90591e6-a6f5-498d-93f8-589961ccba24', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb10e5fa0>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.967882Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.968711Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'a90591e6-a6f5-498d-93f8-589961ccba24', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb10e5fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'a90591e6-a6f5-498d-93f8-589961ccba24', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb10e5fa0>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.969295Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.970051Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.970624Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.971220Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:40.971745Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:41.751063Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:41.751892Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:41.752451Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:41.752988Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:41.848510Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:41.938345Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  ", "name": "SQLQuery", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:41.939225Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 28"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "SQL status: SELECT 28 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:42.322041Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"ceef1baa-7c0f-4fe0-b406-66fa3a477222\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-17 05:37:10\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"ceef1baa-7c0f-4fe0-b406-66fa3a477222\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-17 05:37:10\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"ceef1baa-7c0f-4fe0-b406-66fa3a477222\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-17 05:37:10\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"ceef1baa-7c0f-4fe0-b406-66fa3a477222\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-17 05:37:11\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"9a2702dc-7460-4fd2-a798-0330ce3e0e3f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-18 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"9a2702dc-7460-4fd2-a798-0330ce3e0e3f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-18 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"9a2702dc-7460-4fd2-a798-0330ce3e0e3f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-18 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"9a2702dc-7460-4fd2-a798-0330ce3e0e3f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-18 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"fb6bb41f-7abf-4f85-8296-a3785f5786ae\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-19 05:35:39\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"fb6bb41f-7abf-4f85-8296-a3785f5786ae\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-19 05:35:39\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"fb6bb41f-7abf-4f85-8296-a3785f5786ae\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-19 05:35:39\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"fb6bb41f-7abf-4f85-8296-a3785f5786ae\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-19 05:35:39\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"1945a4e6-4de6-48db-bffc-7fff6a459eeb\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-20 05:35:55\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"1945a4e6-4de6-48db-bffc-7fff6a459eeb\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-20 05:35:55\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"1945a4e6-4de6-48db-bffc-7fff6a459eeb\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-20 05:35:55\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"1945a4e6-4de6-48db-bffc-7fff6a459eeb\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-20 05:35:55\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"3b8c3f6a-cc76-454c-9b5d-5a0601e48208\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-21 05:35:51\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"3b8c3f6a-cc76-454c-9b5d-5a0601e48208\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-21 05:35:51\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"3b8c3f6a-cc76-454c-9b5d-5a0601e48208\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-21 05:35:51\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"3b8c3f6a-cc76-454c-9b5d-5a0601e48208\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-21 05:35:51\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"dd30c462-cc67-484f-9aef-692652aa4437\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-22 05:36:35\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"dd30c462-cc67-484f-9aef-692652aa4437\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-22 05:36:35\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"dd30c462-cc67-484f-9aef-692652aa4437\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-22 05:36:35\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"dd30c462-cc67-484f-9aef-692652aa4437\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-22 05:36:35\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-23 05:36:29\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-23 05:36:29\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.0, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-23 05:36:29\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-23 05:36:29\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"ceef1baa-7c0f-4fe0-b406-66fa3a477222\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-17 05:37:10\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"ceef1baa-7c0f-4fe0-b406-66fa3a477222\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-17 05:37:10\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"ceef1baa-7c0f-4fe0-b406-66fa3a477222\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-17 05:37:10\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"ceef1baa-7c0f-4fe0-b406-66fa3a477222\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-17 05:37:11\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"9a2702dc-7460-4fd2-a798-0330ce3e0e3f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-18 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"9a2702dc-7460-4fd2-a798-0330ce3e0e3f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-18 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"9a2702dc-7460-4fd2-a798-0330ce3e0e3f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-18 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"9a2702dc-7460-4fd2-a798-0330ce3e0e3f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-18 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"fb6bb41f-7abf-4f85-8296-a3785f5786ae\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-19 05:35:39\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"fb6bb41f-7abf-4f85-8296-a3785f5786ae\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-19 05:35:39\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"fb6bb41f-7abf-4f85-8296-a3785f5786ae\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-19 05:35:39\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"fb6bb41f-7abf-4f85-8296-a3785f5786ae\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-19 05:35:39\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"1945a4e6-4de6-48db-bffc-7fff6a459eeb\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-20 05:35:55\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"1945a4e6-4de6-48db-bffc-7fff6a459eeb\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-20 05:35:55\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"1945a4e6-4de6-48db-bffc-7fff6a459eeb\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-20 05:35:55\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"1945a4e6-4de6-48db-bffc-7fff6a459eeb\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-20 05:35:55\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"3b8c3f6a-cc76-454c-9b5d-5a0601e48208\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-21 05:35:51\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"3b8c3f6a-cc76-454c-9b5d-5a0601e48208\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-21 05:35:51\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"3b8c3f6a-cc76-454c-9b5d-5a0601e48208\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-21 05:35:51\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"3b8c3f6a-cc76-454c-9b5d-5a0601e48208\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-21 05:35:51\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"dd30c462-cc67-484f-9aef-692652aa4437\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-22 05:36:35\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"dd30c462-cc67-484f-9aef-692652aa4437\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-22 05:36:35\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"dd30c462-cc67-484f-9aef-692652aa4437\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-22 05:36:35\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"dd30c462-cc67-484f-9aef-692652aa4437\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-22 05:36:35\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-23 05:36:29\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-23 05:36:29\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.0, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-23 05:36:29\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-23 05:36:29\"}]", "name": "JinjaLogInfo", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:42.335984Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:42.337948Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.351546, "process_in_blocks": "0", "process_kernel_time": 0.17233, "process_mem_max_rss": "108408", "process_out_blocks": "3840", "process_user_time": 2.148125}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.351546, \"process_user_time\": 2.148125, \"process_kernel_time\": 0.17233, \"process_mem_max_rss\": \"108408\", \"process_out_blocks\": \"3840\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:42.346496Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:42.347307Z", "elapsed": 2.3525126, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:42.347307 after 2.35 seconds", "name": "CommandCompleted", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:42.347427Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:42.348031Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb3f11550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb25c0160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb3b5cc10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb3f11550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb25c0160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cb3b5cc10>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:42.348575Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "a90591e6-a6f5-498d-93f8-589961ccba24", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 258, "thread": "MainThread", "ts": "2024-05-23T05:38:42.349142Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbebee550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbcc87af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbcc87b50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbebee550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbcc87af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbcc87b50>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:43.860425Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:43.864170Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:43.864942Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:43.868944Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'fbdb6d0a-8aea-4ea2-924d-7627b03ddb85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbcce3a00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'fbdb6d0a-8aea-4ea2-924d-7627b03ddb85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbcce3a00>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.057083Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'fbdb6d0a-8aea-4ea2-924d-7627b03ddb85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbc1099a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'fbdb6d0a-8aea-4ea2-924d-7627b03ddb85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbc1099a0>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.120142Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.121206Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.145128Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.414262Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.414992Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'fbdb6d0a-8aea-4ea2-924d-7627b03ddb85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbbffa9a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'fbdb6d0a-8aea-4ea2-924d-7627b03ddb85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbbffa9a0>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.496340Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'fbdb6d0a-8aea-4ea2-924d-7627b03ddb85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbbbb5f70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'fbdb6d0a-8aea-4ea2-924d-7627b03ddb85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbbbb5f70>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.748226Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.749159Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'fbdb6d0a-8aea-4ea2-924d-7627b03ddb85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbbbb5f70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'fbdb6d0a-8aea-4ea2-924d-7627b03ddb85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbbbb5f70>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.749802Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.750614Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.751271Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.751847Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:44.752384Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.528945Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.529813Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.530364Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.530949Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.625456Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.646811Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.691499Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.692127Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.786730Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.787597Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.788230Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.884990Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, metadata, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models, metrics_anomaly_score, monitors_runs, alerts_schema_changes, enriched_columns, job_run_results, alerts_dbt_source_freshness, model_run_results, information_schema_columns", "name": "ListRelations", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.892400Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.899482Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  ", "name": "SQLQuery", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.900102Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "SQL status: SELECT 6 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:45.999642Z"}}
{"data": {"msg": "Elementary: [{\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}, {\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "info", "msg": "Elementary: [{\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}, {\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}]", "name": "JinjaLogInfo", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:46.008335Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:46.009102Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:46.103699Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.3384955, "process_in_blocks": "0", "process_kernel_time": 0.16037, "process_mem_max_rss": "108872", "process_out_blocks": "3768", "process_user_time": 2.140947}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.3384955, \"process_user_time\": 2.140947, \"process_kernel_time\": 0.16037, \"process_mem_max_rss\": \"108872\", \"process_out_blocks\": \"3768\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:46.112983Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:46.113776Z", "elapsed": 2.3394551, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:46.113776 after 2.34 seconds", "name": "CommandCompleted", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:46.113899Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:46.114532Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbebee550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbd8530a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbe838c10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbebee550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbd8530a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7bbe838c10>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:46.115137Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "fbdb6d0a-8aea-4ea2-924d-7627b03ddb85", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 261, "thread": "MainThread", "ts": "2024-05-23T05:38:46.115721Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365e99e550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365ca38af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365ca38b50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365e99e550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365ca38af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365ca38b50>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:47.594138Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:47.598008Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:47.598810Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:47.602745Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '57b29434-bd46-4909-9d54-70e53ee5d76e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365ca94a00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '57b29434-bd46-4909-9d54-70e53ee5d76e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365ca94a00>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:47.784544Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '57b29434-bd46-4909-9d54-70e53ee5d76e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365beb79a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '57b29434-bd46-4909-9d54-70e53ee5d76e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365beb79a0>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:47.847689Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:47.848710Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:47.873061Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:48.144544Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:48.145270Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '57b29434-bd46-4909-9d54-70e53ee5d76e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365bda69a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '57b29434-bd46-4909-9d54-70e53ee5d76e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365bda69a0>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:48.226008Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '57b29434-bd46-4909-9d54-70e53ee5d76e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365bb75f10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '57b29434-bd46-4909-9d54-70e53ee5d76e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365bb75f10>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:48.466006Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:48.466919Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '57b29434-bd46-4909-9d54-70e53ee5d76e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365bb75f10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '57b29434-bd46-4909-9d54-70e53ee5d76e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365bb75f10>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:48.467505Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:48.468257Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:48.468837Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:48.469378Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:48.469914Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.234872Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.235730Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.236279Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.236816Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.330985Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.352313Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.396166Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.396797Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.496255Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.496972Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.497571Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.594553Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, metadata, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models, metrics_anomaly_score, monitors_runs, alerts_schema_changes, enriched_columns, job_run_results, alerts_dbt_source_freshness, model_run_results, information_schema_columns", "name": "ListRelations", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.601954Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.609264Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n    \n  ", "name": "SQLQuery", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.609887Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "SQL status: SELECT 6 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.705512Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}]", "name": "JinjaLogInfo", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.713831Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.714580Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.811439Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.3123627, "process_in_blocks": "0", "process_kernel_time": 0.176076, "process_mem_max_rss": "108864", "process_out_blocks": "3776", "process_user_time": 2.104912}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.3123627, \"process_user_time\": 2.104912, \"process_kernel_time\": 0.176076, \"process_mem_max_rss\": \"108864\", \"process_out_blocks\": \"3776\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.820752Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:49.821585Z", "elapsed": 2.3133628, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:49.821585 after 2.31 seconds", "name": "CommandCompleted", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.821708Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.822323Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365e99e550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365d6040a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365e5e9c10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365e99e550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365d6040a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f365e5e9c10>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.822917Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "57b29434-bd46-4909-9d54-70e53ee5d76e", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 264, "thread": "MainThread", "ts": "2024-05-23T05:38:49.823491Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f3e0e550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f1ea7af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f1ea7b50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f3e0e550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f1ea7af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f1ea7b50>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:51.298768Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:51.302600Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:51.303435Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:51.307366Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '95871c52-6eb2-4195-b3cb-7534f88df42a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f1f03970>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '95871c52-6eb2-4195-b3cb-7534f88df42a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f1f03970>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:51.487961Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '95871c52-6eb2-4195-b3cb-7534f88df42a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f20a9a60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '95871c52-6eb2-4195-b3cb-7534f88df42a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f20a9a60>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:51.550490Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:51.551606Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:51.576195Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:51.848097Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:51.848772Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '95871c52-6eb2-4195-b3cb-7534f88df42a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f121b130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '95871c52-6eb2-4195-b3cb-7534f88df42a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f121b130>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:51.928250Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '95871c52-6eb2-4195-b3cb-7534f88df42a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f1066f10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '95871c52-6eb2-4195-b3cb-7534f88df42a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f1066f10>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:52.175582Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:52.176444Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '95871c52-6eb2-4195-b3cb-7534f88df42a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f31fa8e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '95871c52-6eb2-4195-b3cb-7534f88df42a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f31fa8e0>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:52.177029Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:52.177796Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:52.178389Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:52.178976Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:52.179521Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:52.947060Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:52.947886Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:52.948428Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:52.948961Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:53.045551Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:53.103508Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  ", "name": "SQLQuery", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:53.104271Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 34"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "SQL status: SELECT 34 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:53.204792Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\"}]", "name": "JinjaLogInfo", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:53.214557Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:53.215494Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.0161319, "process_in_blocks": "0", "process_kernel_time": 0.196041, "process_mem_max_rss": "108612", "process_out_blocks": "3768", "process_user_time": 2.072443}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.0161319, \"process_user_time\": 2.072443, \"process_kernel_time\": 0.196041, \"process_mem_max_rss\": \"108612\", \"process_out_blocks\": \"3768\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:53.224605Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:53.225387Z", "elapsed": 2.0170693, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:53.225387 after 2.02 seconds", "name": "CommandCompleted", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:53.225509Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:53.226109Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f3e0e550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f2a740a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f3a58c10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f3e0e550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f2a740a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f80f3a58c10>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:53.226668Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "95871c52-6eb2-4195-b3cb-7534f88df42a", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 267, "thread": "MainThread", "ts": "2024-05-23T05:38:53.227276Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2492ac4c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb247345be0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb247345c40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2492ac4c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb247345be0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb247345c40>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:54.687710Z"}}
{"data": {"log_version": 3, "version": "=1.8.1"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "info", "msg": "Running with dbt=1.8.1", "name": "MainReportVersion", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:54.691563Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:54.692335Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:54.696225Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '6d399108-5602-49b5-bf93-7f600284a3d9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2468646a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '6d399108-5602-49b5-bf93-7f600284a3d9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2468646a0>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:54.879962Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '6d399108-5602-49b5-bf93-7f600284a3d9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2473f3310>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '6d399108-5602-49b5-bf93-7f600284a3d9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2473f3310>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:54.942733Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:54.943927Z"}}
{"data": {"checksum": "ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838", "profile": "", "target": "", "vars": "{}", "version": "1.8.1"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "checksum: ebc509fb14e151ea268e89b60fd5abf912ed99129f87516462718fa2f14f4838, vars: {}, profile: , target: , version: 1.8.1", "name": "StateCheckVarsHash", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:54.968688Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:55.240682Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:55.241398Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '6d399108-5602-49b5-bf93-7f600284a3d9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2466b9130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '6d399108-5602-49b5-bf93-7f600284a3d9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2466b9130>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:55.321549Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '6d399108-5602-49b5-bf93-7f600284a3d9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2464bcfa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '6d399108-5602-49b5-bf93-7f600284a3d9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2464bcfa0>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:55.567130Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:55.568005Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '6d399108-5602-49b5-bf93-7f600284a3d9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2464bcee0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '6d399108-5602-49b5-bf93-7f600284a3d9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2464bcee0>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:55.568596Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:55.569370Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:55.569964Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:55.570509Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:55.571073Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.350235Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.351182Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.351735Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.352288Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.446855Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.518833Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.519519Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.617235Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.618002Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.618572Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 35"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "SQL status: SELECT 35 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.719938Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.731246Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.1\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  ", "name": "SQLQuery", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.731921Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "SQL status: SELECT 1 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.831647Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9202764504\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"fe3545e1-5650-42a4-9b0b-88a42a4996e7\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9202764504\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]", "name": "JinjaLogInfo", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.840384Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.841203Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.935900Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.3429732, "process_in_blocks": "0", "process_kernel_time": 0.188564, "process_mem_max_rss": "108432", "process_out_blocks": "3752", "process_user_time": 2.094266}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.3429732, \"process_user_time\": 2.094266, \"process_kernel_time\": 0.188564, \"process_mem_max_rss\": \"108432\", \"process_out_blocks\": \"3752\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.944955Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-23T05:38:56.945751Z", "elapsed": 2.3439376, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:56.945751 after 2.34 seconds", "name": "CommandCompleted", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.945875Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.946489Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2492ac4c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb246800250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb247f111c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb2492ac4c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb246800250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb247f111c0>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.947104Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "6d399108-5602-49b5-bf93-7f600284a3d9", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 270, "thread": "MainThread", "ts": "2024-05-23T05:38:56.947676Z"}}
