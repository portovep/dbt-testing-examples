{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea79d2490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea80cc400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea80cceb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea79d2490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea80cc400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea80cceb0>]}", "name": "SendingEvent", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.189829Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.193550Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'version_check': 'True', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'static_parser': 'True', 'introspect': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'target_path': 'None', 'invocation_command': 'dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.194356Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '4cfba27c-b557-4faf-aadf-7f6d53575cea', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea588af70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '4cfba27c-b557-4faf-aadf-7f6d53575cea', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea588af70>]}", "name": "SendingEvent", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.302046Z"}}
{"data": {"path": "/tmp/dbt-downloads-ykjbxj7x"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-ykjbxj7x'", "name": "DepsSetDownloadDirectory", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.303595Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M022", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Making package index registry request: GET https://hub.getdbt.com/api/v1/index.json", "name": "RegistryIndexProgressGETRequest", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.304401Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M023", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Response from registry index: GET https://hub.getdbt.com/api/v1/index.json 200", "name": "RegistryIndexProgressGETResponse", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.346462Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json", "name": "RegistryProgressGETRequest", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.348011Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json 200", "name": "RegistryProgressGETResponse", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.382999Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json", "name": "RegistryProgressGETRequest", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.389158Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json 200", "name": "RegistryProgressGETResponse", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.428100Z"}}
{"data": {"lock_filepath": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml"}, "info": {"category": "", "code": "M031", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "info", "msg": "Updating lock file in file path: /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml", "name": "DepsLockUpdating", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.451953Z"}}
{"data": {"path": "/tmp/dbt-downloads-f_41ysrl"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-f_41ysrl'", "name": "DepsSetDownloadDirectory", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.454726Z"}}
{"data": {"package_name": "dbt-labs/dbt_utils"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "info", "msg": "Installing dbt-labs/dbt_utils", "name": "DepsStartPackageInstall", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.465162Z"}}
{"data": {"version_name": "version 0.8.6"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "info", "msg": "Installed from version 0.8.6", "name": "DepsInstallInfo", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.585584Z"}}
{"data": {"version_latest": "1.1.1"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "info", "msg": "Updated version available: 1.1.1", "name": "DepsUpdateAvailable", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.586357Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '4cfba27c-b557-4faf-aadf-7f6d53575cea', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea58d50d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea812bf70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '4cfba27c-b557-4faf-aadf-7f6d53575cea', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea58d50d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea812bf70>]}", "name": "SendingEvent", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.587068Z"}}
{"data": {"package_name": "elementary-data/elementary"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "info", "msg": "Installing elementary-data/elementary", "name": "DepsStartPackageInstall", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.587720Z"}}
{"data": {"version_name": "version 0.13.0"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "info", "msg": "Installed from version 0.13.0", "name": "DepsInstallInfo", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.724513Z"}}
{"data": {"version_latest": "0.14.1"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "info", "msg": "Updated version available: 0.14.1", "name": "DepsUpdateAvailable", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.725314Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '4cfba27c-b557-4faf-aadf-7f6d53575cea', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea58c7df0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea80cc220>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '4cfba27c-b557-4faf-aadf-7f6d53575cea', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea58c7df0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea80cc220>]}", "name": "SendingEvent", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.726032Z"}}
{"data": {"msg": ""}, "info": {"category": "", "code": "Z017", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "info", "msg": "", "name": "Formatting", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.726709Z"}}
{"data": {"packages": ["dbt-labs/dbt_utils", "elementary-data/elementary"]}, "info": {"category": "", "code": "M019", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "info", "msg": "Updates available for packages: ['dbt-labs/dbt_utils', 'elementary-data/elementary']                 \nUpdate your versions in packages.yml, then run dbt deps", "name": "DepsNotifyUpdatesAvailable", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.727308Z"}}
{"data": {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.59079933, "process_in_blocks": "0", "process_kernel_time": 0.23151, "process_mem_max_rss": "94988", "process_out_blocks": "7056", "process_user_time": 2.458798}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Resource report: {\"command_name\": \"deps\", \"command_success\": true, \"command_wall_clock_time\": 0.59079933, \"process_user_time\": 2.458798, \"process_kernel_time\": 0.23151, \"process_mem_max_rss\": \"94988\", \"process_out_blocks\": \"7056\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.728858Z"}}
{"data": {"command": "dbt deps", "completed_at": "2024-04-08T05:36:40.729725Z", "elapsed": 0.5919156, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Command `dbt deps` succeeded at 05:36:40.729725 after 0.59 seconds", "name": "CommandCompleted", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.729923Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea79d2490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea58a21c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea592e100>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea79d2490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea58a21c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efea592e100>]}", "name": "SendingEvent", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.730689Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "4cfba27c-b557-4faf-aadf-7f6d53575cea", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 86, "thread": "MainThread", "ts": "2024-04-08T05:36:40.731313Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9254f12b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f925560b640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f925560b3d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9254f12b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f925560b640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f925560b3d0>]}", "name": "SendingEvent", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:43.147808Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:43.151555Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'debug': 'False', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:43.152402Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:43.156361Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92525ebf40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92525ebf40>]}", "name": "SendingEvent", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:43.352577Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92525824c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92525824c0>]}", "name": "SendingEvent", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:43.455164Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:43.456161Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:43.473664Z"}}
{"data": {"reason": "saved manifest not found. Starting full parse."}, "info": {"category": "", "code": "I024", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "info", "msg": "Unable to do partial parsing because saved manifest not found. Starting full parse.", "name": "UnableToPartialParse", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:43.474649Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'partial_parser', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92521ede20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92521ede20>]}", "name": "SendingEvent", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:43.475307Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92501740d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92501740d0>]}", "name": "SendingEvent", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:48.546059Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92502bf3d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92502bf3d0>]}", "name": "SendingEvent", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:48.629951Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:48.630761Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92502bf520>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '24b0a8b7-bb31-450a-80a0-62d06b23978e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92502bf520>]}", "name": "SendingEvent", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:48.631406Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:48.632429Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:48.633072Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:48.633713Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:48.634320Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.353114Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.354130Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.354746Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.355355Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.443897Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.461274Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.474789Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.475443Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.564057Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.564807Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.565498Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.656488Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, metadata, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, snapshot_run_results, anomaly_threshold_sensitivity, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, model_run_results, dbt_artifacts_hashes, job_run_results", "name": "ListRelations", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.666300Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.673588Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  ", "name": "SQLQuery", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.674254Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "SQL status: SELECT 1 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.763743Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"8595083293\", \"run_started_at\": \"2024-04-08 05:35:02\", \"run_completed_at\": \"2024-04-08 05:35:30\", \"generated_at\": \"2024-04-08 05:35:30\", \"created_at\": \"2024-04-08T05:35:30.652198\", \"command\": \"run\", \"dbt_version\": \"1.6.3\", \"elementary_version\": \"0.13.0\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"37097870cb31838bb4d5faff06dac26367a466d0\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8595083293\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8595083293\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"8595083293\", \"run_started_at\": \"2024-04-08 05:35:02\", \"run_completed_at\": \"2024-04-08 05:35:30\", \"generated_at\": \"2024-04-08 05:35:30\", \"created_at\": \"2024-04-08T05:35:30.652198\", \"command\": \"run\", \"dbt_version\": \"1.6.3\", \"elementary_version\": \"0.13.0\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"37097870cb31838bb4d5faff06dac26367a466d0\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8595083293\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8595083293\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]", "name": "JinjaLogInfo", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.773010Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.773907Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.862575Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 6.7701764, "process_in_blocks": "0", "process_kernel_time": 0.188079, "process_mem_max_rss": "127932", "process_out_blocks": "7104", "process_user_time": 7.619224}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 6.7701764, \"process_user_time\": 7.619224, \"process_kernel_time\": 0.188079, \"process_mem_max_rss\": \"127932\", \"process_out_blocks\": \"7104\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.865357Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:36:49.866182Z", "elapsed": 6.771237, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:36:49.866182 after 6.77 seconds", "name": "CommandCompleted", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.866379Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.867048Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9254f12b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92510f3c70>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92525824c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9254f12b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92510f3c70>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f92525824c0>]}", "name": "SendingEvent", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.867693Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "24b0a8b7-bb31-450a-80a0-62d06b23978e", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 88, "thread": "MainThread", "ts": "2024-04-08T05:36:49.868349Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc17562eb20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc175d28640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc175d283d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc17562eb20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc175d28640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc175d283d0>]}", "name": "SendingEvent", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.307219Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.311091Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.311976Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.316046Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '5d1b8b48-e9ef-4434-b893-98f73205e189', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc1729ecf40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '5d1b8b48-e9ef-4434-b893-98f73205e189', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc1729ecf40>]}", "name": "SendingEvent", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.514208Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '5d1b8b48-e9ef-4434-b893-98f73205e189', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc1729824c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '5d1b8b48-e9ef-4434-b893-98f73205e189', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc1729824c0>]}", "name": "SendingEvent", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.617244Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.618446Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.636633Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.758269Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.759050Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '5d1b8b48-e9ef-4434-b893-98f73205e189', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc172599fd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '5d1b8b48-e9ef-4434-b893-98f73205e189', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc172599fd0>]}", "name": "SendingEvent", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.770644Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '5d1b8b48-e9ef-4434-b893-98f73205e189', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc171c6d070>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '5d1b8b48-e9ef-4434-b893-98f73205e189', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc171c6d070>]}", "name": "SendingEvent", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.853030Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.853954Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '5d1b8b48-e9ef-4434-b893-98f73205e189', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc171c6d100>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '5d1b8b48-e9ef-4434-b893-98f73205e189', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc171c6d100>]}", "name": "SendingEvent", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.854648Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.855751Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.856426Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.857094Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:52.857751Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.589857Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.590735Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.594248Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.595043Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.685473Z"}}
{"data": {"msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "info", "msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]", "name": "JinjaLogInfo", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.699767Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.700527Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.4480978, "process_in_blocks": "0", "process_kernel_time": 0.184018, "process_mem_max_rss": "110996", "process_out_blocks": "3648", "process_user_time": 2.63627}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.4480978, \"process_user_time\": 2.63627, \"process_kernel_time\": 0.184018, \"process_mem_max_rss\": \"110996\", \"process_out_blocks\": \"3648\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.702816Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:36:53.703561Z", "elapsed": 1.4490738, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:36:53.703561 after 1.45 seconds", "name": "CommandCompleted", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.703757Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.704423Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc17562eb20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc172851a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc1721d60d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc17562eb20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc172851a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc1721d60d0>]}", "name": "SendingEvent", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.705039Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "5d1b8b48-e9ef-4434-b893-98f73205e189", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 94, "thread": "MainThread", "ts": "2024-04-08T05:36:53.705730Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8563350b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8563a4a640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8563a4a3d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8563350b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8563a4a640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8563a4a3d0>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.147280Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.151111Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'debug': 'False', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.151931Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.155940Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '25c072a0-ac53-4fa0-99eb-41f1717e4531', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8560c8bf40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '25c072a0-ac53-4fa0-99eb-41f1717e4531', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8560c8bf40>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.354402Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '25c072a0-ac53-4fa0-99eb-41f1717e4531', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85609c24c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '25c072a0-ac53-4fa0-99eb-41f1717e4531', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85609c24c0>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.457054Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.458203Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.476083Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.598268Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.599036Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '25c072a0-ac53-4fa0-99eb-41f1717e4531', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85601d8fd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '25c072a0-ac53-4fa0-99eb-41f1717e4531', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85601d8fd0>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.610587Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '25c072a0-ac53-4fa0-99eb-41f1717e4531', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f855f9b0070>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '25c072a0-ac53-4fa0-99eb-41f1717e4531', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f855f9b0070>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.690944Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.691770Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '25c072a0-ac53-4fa0-99eb-41f1717e4531', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f855f9b0100>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '25c072a0-ac53-4fa0-99eb-41f1717e4531', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f855f9b0100>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.692436Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.693502Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.694165Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.694788Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:56.695397Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.418766Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.419656Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.420276Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.420895Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.510221Z"}}
{"data": {"msg": "Elementary: \"neondb.dbt_testing_example_elementary\""}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "info", "msg": "Elementary: \"neondb.dbt_testing_example_elementary\"", "name": "JinjaLogInfo", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.526804Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.527610Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.4353726, "process_in_blocks": "0", "process_kernel_time": 0.21197, "process_mem_max_rss": "111084", "process_out_blocks": "3648", "process_user_time": 2.599635}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.4353726, \"process_user_time\": 2.599635, \"process_kernel_time\": 0.21197, \"process_mem_max_rss\": \"111084\", \"process_out_blocks\": \"3648\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.529869Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:36:57.530586Z", "elapsed": 1.4363148, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:36:57.530586 after 1.44 seconds", "name": "CommandCompleted", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.530778Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.531444Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8563350b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8560591a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f856051e0d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8563350b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8560591a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f856051e0d0>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.532052Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "25c072a0-ac53-4fa0-99eb-41f1717e4531", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 97, "thread": "MainThread", "ts": "2024-04-08T05:36:57.532703Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2834d78b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2835472640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28354723d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2834d78b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2835472640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28354723d0>]}", "name": "SendingEvent", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:36:59.958159Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:36:59.962080Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'log_format': 'json', 'static_parser': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:36:59.962894Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:36:59.966915Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '29eb4deb-aea2-4c9a-b168-fb5027df9f57', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28326b3f40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '29eb4deb-aea2-4c9a-b168-fb5027df9f57', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28326b3f40>]}", "name": "SendingEvent", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.164793Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '29eb4deb-aea2-4c9a-b168-fb5027df9f57', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28323c24c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '29eb4deb-aea2-4c9a-b168-fb5027df9f57', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28323c24c0>]}", "name": "SendingEvent", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.267566Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.268558Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.285930Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.404853Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.405585Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '29eb4deb-aea2-4c9a-b168-fb5027df9f57', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2831bdbfd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '29eb4deb-aea2-4c9a-b168-fb5027df9f57', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2831bdbfd0>]}", "name": "SendingEvent", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.416579Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '29eb4deb-aea2-4c9a-b168-fb5027df9f57', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28313af070>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '29eb4deb-aea2-4c9a-b168-fb5027df9f57', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28313af070>]}", "name": "SendingEvent", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.489392Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.490252Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '29eb4deb-aea2-4c9a-b168-fb5027df9f57', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28313af100>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '29eb4deb-aea2-4c9a-b168-fb5027df9f57', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28313af100>]}", "name": "SendingEvent", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.490914Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.491959Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.492618Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.493237Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:00.493879Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:01.218320Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:01.219301Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:01.219916Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:01.220525Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:01.312317Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:01.387280Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  ", "name": "SQLQuery", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:01.388186Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 112"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "SQL status: SELECT 112 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:01.842103Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:01.858047Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  ", "name": "SQLQuery", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:01.858760Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:01.952354Z"}}
{"data": {"msg": "Elementary: [{\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-04T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-05T05:34:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-07T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-04T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-05T05:34:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-07T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-04T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-05T05:34:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-07T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-04T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-05T05:34:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-07T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-02T05:34:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-04T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-06T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-07T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-04T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-06T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-07T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-03T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-04T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-05T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-07T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-03T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-04T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-05T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-07T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-04T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-06T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-07T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-04T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-06T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-07T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-03T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-04T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-06T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-07T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-03T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-04T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-06T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-07T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-04T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-05T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-06T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-07T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-08T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-04T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-05T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-06T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-07T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-08T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-04T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-05T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-06T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-07T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-08T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-04T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-05T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-06T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-07T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-08T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "info", "msg": "Elementary: [{\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-04T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-05T05:34:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-07T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-04T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-05T05:34:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-07T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-04T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-05T05:34:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-07T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-04T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-05T05:34:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-07T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-02T05:34:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-04T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-06T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-07T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-04T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-06T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-07T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-03T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-04T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-05T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-07T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-03T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-04T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-05T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-06T05:34:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-07T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-08T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-04T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-06T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-07T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-04T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-06T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-07T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-03T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-04T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-06T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-07T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-03T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-04T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-05T05:34:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-06T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-07T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-08T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-04T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-05T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-06T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-07T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-08T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-04T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-05T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-06T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-07T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-08T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-04T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-05T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-06T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-07T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-08T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe\", \"test_execution_id\": \"a5f29f80-9aba-4a5d-9545-09721e9d9bfe.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-04T05:34:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d\", \"test_execution_id\": \"3b2c8c98-51b1-4bca-aa28-f5e93d6e014d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-05T05:34:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c\", \"test_execution_id\": \"903a9c45-bb6c-4337-bc0b-b8aff0691f3c.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-06T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f\", \"test_execution_id\": \"9153a25c-69f5-45f9-8be0-f7bab841111f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-07T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5\", \"test_execution_id\": \"ef033d4e-7d2c-4eed-9b8e-6869562cffb5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-08T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]", "name": "JinjaLogInfo", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:02.013452Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:02.029985Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.1273417, "process_in_blocks": "0", "process_kernel_time": 0.188066, "process_mem_max_rss": "112968", "process_out_blocks": "4728", "process_user_time": 2.772982}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.1273417, \"process_user_time\": 2.772982, \"process_kernel_time\": 0.188066, \"process_mem_max_rss\": \"112968\", \"process_out_blocks\": \"4728\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:02.032366Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:37:02.033107Z", "elapsed": 2.12831, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:02.033107 after 2.13 seconds", "name": "CommandCompleted", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:02.033301Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:02.033990Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2834d78b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2831f90a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2831f160d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2834d78b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2831f90a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2831f160d0>]}", "name": "SendingEvent", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:02.034596Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "29eb4deb-aea2-4c9a-b168-fb5027df9f57", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 99, "thread": "MainThread", "ts": "2024-04-08T05:37:02.035234Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9486937af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f948827d580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9487048b20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9486937af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f948827d580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9487048b20>]}", "name": "SendingEvent", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.435005Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.439026Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'static_parser': 'True', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.439862Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.443874Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '3e31286e-950f-4074-816b-41830d4350a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f948827d580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '3e31286e-950f-4074-816b-41830d4350a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f948827d580>]}", "name": "SendingEvent", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.639384Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '3e31286e-950f-4074-816b-41830d4350a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9484888400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '3e31286e-950f-4074-816b-41830d4350a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9484888400>]}", "name": "SendingEvent", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.742033Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.743165Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.761165Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.880996Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.881790Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '3e31286e-950f-4074-816b-41830d4350a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f94837dcf40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '3e31286e-950f-4074-816b-41830d4350a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f94837dcf40>]}", "name": "SendingEvent", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.893277Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '3e31286e-950f-4074-816b-41830d4350a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9483b86b50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '3e31286e-950f-4074-816b-41830d4350a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9483b86b50>]}", "name": "SendingEvent", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.972483Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.973320Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '3e31286e-950f-4074-816b-41830d4350a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9483bfac40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '3e31286e-950f-4074-816b-41830d4350a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9483bfac40>]}", "name": "SendingEvent", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.974011Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.975076Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.975730Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.976362Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:04.976967Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:05.713902Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:05.714855Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:05.715472Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:05.716083Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:05.806492Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:05.850397Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:05.851159Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:05.941668Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:05.942501Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:05.943132Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 17"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "SQL status: SELECT 17 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.038681Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.047490Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.048180Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 22"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "SQL status: SELECT 22 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.141076Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.179222Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  ", "name": "SQLQuery", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.180015Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.272293Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.280870Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.281648Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.372116Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.9927735, "process_in_blocks": "0", "process_kernel_time": 0.156409, "process_mem_max_rss": "110988", "process_out_blocks": "3672", "process_user_time": 2.718065}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.9927735, \"process_user_time\": 2.718065, \"process_kernel_time\": 0.156409, \"process_mem_max_rss\": \"110988\", \"process_out_blocks\": \"3672\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.374993Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:37:06.375748Z", "elapsed": 1.9937731, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:06.375748 after 1.99 seconds", "name": "CommandCompleted", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.375944Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.376616Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9486937af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f948362be20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9483acf100>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9486937af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f948362be20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9483acf100>]}", "name": "SendingEvent", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.377231Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "3e31286e-950f-4074-816b-41830d4350a2", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 101, "thread": "MainThread", "ts": "2024-04-08T05:37:06.377934Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26eb8dab20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26ebfe0640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26ebfe03d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26eb8dab20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26ebfe0640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26ebfe03d0>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:08.818727Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:08.822450Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'version_check': 'True', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:08.823296Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:08.827270Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e8f6df40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e8f6df40>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.023677Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e8f024c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e8f024c0>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.126259Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.127302Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.144678Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.264236Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.264927Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e87dbfd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e87dbfd0>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.275739Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e7ef0070>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e7ef0070>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.353979Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.354797Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e7ef0100>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e7ef0100>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.355460Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.356476Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.357133Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.357788Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:09.358414Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.081805Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.082788Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.083406Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.084020Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.172667Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.191507Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.204714Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.205354Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.294428Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.295254Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.295888Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.386978Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, metadata, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, snapshot_run_results, anomaly_threshold_sensitivity, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, model_run_results, dbt_artifacts_hashes, job_run_results", "name": "ListRelations", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.396417Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.408063Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.408726Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "SQL status: SELECT 19 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.506941Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.516977Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  ", "name": "SQLQuery", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.517694Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 4"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "SQL status: SELECT 4 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.607208Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}, {\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "info", "msg": "Elementary: [{\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}, {\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}]", "name": "JinjaLogInfo", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.615919Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.616757Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.705378Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.9416579, "process_in_blocks": "0", "process_kernel_time": 0.139909, "process_mem_max_rss": "110988", "process_out_blocks": "3680", "process_user_time": 2.726234}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.9416579, \"process_user_time\": 2.726234, \"process_kernel_time\": 0.139909, \"process_mem_max_rss\": \"110988\", \"process_out_blocks\": \"3680\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.707792Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:37:10.708497Z", "elapsed": 1.9425846, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:10.708497 after 1.94 seconds", "name": "CommandCompleted", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.708688Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.709337Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26eb8dab20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e8ad1a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e8a560d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26eb8dab20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e8ad1a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f26e8a560d0>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.710012Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "04b73f8c-5a3b-4774-83ea-44a7d8c3c0f1", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 103, "thread": "MainThread", "ts": "2024-04-08T05:37:10.710659Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c19f20490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1a6273d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1a627a00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c19f20490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1a6273d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1a627a00>]}", "name": "SendingEvent", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.108741Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.112598Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.113424Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.117376Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'ae8ada61-8c81-43af-aa3a-f1bcecf51af1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1b84c520>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ae8ada61-8c81-43af-aa3a-f1bcecf51af1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1b84c520>]}", "name": "SendingEvent", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.312831Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'ae8ada61-8c81-43af-aa3a-f1bcecf51af1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c17161d30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ae8ada61-8c81-43af-aa3a-f1bcecf51af1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c17161d30>]}", "name": "SendingEvent", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.414669Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.415627Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.432986Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.550878Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.551551Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'ae8ada61-8c81-43af-aa3a-f1bcecf51af1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c16dd8fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ae8ada61-8c81-43af-aa3a-f1bcecf51af1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c16dd8fa0>]}", "name": "SendingEvent", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.561968Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'ae8ada61-8c81-43af-aa3a-f1bcecf51af1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1656f040>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ae8ada61-8c81-43af-aa3a-f1bcecf51af1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1656f040>]}", "name": "SendingEvent", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.639406Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.640225Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'ae8ada61-8c81-43af-aa3a-f1bcecf51af1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1656f0a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ae8ada61-8c81-43af-aa3a-f1bcecf51af1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1656f0a0>]}", "name": "SendingEvent", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.640882Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.641934Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.642582Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.643199Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:13.643795Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.388823Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.389847Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.390469Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.391080Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.484644Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.502540Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.516028Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.516689Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.607955Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.608764Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.609391Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.702886Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, metadata, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, snapshot_run_results, anomaly_threshold_sensitivity, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, model_run_results, dbt_artifacts_hashes, job_run_results", "name": "ListRelations", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.712570Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.719881Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  ", "name": "SQLQuery", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.720550Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 2"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "SQL status: SELECT 2 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.812190Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}, {\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "info", "msg": "Elementary: [{\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}, {\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}]", "name": "JinjaLogInfo", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.820486Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.821269Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.912627Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.8589807, "process_in_blocks": "0", "process_kernel_time": 0.207339, "process_mem_max_rss": "111132", "process_out_blocks": "3680", "process_user_time": 2.619655}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.8589807, \"process_user_time\": 2.619655, \"process_kernel_time\": 0.207339, \"process_mem_max_rss\": \"111132\", \"process_out_blocks\": \"3680\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.915209Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:37:14.915944Z", "elapsed": 1.8599385, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:14.915944 after 1.86 seconds", "name": "CommandCompleted", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.916136Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.916783Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c19f20490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1b84c520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c17161d30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c19f20490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c1b84c520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7c17161d30>]}", "name": "SendingEvent", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.917384Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "ae8ada61-8c81-43af-aa3a-f1bcecf51af1", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 105, "thread": "MainThread", "ts": "2024-04-08T05:37:14.918093Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850ccd1490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850d3d63d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850d3d6a00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850ccd1490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850d3d63d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850d3d6a00>]}", "name": "SendingEvent", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.330050Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.333716Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.334516Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.338416Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'c5e476d6-7b77-45cc-b78c-01a63df70d8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850e5f9520>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'c5e476d6-7b77-45cc-b78c-01a63df70d8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850e5f9520>]}", "name": "SendingEvent", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.534429Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'c5e476d6-7b77-45cc-b78c-01a63df70d8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8509ee0d30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'c5e476d6-7b77-45cc-b78c-01a63df70d8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8509ee0d30>]}", "name": "SendingEvent", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.636937Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.637978Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.655346Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.775005Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.775757Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'c5e476d6-7b77-45cc-b78c-01a63df70d8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8509bd8fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'c5e476d6-7b77-45cc-b78c-01a63df70d8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8509bd8fa0>]}", "name": "SendingEvent", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.787169Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'c5e476d6-7b77-45cc-b78c-01a63df70d8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85092ef040>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'c5e476d6-7b77-45cc-b78c-01a63df70d8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85092ef040>]}", "name": "SendingEvent", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.868069Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.868911Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'c5e476d6-7b77-45cc-b78c-01a63df70d8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85092ef0a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'c5e476d6-7b77-45cc-b78c-01a63df70d8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85092ef0a0>]}", "name": "SendingEvent", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.869598Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.870648Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.871290Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.871897Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:17.872490Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.599087Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.600066Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.600682Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.601312Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.690598Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.710491Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.723724Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.724373Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.813652Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.814395Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.815036Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.909468Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, metadata, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, snapshot_run_results, anomaly_threshold_sensitivity, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, model_run_results, dbt_artifacts_hashes, job_run_results", "name": "ListRelations", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.919037Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.931150Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:18.931822Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "SQL status: SELECT 19 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.025465Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.033367Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.034062Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "SQL status: SELECT 19 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.125051Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.134137Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries\n                  \n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries\n                  \n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  ", "name": "SQLQuery", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.134840Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.229422Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.237927Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.238674Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.328199Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.0532484, "process_in_blocks": "0", "process_kernel_time": 0.151963, "process_mem_max_rss": "111408", "process_out_blocks": "3680", "process_user_time": 2.727306}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.0532484, \"process_user_time\": 2.727306, \"process_kernel_time\": 0.151963, \"process_mem_max_rss\": \"111408\", \"process_out_blocks\": \"3680\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.330730Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:37:19.331448Z", "elapsed": 2.0541909, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:19.331448 after 2.05 seconds", "name": "CommandCompleted", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.331643Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.332287Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850ccd1490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850e5f9520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8509ee0d30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850ccd1490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f850e5f9520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8509ee0d30>]}", "name": "SendingEvent", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.332888Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "c5e476d6-7b77-45cc-b78c-01a63df70d8b", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 107, "thread": "MainThread", "ts": "2024-04-08T05:37:19.333564Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d4028b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d4723640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d47233d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d4028b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d4723640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d47233d0>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:21.735943Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:21.739756Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:21.740578Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:21.744658Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'ba87a7e9-d332-4853-be73-6f9dfd1cd41b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d13ecf40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ba87a7e9-d332-4853-be73-6f9dfd1cd41b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d13ecf40>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:21.940737Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'ba87a7e9-d332-4853-be73-6f9dfd1cd41b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d13824c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ba87a7e9-d332-4853-be73-6f9dfd1cd41b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d13824c0>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.042912Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.043954Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.061310Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.180488Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.181223Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'ba87a7e9-d332-4853-be73-6f9dfd1cd41b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d0f9bfd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ba87a7e9-d332-4853-be73-6f9dfd1cd41b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d0f9bfd0>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.192280Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'ba87a7e9-d332-4853-be73-6f9dfd1cd41b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d066f070>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ba87a7e9-d332-4853-be73-6f9dfd1cd41b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d066f070>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.266006Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.266837Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'ba87a7e9-d332-4853-be73-6f9dfd1cd41b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d066f100>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ba87a7e9-d332-4853-be73-6f9dfd1cd41b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d066f100>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.267488Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.268547Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.269194Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.269870Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:22.270470Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.012027Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.013007Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.013654Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.014266Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.105589Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.164649Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  ", "name": "SQLQuery", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.165341Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 28"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "SQL status: SELECT 28 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.358007Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"16f49593-0239-42da-bedb-bf31baed825d\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-04 05:35:30\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"16f49593-0239-42da-bedb-bf31baed825d\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-04 05:35:30\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"16f49593-0239-42da-bedb-bf31baed825d\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-04 05:35:30\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"16f49593-0239-42da-bedb-bf31baed825d\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-04 05:35:30\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"e0f87458-bcb8-4d3b-8f9b-dbdb8f7d6b7a\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-05 05:35:54\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"e0f87458-bcb8-4d3b-8f9b-dbdb8f7d6b7a\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-05 05:35:54\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"e0f87458-bcb8-4d3b-8f9b-dbdb8f7d6b7a\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-05 05:35:54\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"e0f87458-bcb8-4d3b-8f9b-dbdb8f7d6b7a\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-05 05:35:54\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"c55d6bde-e1ef-4c39-988b-19bc0d047e06\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-06 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"c55d6bde-e1ef-4c39-988b-19bc0d047e06\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-06 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"c55d6bde-e1ef-4c39-988b-19bc0d047e06\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-06 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"c55d6bde-e1ef-4c39-988b-19bc0d047e06\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-06 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"8234bd30-4a1c-4997-87b6-4a494afa9342\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-07 05:35:46\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"8234bd30-4a1c-4997-87b6-4a494afa9342\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-07 05:35:46\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"8234bd30-4a1c-4997-87b6-4a494afa9342\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-07 05:35:46\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"8234bd30-4a1c-4997-87b6-4a494afa9342\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-07 05:35:47\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-08 05:35:29\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-08 05:35:29\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-08 05:35:29\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-08 05:35:29\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"16f49593-0239-42da-bedb-bf31baed825d\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-04 05:35:30\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"16f49593-0239-42da-bedb-bf31baed825d\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-04 05:35:30\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"16f49593-0239-42da-bedb-bf31baed825d\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-04 05:35:30\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"16f49593-0239-42da-bedb-bf31baed825d\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-04 05:35:30\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"e0f87458-bcb8-4d3b-8f9b-dbdb8f7d6b7a\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-05 05:35:54\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"e0f87458-bcb8-4d3b-8f9b-dbdb8f7d6b7a\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-05 05:35:54\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"e0f87458-bcb8-4d3b-8f9b-dbdb8f7d6b7a\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-05 05:35:54\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"e0f87458-bcb8-4d3b-8f9b-dbdb8f7d6b7a\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-05 05:35:54\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"c55d6bde-e1ef-4c39-988b-19bc0d047e06\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-06 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"c55d6bde-e1ef-4c39-988b-19bc0d047e06\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-06 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"c55d6bde-e1ef-4c39-988b-19bc0d047e06\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-06 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"c55d6bde-e1ef-4c39-988b-19bc0d047e06\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-06 05:35:58\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"8234bd30-4a1c-4997-87b6-4a494afa9342\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-07 05:35:46\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"8234bd30-4a1c-4997-87b6-4a494afa9342\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-07 05:35:46\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"8234bd30-4a1c-4997-87b6-4a494afa9342\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-07 05:35:46\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"8234bd30-4a1c-4997-87b6-4a494afa9342\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-07 05:35:47\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-08 05:35:29\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-08 05:35:29\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-08 05:35:29\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-08 05:35:29\"}]", "name": "JinjaLogInfo", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.371881Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.373930Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.6925085, "process_in_blocks": "0", "process_kernel_time": 0.119879, "process_mem_max_rss": "111164", "process_out_blocks": "3752", "process_user_time": 2.72526}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.6925085, \"process_user_time\": 2.72526, \"process_kernel_time\": 0.119879, \"process_mem_max_rss\": \"111164\", \"process_out_blocks\": \"3752\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.376239Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:37:23.376958Z", "elapsed": 1.6934586, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:23.376958 after 1.69 seconds", "name": "CommandCompleted", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.377149Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.377843Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d4028b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d1250a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d0bd60d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d4028b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d1250a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4d0bd60d0>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.378451Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "ba87a7e9-d332-4853-be73-6f9dfd1cd41b", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 109, "thread": "MainThread", "ts": "2024-04-08T05:37:23.379103Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2358c99f40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f235a5c15b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f235939d7f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2358c99f40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f235a5c15b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f235939d7f0>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:25.779538Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:25.783423Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'static_parser': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:25.784288Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:25.788250Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'a09e529d-a691-486c-918b-27279658d3c1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f23593aca60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'a09e529d-a691-486c-918b-27279658d3c1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f23593aca60>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:25.984021Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'a09e529d-a691-486c-918b-27279658d3c1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f235939d5e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'a09e529d-a691-486c-918b-27279658d3c1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f235939d5e0>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.086870Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.087910Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.105408Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.224029Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.224687Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'a09e529d-a691-486c-918b-27279658d3c1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2355bd9f40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'a09e529d-a691-486c-918b-27279658d3c1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2355bd9f40>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.235221Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'a09e529d-a691-486c-918b-27279658d3c1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2355f5df40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'a09e529d-a691-486c-918b-27279658d3c1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2355f5df40>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.310626Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.311450Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'a09e529d-a691-486c-918b-27279658d3c1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2355f3ad90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'a09e529d-a691-486c-918b-27279658d3c1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2355f3ad90>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.312101Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.313167Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.313876Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.314498Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:26.315100Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.035713Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.036675Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.037295Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.037962Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.126506Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.144295Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.157789Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.158449Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.247065Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.247940Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.248571Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.339295Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, metadata, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, snapshot_run_results, anomaly_threshold_sensitivity, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, model_run_results, dbt_artifacts_hashes, job_run_results", "name": "ListRelations", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.348993Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.356115Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  ", "name": "SQLQuery", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.356792Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "SQL status: SELECT 6 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.449734Z"}}
{"data": {"msg": "Elementary: [{\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}, {\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "info", "msg": "Elementary: [{\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}, {\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}]", "name": "JinjaLogInfo", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.458082Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.458899Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.547707Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.8236179, "process_in_blocks": "0", "process_kernel_time": 0.180047, "process_mem_max_rss": "111016", "process_out_blocks": "3672", "process_user_time": 2.656694}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.8236179, \"process_user_time\": 2.656694, \"process_kernel_time\": 0.180047, \"process_mem_max_rss\": \"111016\", \"process_out_blocks\": \"3672\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.550284Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:37:27.551011Z", "elapsed": 1.8245715, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:27.551011 after 1.82 seconds", "name": "CommandCompleted", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.551204Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.551863Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2358c99f40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f23552c6e50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2355f3a6a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2358c99f40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f23552c6e50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2355f3a6a0>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.552469Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "a09e529d-a691-486c-918b-27279658d3c1", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 111, "thread": "MainThread", "ts": "2024-04-08T05:37:27.553123Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ae168c070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ae1d05fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ae1d058b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ae168c070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ae1d05fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ae1d058b0>]}", "name": "SendingEvent", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.003193Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.007035Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.007849Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.011746Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ae1cf8340>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ae1cf8340>]}", "name": "SendingEvent", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.207013Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ade9f49a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ade9f49a0>]}", "name": "SendingEvent", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.309172Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.310281Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.327742Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.446160Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.446853Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ade1dbf70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ade1dbf70>]}", "name": "SendingEvent", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.457605Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8add9af1f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8add9af1f0>]}", "name": "SendingEvent", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.530280Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.531157Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8aded6ba30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8aded6ba30>]}", "name": "SendingEvent", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.531835Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.532888Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.533567Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.534201Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:30.534817Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.258904Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.259852Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.260480Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.261097Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.350286Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.369404Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.382742Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.383389Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.473408Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.474341Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.474986Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.571997Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, metadata, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, snapshot_run_results, anomaly_threshold_sensitivity, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, model_run_results, dbt_artifacts_hashes, job_run_results", "name": "ListRelations", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.581895Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.589707Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_models as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n            \n              where package_name != 'elementary'\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        ),\n\n        dbt_exposures as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n        )\n\n        select\n            unique_id,\n            depends_on_nodes,\n            'model' as type\n        from dbt_models\n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            'source' as type\n        from dbt_sources\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            'exposure' as type\n        from dbt_exposures\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_models as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n            \n              where package_name != 'elementary'\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        ),\n\n        dbt_exposures as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n        )\n\n        select\n            unique_id,\n            depends_on_nodes,\n            'model' as type\n        from dbt_models\n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            'source' as type\n        from dbt_sources\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            'exposure' as type\n        from dbt_exposures\n    \n  ", "name": "SQLQuery", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.590431Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "SQL status: SELECT 6 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.680681Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"type\": \"source\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"type\": \"source\"}]", "name": "JinjaLogInfo", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.689667Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.690623Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.780020Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.8322135, "process_in_blocks": "0", "process_kernel_time": 0.159932, "process_mem_max_rss": "111144", "process_out_blocks": "3672", "process_user_time": 2.670879}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.8322135, \"process_user_time\": 2.670879, \"process_kernel_time\": 0.159932, \"process_mem_max_rss\": \"111144\", \"process_out_blocks\": \"3672\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.783014Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:37:31.783797Z", "elapsed": 1.8332436, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:31.783797 after 1.83 seconds", "name": "CommandCompleted", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.783994Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.784670Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ae168c070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ade556070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8add95d3a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ae168c070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8ade556070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8add95d3a0>]}", "name": "SendingEvent", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.785281Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "e816fd04-ee3e-40f1-b9f8-4cbc30a5bec3", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 113, "thread": "MainThread", "ts": "2024-04-08T05:37:31.785983Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a33bbab20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a342b2640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a342b23d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a33bbab20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a342b2640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a342b23d0>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.191224Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.194931Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'version_check': 'True', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'log_format': 'json', 'introspect': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.195739Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.199673Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '842e31ee-ecf2-4017-ab50-70f1ceb213ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a314f3f40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '842e31ee-ecf2-4017-ab50-70f1ceb213ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a314f3f40>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.395040Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '842e31ee-ecf2-4017-ab50-70f1ceb213ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a314884c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '842e31ee-ecf2-4017-ab50-70f1ceb213ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a314884c0>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.497074Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.498182Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.515691Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.635843Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.636605Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '842e31ee-ecf2-4017-ab50-70f1ceb213ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a309d8fd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '842e31ee-ecf2-4017-ab50-70f1ceb213ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a309d8fd0>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.648030Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '842e31ee-ecf2-4017-ab50-70f1ceb213ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a301ef070>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '842e31ee-ecf2-4017-ab50-70f1ceb213ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a301ef070>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.722762Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.723591Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '842e31ee-ecf2-4017-ab50-70f1ceb213ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a301ef100>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '842e31ee-ecf2-4017-ab50-70f1ceb213ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a301ef100>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.724250Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.725290Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.725976Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.726599Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:34.727205Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.458679Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.459680Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.460298Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.460932Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.551106Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.574713Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  ", "name": "SQLQuery", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.575402Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 34"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "SQL status: SELECT 34 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.668968Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\"}]", "name": "JinjaLogInfo", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.679360Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.680354Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.5440105, "process_in_blocks": "0", "process_kernel_time": 0.184095, "process_mem_max_rss": "111280", "process_out_blocks": "3664", "process_user_time": 2.613357}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.5440105, \"process_user_time\": 2.613357, \"process_kernel_time\": 0.184095, \"process_mem_max_rss\": \"111280\", \"process_out_blocks\": \"3664\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.682721Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:37:35.683450Z", "elapsed": 1.5449678, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:35.683450 after 1.54 seconds", "name": "CommandCompleted", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.683673Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.684361Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a33bbab20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a30dd0a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a30d560d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a33bbab20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a30dd0a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8a30d560d0>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.684965Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "842e31ee-ecf2-4017-ab50-70f1ceb213ba", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 115, "thread": "MainThread", "ts": "2024-04-08T05:37:35.685635Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2050267f40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2051b915b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f205096d7f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2050267f40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2051b915b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f205096d7f0>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.092795Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.096498Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'log_format': 'json', 'static_parser': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.097317Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.101282Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '3c3db919-e9b7-4e00-b208-0ccd7775935d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f205097ca60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '3c3db919-e9b7-4e00-b208-0ccd7775935d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f205097ca60>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.298005Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '3c3db919-e9b7-4e00-b208-0ccd7775935d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f205096d5e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '3c3db919-e9b7-4e00-b208-0ccd7775935d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f205096d5e0>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.400935Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.401979Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.419662Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.538467Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.539148Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '3c3db919-e9b7-4e00-b208-0ccd7775935d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f204d1d8f40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '3c3db919-e9b7-4e00-b208-0ccd7775935d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f204d1d8f40>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.549839Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '3c3db919-e9b7-4e00-b208-0ccd7775935d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f204d55df40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '3c3db919-e9b7-4e00-b208-0ccd7775935d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f204d55df40>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.627642Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.628456Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '3c3db919-e9b7-4e00-b208-0ccd7775935d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f204d539d90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '3c3db919-e9b7-4e00-b208-0ccd7775935d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f204d539d90>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.629142Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.630225Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.630881Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.631501Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:38.632106Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.381849Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.382822Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.383433Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.384058Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.476157Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.505796Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.506453Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.598534Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.599339Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.599971Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 35"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "SQL status: SELECT 35 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.698657Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.709616Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  ", "name": "SQLQuery", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.710299Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "SQL status: SELECT 1 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.805511Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8595083293\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"1769a993-8685-44e9-8073-063469a6b7c3\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8595083293\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]", "name": "JinjaLogInfo", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.813986Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.814753Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.907298Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.8699538, "process_in_blocks": "0", "process_kernel_time": 0.207878, "process_mem_max_rss": "110892", "process_out_blocks": "3664", "process_user_time": 2.622462}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.8699538, \"process_user_time\": 2.622462, \"process_kernel_time\": 0.207878, \"process_mem_max_rss\": \"110892\", \"process_out_blocks\": \"3664\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.909779Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-08T05:37:39.910497Z", "elapsed": 1.8708951, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:39.910497 after 1.87 seconds", "name": "CommandCompleted", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.910690Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.911340Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2050267f40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f204cd2ee50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f204d5396a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f2050267f40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f204cd2ee50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f204d5396a0>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.911943Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "3c3db919-e9b7-4e00-b208-0ccd7775935d", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 117, "thread": "MainThread", "ts": "2024-04-08T05:37:39.912588Z"}}
