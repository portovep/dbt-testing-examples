{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cedac130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce92d60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce92dc0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cedac130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce92d60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce92dc0>]}", "name": "SendingEvent", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:48.617329Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:48.621033Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:48.621800Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '0bf3565e-af4b-479b-b3e6-eacfe0d67a7a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce92b50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '0bf3565e-af4b-479b-b3e6-eacfe0d67a7a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce92b50>]}", "name": "SendingEvent", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:48.752519Z"}}
{"data": {"path": "/tmp/dbt-downloads-3f3np701"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-3f3np701'", "name": "DepsSetDownloadDirectory", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:48.763757Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M022", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Making package index registry request: GET https://hub.getdbt.com/api/v1/index.json", "name": "RegistryIndexProgressGETRequest", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:48.764443Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M023", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Response from registry index: GET https://hub.getdbt.com/api/v1/index.json 200", "name": "RegistryIndexProgressGETResponse", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:48.889523Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json", "name": "RegistryProgressGETRequest", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:48.890937Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json 200", "name": "RegistryProgressGETResponse", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:48.938482Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json", "name": "RegistryProgressGETRequest", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:48.947274Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json 200", "name": "RegistryProgressGETResponse", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:48.995708Z"}}
{"data": {"lock_filepath": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml"}, "info": {"category": "", "code": "M031", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "info", "msg": "Updating lock file in file path: /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml", "name": "DepsLockUpdating", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.021748Z"}}
{"data": {"path": "/tmp/dbt-downloads-1islhe7c"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-1islhe7c'", "name": "DepsSetDownloadDirectory", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.024442Z"}}
{"data": {"package_name": "dbt-labs/dbt_utils"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "info", "msg": "Installing dbt-labs/dbt_utils", "name": "DepsStartPackageInstall", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.035083Z"}}
{"data": {"version_name": "version 0.8.6"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "info", "msg": "Installed from version 0.8.6", "name": "DepsInstallInfo", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.175256Z"}}
{"data": {"version_latest": "1.1.1"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "info", "msg": "Updated version available: 1.1.1", "name": "DepsUpdateAvailable", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.175871Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '0bf3565e-af4b-479b-b3e6-eacfe0d67a7a', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ceff57f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ceff5c40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '0bf3565e-af4b-479b-b3e6-eacfe0d67a7a', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ceff57f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ceff5c40>]}", "name": "SendingEvent", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.176457Z"}}
{"data": {"package_name": "elementary-data/elementary"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "info", "msg": "Installing elementary-data/elementary", "name": "DepsStartPackageInstall", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.177048Z"}}
{"data": {"version_name": "version 0.14.1"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "info", "msg": "Installed from version 0.14.1", "name": "DepsInstallInfo", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.336975Z"}}
{"data": {"version_latest": "0.15.2"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "info", "msg": "Updated version available: 0.15.2", "name": "DepsUpdateAvailable", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.337630Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '0bf3565e-af4b-479b-b3e6-eacfe0d67a7a', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce81400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ceff57f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '0bf3565e-af4b-479b-b3e6-eacfe0d67a7a', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce81400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ceff57f0>]}", "name": "SendingEvent", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.338243Z"}}
{"data": {"msg": ""}, "info": {"category": "", "code": "Z017", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "info", "msg": "", "name": "Formatting", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.338960Z"}}
{"data": {"packages": ["dbt-labs/dbt_utils", "elementary-data/elementary"]}, "info": {"category": "", "code": "M019", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "info", "msg": "Updates available for packages: ['dbt-labs/dbt_utils', 'elementary-data/elementary']                 \nUpdate your versions in packages.yml, then run dbt deps", "name": "DepsNotifyUpdatesAvailable", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.339546Z"}}
{"data": {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.8090051, "process_in_blocks": "0", "process_kernel_time": 0.20776, "process_mem_max_rss": "89548", "process_out_blocks": "7160", "process_user_time": 1.558203}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Resource report: {\"command_name\": \"deps\", \"command_success\": true, \"command_wall_clock_time\": 0.8090051, \"process_user_time\": 1.558203, \"process_kernel_time\": 0.20776, \"process_mem_max_rss\": \"89548\", \"process_out_blocks\": \"7160\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.340995Z"}}
{"data": {"command": "dbt deps", "completed_at": "2024-05-14T05:37:49.341762Z", "elapsed": 0.8099462, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Command `dbt deps` succeeded at 05:37:49.341762 after 0.81 seconds", "name": "CommandCompleted", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.341885Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cedac130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce81400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce92b50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cedac130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce81400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cce92b50>]}", "name": "SendingEvent", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.342542Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "0bf3565e-af4b-479b-b3e6-eacfe0d67a7a", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 227, "thread": "MainThread", "ts": "2024-05-14T05:37:49.343106Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7ee81040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7cf67310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7cf672b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7ee81040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7cf67310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7cf672b0>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:50.770409Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:50.774080Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:50.774856Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:50.778647Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7c484220>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7c484220>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:50.983245Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7d52a4f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7d52a4f0>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:51.045965Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:51.047143Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:51.073800Z"}}
{"data": {"reason": "saved manifest not found. Starting full parse."}, "info": {"category": "", "code": "I024", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "info", "msg": "Unable to do partial parsing because saved manifest not found. Starting full parse.", "name": "UnableToPartialParse", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:51.075048Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'partial_parser', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7c3a9610>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7c3a9610>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:51.075678Z"}}
{"data": {"deprecated_path": "tests", "exp_path": "data_tests"}, "info": {"category": "", "code": "D012", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "warn", "msg": "[\u001b[33mWARNING\u001b[0m]: Deprecated functionality\nThe `tests` config has been renamed to `data_tests`. Please see\nhttps://docs.getdbt.com/docs/build/data-tests#new-data_tests-syntax for more\ninformation.", "name": "TestsConfigDeprecation", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:55.813427Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'deprecation', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7b58cdc0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7b58cdc0>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:55.814245Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7b59cd90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7b59cd90>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:56.207596Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7bc76c70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7bc76c70>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:56.408585Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:56.409386Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7c0c9c10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '73d76fea-02d8-4c57-a955-cdefb0438ceb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7c0c9c10>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:56.409957Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:56.410765Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:56.411342Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:56.411878Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:56.412401Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.198353Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.199311Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.199944Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.200471Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.295555Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.312592Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.356497Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.357107Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.452447Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.453195Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.453779Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.551213Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_dbt_tests, alerts_dbt_models, enriched_columns, metrics_anomaly_score, alerts_schema_changes, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity", "name": "ListRelations", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.558389Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.565230Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  ", "name": "SQLQuery", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.565831Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "SQL status: SELECT 1 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.662119Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"9074292784\", \"run_started_at\": \"2024-05-14 05:35:40\", \"run_completed_at\": \"2024-05-14 05:36:20\", \"generated_at\": \"2024-05-14 05:36:20\", \"created_at\": \"2024-05-14T05:36:20.495183\", \"command\": \"run\", \"dbt_version\": \"1.7.11\", \"elementary_version\": \"0.14.1\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"b20c185e15cb00e9b46864e6dc6dfd5febb0ae1f\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9074292784\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9074292784\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"9074292784\", \"run_started_at\": \"2024-05-14 05:35:40\", \"run_completed_at\": \"2024-05-14 05:36:20\", \"generated_at\": \"2024-05-14 05:36:20\", \"created_at\": \"2024-05-14T05:36:20.495183\", \"command\": \"run\", \"dbt_version\": \"1.7.11\", \"elementary_version\": \"0.14.1\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"b20c185e15cb00e9b46864e6dc6dfd5febb0ae1f\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9074292784\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9074292784\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]", "name": "JinjaLogInfo", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.670879Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.671625Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.766946Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 7.089549, "process_in_blocks": "0", "process_kernel_time": 0.196216, "process_mem_max_rss": "116020", "process_out_blocks": "7296", "process_user_time": 6.815524}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 7.089549, \"process_user_time\": 6.815524, \"process_kernel_time\": 0.196216, \"process_mem_max_rss\": \"116020\", \"process_out_blocks\": \"7296\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.775329Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:37:57.776088Z", "elapsed": 7.0904655, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:57.776088 after 7.09 seconds", "name": "CommandCompleted", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.776215Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.776823Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7ee81040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7d57b3d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7c484220>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7ee81040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7d57b3d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5a7c484220>]}", "name": "SendingEvent", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.777386Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "73d76fea-02d8-4c57-a955-cdefb0438ceb", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 229, "thread": "MainThread", "ts": "2024-05-14T05:37:57.777956Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0350e40040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034ef27310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034ef272b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0350e40040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034ef27310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034ef272b0>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:37:59.237254Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:37:59.241086Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'introspect': 'True', 'static_parser': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:37:59.241867Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:37:59.245751Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '81b8662a-8343-430a-9326-d811c3accf99', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034e443220>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '81b8662a-8343-430a-9326-d811c3accf99', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034e443220>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:37:59.426138Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '81b8662a-8343-430a-9326-d811c3accf99', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034f4e94f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '81b8662a-8343-430a-9326-d811c3accf99', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034f4e94f0>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:37:59.488951Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:37:59.489900Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:37:59.513797Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:37:59.780422Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:37:59.781099Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '81b8662a-8343-430a-9326-d811c3accf99', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034e28e130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '81b8662a-8343-430a-9326-d811c3accf99', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034e28e130>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:37:59.860379Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '81b8662a-8343-430a-9326-d811c3accf99', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034de742e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '81b8662a-8343-430a-9326-d811c3accf99', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034de742e0>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.102664Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.103532Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '81b8662a-8343-430a-9326-d811c3accf99', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034e2661c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '81b8662a-8343-430a-9326-d811c3accf99', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034e2661c0>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.104121Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.104869Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.105459Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.106004Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.106559Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.893628Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.894557Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.895125Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.895659Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:00.991528Z"}}
{"data": {"msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "info", "msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]", "name": "JinjaLogInfo", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:01.007681Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:01.008381Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.866998, "process_in_blocks": "0", "process_kernel_time": 0.14438, "process_mem_max_rss": "103968", "process_out_blocks": "3744", "process_user_time": 2.013299}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.866998, \"process_user_time\": 2.013299, \"process_kernel_time\": 0.14438, \"process_mem_max_rss\": \"103968\", \"process_out_blocks\": \"3744\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:01.016755Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:01.017511Z", "elapsed": 1.8679159, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:01.017511 after 1.87 seconds", "name": "CommandCompleted", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:01.017630Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:01.018220Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0350e40040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034faeda30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0350b033a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0350e40040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f034faeda30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0350b033a0>]}", "name": "SendingEvent", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:01.018808Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "81b8662a-8343-430a-9326-d811c3accf99", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 236, "thread": "MainThread", "ts": "2024-05-14T05:38:01.019371Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3031c4f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302fdb4250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302fdb41f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3031c4f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302fdb4250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302fdb41f0>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:02.469886Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:02.475084Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:02.476359Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:02.481222Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302f24ac40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302f24ac40>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:02.661290Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302feb6af0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302feb6af0>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:02.723415Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:02.724399Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:02.748329Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:03.013855Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:03.014562Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302f09e130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302f09e130>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:03.093191Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302ed718e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f302ed718e0>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:03.331046Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:03.331876Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f30310809d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f30310809d0>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:03.332462Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:03.333191Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:03.333756Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:03.334285Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:03.334828Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.122288Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.123297Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.123836Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.124363Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.220645Z"}}
{"data": {"msg": "Elementary: \"neondb.dbt_testing_example_elementary\""}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "info", "msg": "Elementary: \"neondb.dbt_testing_example_elementary\"", "name": "JinjaLogInfo", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.239113Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.239789Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.8641416, "process_in_blocks": "0", "process_kernel_time": 0.187897, "process_mem_max_rss": "103996", "process_out_blocks": "3744", "process_user_time": 1.977677}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.8641416, \"process_user_time\": 1.977677, \"process_kernel_time\": 0.187897, \"process_mem_max_rss\": \"103996\", \"process_out_blocks\": \"3744\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.248197Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:04.248941Z", "elapsed": 1.8650479, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:04.248941 after 1.87 seconds", "name": "CommandCompleted", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.249059Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.249651Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3031c4f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f30310804f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f303034aa60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3031c4f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f30310804f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f303034aa60>]}", "name": "SendingEvent", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.250195Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "ed5ea5e3-53f2-4b39-9ba7-de6c8551cfe0", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 240, "thread": "MainThread", "ts": "2024-05-14T05:38:04.250792Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2e0ed2070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2defb9310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2defb92b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2e0ed2070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2defb9310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2defb92b0>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:05.696458Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:05.700258Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:05.701030Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:05.704915Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '6afed300-0bdb-464b-a489-eab56e48629e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2de514ac0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '6afed300-0bdb-464b-a489-eab56e48629e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2de514ac0>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:05.886942Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '6afed300-0bdb-464b-a489-eab56e48629e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2e00f6460>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '6afed300-0bdb-464b-a489-eab56e48629e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2e00f6460>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:05.949060Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:05.950038Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:05.974046Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:06.253864Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:06.254585Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '6afed300-0bdb-464b-a489-eab56e48629e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2de325130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '6afed300-0bdb-464b-a489-eab56e48629e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2de325130>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:06.334010Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '6afed300-0bdb-464b-a489-eab56e48629e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2de010ca0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '6afed300-0bdb-464b-a489-eab56e48629e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2de010ca0>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:06.574715Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:06.575557Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '6afed300-0bdb-464b-a489-eab56e48629e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2de2f91f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '6afed300-0bdb-464b-a489-eab56e48629e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2de2f91f0>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:06.576128Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:06.576864Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:06.577433Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:06.577963Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:06.578501Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:07.371242Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:07.372197Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:07.372802Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:07.373333Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:07.474759Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:07.576598Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  ", "name": "SQLQuery", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:07.577460Z"}}
{"data": {"elapsed": 1.0, "status": "SELECT 112"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "SQL status: SELECT 112 in 1.0 seconds", "name": "SQLQueryStatus", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:08.122857Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:08.137294Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  ", "name": "SQLQuery", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:08.137905Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:08.290037Z"}}
{"data": {"msg": "Elementary: [{\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-09T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-09T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-09T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-09T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-09T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-09T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-09T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-09T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-09T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-09T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-09T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-09T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-08T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-09T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-10T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-11T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-12T05:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-13T05:35:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-14T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-08T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-09T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-10T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-11T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-12T05:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-13T05:35:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-14T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-08T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-09T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-10T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-11T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-12T05:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-13T05:35:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-14T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-08T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-09T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-10T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-11T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-12T05:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-13T05:35:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-14T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "info", "msg": "Elementary: [{\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-09T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-09T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-09T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-09T05:34:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-09T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-09T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-09T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-08T05:35:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-09T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-10T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-11T05:34:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-12T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-13T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-05-14T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-09T05:34:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-09T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-09T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-08T05:35:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-09T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-10T05:34:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-11T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-12T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-13T05:35:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-05-14T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-08T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-09T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-10T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-11T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-12T05:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-13T05:35:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-05-14T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-08T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-09T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-10T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-11T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-12T05:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-13T05:35:27\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-05-14T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-08T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-09T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-10T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-11T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-12T05:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-13T05:35:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-05-14T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d\", \"test_execution_id\": \"411bba30-befd-49e2-9621-e9a2bdeb4b1d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-08T05:35:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877\", \"test_execution_id\": \"fb7cdb00-7e92-4b81-b901-63bbee1a7877.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-09T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40\", \"test_execution_id\": \"ccfa6f4f-2ec0-4120-a803-0c3c19138c40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-10T05:34:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549\", \"test_execution_id\": \"6859a5c0-ff8c-4233-b735-801f5049c549.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-11T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144\", \"test_execution_id\": \"fa02fd95-dd54-46f4-95b7-58576c857144.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-12T05:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831\", \"test_execution_id\": \"fc12e6ce-363c-4fa0-adc4-854695dcd831.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-13T05:35:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718\", \"test_execution_id\": \"c366cf26-4932-4f39-92f5-868e1ce5b718.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-05-14T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]", "name": "JinjaLogInfo", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:08.352064Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:08.368659Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.7684548, "process_in_blocks": "0", "process_kernel_time": 0.204232, "process_mem_max_rss": "110892", "process_out_blocks": "4864", "process_user_time": 2.158456}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.7684548, \"process_user_time\": 2.158456, \"process_kernel_time\": 0.204232, \"process_mem_max_rss\": \"110892\", \"process_out_blocks\": \"4864\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:08.377078Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:08.377814Z", "elapsed": 2.769343, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:08.377814 after 2.77 seconds", "name": "CommandCompleted", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:08.377933Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:08.378556Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2e0ed2070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2de514ac0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2e0bea430>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2e0ed2070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2de514ac0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc2e0bea430>]}", "name": "SendingEvent", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:08.379093Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "6afed300-0bdb-464b-a489-eab56e48629e", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 243, "thread": "MainThread", "ts": "2024-05-14T05:38:08.379652Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd18b18c070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd189274310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd1892742b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd18b18c070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd189274310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd1892742b0>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:09.850101Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:09.853859Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:09.854659Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:09.858530Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'de58ce68-7e17-4905-a88e-35b2ae668195', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd1887cdac0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'de58ce68-7e17-4905-a88e-35b2ae668195', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd1887cdac0>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.037541Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'de58ce68-7e17-4905-a88e-35b2ae668195', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd18a3b0460>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'de58ce68-7e17-4905-a88e-35b2ae668195', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd18a3b0460>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.099875Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.100817Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.124433Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.392281Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.392962Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'de58ce68-7e17-4905-a88e-35b2ae668195', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd1885de130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'de58ce68-7e17-4905-a88e-35b2ae668195', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd1885de130>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.473206Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'de58ce68-7e17-4905-a88e-35b2ae668195', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd18826be20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'de58ce68-7e17-4905-a88e-35b2ae668195', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd18826be20>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.719533Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.720428Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'de58ce68-7e17-4905-a88e-35b2ae668195', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd1885b31f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'de58ce68-7e17-4905-a88e-35b2ae668195', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd1885b31f0>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.721029Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.721796Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.722380Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.722961Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:10.723499Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.505798Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.506677Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.507347Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.507892Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.603207Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.688359Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.689006Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.784224Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.784939Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.785527Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 17"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "SQL status: SELECT 17 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.887055Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.895711Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.896308Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 22"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "SQL status: SELECT 22 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:11.994022Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:12.030430Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  ", "name": "SQLQuery", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:12.031128Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:12.128Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:12.136095Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:12.136794Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:12.232042Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.4743843, "process_in_blocks": "0", "process_kernel_time": 0.167909, "process_mem_max_rss": "107204", "process_out_blocks": "3768", "process_user_time": 2.126851}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.4743843, \"process_user_time\": 2.126851, \"process_kernel_time\": 0.167909, \"process_mem_max_rss\": \"107204\", \"process_out_blocks\": \"3768\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:12.240767Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:12.241516Z", "elapsed": 2.475289, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:12.241516 after 2.48 seconds", "name": "CommandCompleted", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:12.241636Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:12.242233Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd18b18c070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd1887cdac0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd18aea5430>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd18b18c070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd1887cdac0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd18aea5430>]}", "name": "SendingEvent", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:12.242828Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "de58ce68-7e17-4905-a88e-35b2ae668195", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 246, "thread": "MainThread", "ts": "2024-05-14T05:38:12.243409Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43ddbac0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dbd0c250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dbd0c1f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43ddbac0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dbd0c250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dbd0c1f0>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:13.698904Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:13.702779Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'debug': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:13.703578Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:13.707581Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'ce2ba657-2bc5-4235-851b-094343953659', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43db1a5c40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ce2ba657-2bc5-4235-851b-094343953659', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43db1a5c40>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:13.888572Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'ce2ba657-2bc5-4235-851b-094343953659', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dbe13af0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ce2ba657-2bc5-4235-851b-094343953659', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dbe13af0>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:13.950683Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:13.951628Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:13.975268Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:14.242427Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:14.243098Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'ce2ba657-2bc5-4235-851b-094343953659', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dafff130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ce2ba657-2bc5-4235-851b-094343953659', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dafff130>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:14.322703Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'ce2ba657-2bc5-4235-851b-094343953659', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dab1d730>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ce2ba657-2bc5-4235-851b-094343953659', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dab1d730>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:14.558481Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:14.559329Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'ce2ba657-2bc5-4235-851b-094343953659', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dcfdb9d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ce2ba657-2bc5-4235-851b-094343953659', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dcfdb9d0>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:14.559918Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:14.560655Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:14.561230Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:14.561769Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:14.562297Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.350942Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.351806Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.352349Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.352896Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.449122Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.469690Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.513444Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.514054Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.610493Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.611154Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.611730Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.710455Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_dbt_tests, alerts_dbt_models, enriched_columns, metrics_anomaly_score, alerts_schema_changes, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity", "name": "ListRelations", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.717735Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.738984Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.739593Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "SQL status: SELECT 19 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.840463Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.850177Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  ", "name": "SQLQuery", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.850819Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 4"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "SQL status: SELECT 4 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.948043Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "info", "msg": "Elementary: [{\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}]", "name": "JinjaLogInfo", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.956595Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:15.957365Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:16.053636Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.4476557, "process_in_blocks": "0", "process_kernel_time": 0.203397, "process_mem_max_rss": "107548", "process_out_blocks": "3776", "process_user_time": 2.05392}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.4476557, \"process_user_time\": 2.05392, \"process_kernel_time\": 0.203397, \"process_mem_max_rss\": \"107548\", \"process_out_blocks\": \"3776\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:16.063130Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:16.063880Z", "elapsed": 2.4485595, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:16.063880 after 2.45 seconds", "name": "CommandCompleted", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:16.064002Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:16.064605Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43ddbac0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43db1a5c40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dc896f70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43ddbac0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43db1a5c40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43dc896f70>]}", "name": "SendingEvent", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:16.065188Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "ce2ba657-2bc5-4235-851b-094343953659", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 249, "thread": "MainThread", "ts": "2024-05-14T05:38:16.065775Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd50680d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd31c8250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd31c81f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd50680d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd31c8250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd31c81f0>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:17.523114Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:17.526903Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/github/workspace/report', 'version_check': 'True', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'static_parser': 'True', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:17.527674Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:17.531506Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '6b0f310c-d299-45de-9728-b1f3b1bd7b8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd2660c40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '6b0f310c-d299-45de-9728-b1f3b1bd7b8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd2660c40>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:17.711263Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '6b0f310c-d299-45de-9728-b1f3b1bd7b8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd32cfaf0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '6b0f310c-d299-45de-9728-b1f3b1bd7b8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd32cfaf0>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:17.772861Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:17.773845Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:17.797741Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:18.064195Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:18.064859Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '6b0f310c-d299-45de-9728-b1f3b1bd7b8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd24b8130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '6b0f310c-d299-45de-9728-b1f3b1bd7b8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd24b8130>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:18.143361Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '6b0f310c-d299-45de-9728-b1f3b1bd7b8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd230a6d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '6b0f310c-d299-45de-9728-b1f3b1bd7b8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd230a6d0>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:18.379494Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:18.380331Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '6b0f310c-d299-45de-9728-b1f3b1bd7b8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd44969d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '6b0f310c-d299-45de-9728-b1f3b1bd7b8b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd44969d0>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:18.380939Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:18.381689Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:18.382275Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:18.382853Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:18.383393Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.158645Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.159630Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.160172Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.160714Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.255892Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.275654Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.319324Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.319932Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.415307Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.416076Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.416750Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.514234Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_dbt_tests, alerts_dbt_models, enriched_columns, metrics_anomaly_score, alerts_schema_changes, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity", "name": "ListRelations", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.521656Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.528708Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  ", "name": "SQLQuery", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.529322Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 2"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "SQL status: SELECT 2 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.625087Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}, {\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "info", "msg": "Elementary: [{\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}, {\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}]", "name": "JinjaLogInfo", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.633101Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.633833Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.729400Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.3005002, "process_in_blocks": "0", "process_kernel_time": 0.156193, "process_mem_max_rss": "107264", "process_out_blocks": "3768", "process_user_time": 2.078571}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.3005002, \"process_user_time\": 2.078571, \"process_kernel_time\": 0.156193, \"process_mem_max_rss\": \"107264\", \"process_out_blocks\": \"3768\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.738354Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:19.739192Z", "elapsed": 2.3015146, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:19.739192 after 2.30 seconds", "name": "CommandCompleted", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.739316Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.739961Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd50680d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd2660c40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd37648e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd50680d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd2660c40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdfd37648e0>]}", "name": "SendingEvent", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.740526Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "6b0f310c-d299-45de-9728-b1f3b1bd7b8b", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 252, "thread": "MainThread", "ts": "2024-05-14T05:38:19.741107Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97b1e17070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97afefe310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97afefe2b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97b1e17070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97afefe310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97afefe2b0>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:21.190728Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:21.194502Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:21.195300Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:21.199220Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'a6bfb52b-303c-45bb-9888-8d93e8455ac4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97af45bac0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'a6bfb52b-303c-45bb-9888-8d93e8455ac4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97af45bac0>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:21.381316Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'a6bfb52b-303c-45bb-9888-8d93e8455ac4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97b103c460>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'a6bfb52b-303c-45bb-9888-8d93e8455ac4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97b103c460>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:21.443503Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:21.444551Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:21.469160Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:21.736103Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:21.736811Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'a6bfb52b-303c-45bb-9888-8d93e8455ac4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97af267130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'a6bfb52b-303c-45bb-9888-8d93e8455ac4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97af267130>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:21.820052Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'a6bfb52b-303c-45bb-9888-8d93e8455ac4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97aef62190>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'a6bfb52b-303c-45bb-9888-8d93e8455ac4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97aef62190>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.063355Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.064220Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'a6bfb52b-303c-45bb-9888-8d93e8455ac4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97af23e1f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'a6bfb52b-303c-45bb-9888-8d93e8455ac4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97af23e1f0>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.064802Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.065548Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.066118Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.066687Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.067212Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.859115Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.860072Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.860621Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.861165Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.957394Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:22.979864Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.023375Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.023988Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.120340Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.121044Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.121615Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.221888Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_dbt_tests, alerts_dbt_models, enriched_columns, metrics_anomaly_score, alerts_schema_changes, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity", "name": "ListRelations", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.229012Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.250139Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.250766Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "SQL status: SELECT 20 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.351492Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.360105Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.360714Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "SQL status: SELECT 20 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.459313Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.465484Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.466109Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "SQL status: SELECT 20 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.564860Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.573152Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  \n                    depends_on_columns\n                  \n\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  \n                    depends_on_columns\n                  \n\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  ", "name": "SQLQuery", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.573793Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.670827Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.678583Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.679243Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.775518Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.6792035, "process_in_blocks": "0", "process_kernel_time": 0.164265, "process_mem_max_rss": "107544", "process_out_blocks": "3784", "process_user_time": 2.127443}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.6792035, \"process_user_time\": 2.127443, \"process_kernel_time\": 0.164265, \"process_mem_max_rss\": \"107544\", \"process_out_blocks\": \"3784\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.784134Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:23.784884Z", "elapsed": 2.6801107, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:23.784884 after 2.68 seconds", "name": "CommandCompleted", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.785004Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.785598Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97b1e17070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97af45bac0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97b1b30430>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97b1e17070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97af45bac0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f97b1b30430>]}", "name": "SendingEvent", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.786151Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "a6bfb52b-303c-45bb-9888-8d93e8455ac4", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 255, "thread": "MainThread", "ts": "2024-05-14T05:38:23.786758Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2df6120d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dd777250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dd7771f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2df6120d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dd777250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dd7771f0>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:25.236501Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:25.240212Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/github/workspace/report', 'version_check': 'True', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:25.240983Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:25.244804Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '887faaf1-4875-4e0f-b70f-3fca9294f7ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dcc0cc40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '887faaf1-4875-4e0f-b70f-3fca9294f7ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dcc0cc40>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:25.424038Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '887faaf1-4875-4e0f-b70f-3fca9294f7ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dd878af0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '887faaf1-4875-4e0f-b70f-3fca9294f7ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dd878af0>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:25.485990Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:25.486969Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:25.510816Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:25.776475Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:25.777190Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '887faaf1-4875-4e0f-b70f-3fca9294f7ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dca64130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '887faaf1-4875-4e0f-b70f-3fca9294f7ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dca64130>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:25.856539Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '887faaf1-4875-4e0f-b70f-3fca9294f7ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dc687790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '887faaf1-4875-4e0f-b70f-3fca9294f7ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dc687790>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.091221Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.092071Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '887faaf1-4875-4e0f-b70f-3fca9294f7ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dea419d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '887faaf1-4875-4e0f-b70f-3fca9294f7ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dea419d0>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.092660Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.093399Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.093966Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.094531Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.095072Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.889259Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.890175Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.890870Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.891585Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:26.988759Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:27.077217Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  ", "name": "SQLQuery", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:27.077951Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 28"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "SQL status: SELECT 28 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:27.436084Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-08 05:36:34\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-08 05:36:34\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-08 05:36:34\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-08 05:36:34\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"a5c7afb6-6e41-4522-b54d-9dfa3fab52c6\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-09 05:35:35\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"a5c7afb6-6e41-4522-b54d-9dfa3fab52c6\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-09 05:35:35\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"a5c7afb6-6e41-4522-b54d-9dfa3fab52c6\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-09 05:35:35\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"a5c7afb6-6e41-4522-b54d-9dfa3fab52c6\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-09 05:35:35\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"07742efb-649a-4a3c-ad26-999a7cd209cf\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-10 05:35:47\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"07742efb-649a-4a3c-ad26-999a7cd209cf\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-10 05:35:47\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"07742efb-649a-4a3c-ad26-999a7cd209cf\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-10 05:35:47\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"07742efb-649a-4a3c-ad26-999a7cd209cf\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-10 05:35:47\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"bd0fa0be-2477-4b76-b9c7-721c8e395616\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-11 05:35:24\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"bd0fa0be-2477-4b76-b9c7-721c8e395616\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-11 05:35:24\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"bd0fa0be-2477-4b76-b9c7-721c8e395616\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-11 05:35:24\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"bd0fa0be-2477-4b76-b9c7-721c8e395616\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-11 05:35:24\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"9d25b317-fb21-4c43-b677-2e40987f1c5f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-12 05:35:37\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"9d25b317-fb21-4c43-b677-2e40987f1c5f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-12 05:35:37\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"9d25b317-fb21-4c43-b677-2e40987f1c5f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-12 05:35:37\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"9d25b317-fb21-4c43-b677-2e40987f1c5f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-12 05:35:37\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"5125cff8-c0a1-4010-82a9-03e666341c4a\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-13 05:36:46\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"5125cff8-c0a1-4010-82a9-03e666341c4a\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-13 05:36:46\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"5125cff8-c0a1-4010-82a9-03e666341c4a\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-13 05:36:46\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"5125cff8-c0a1-4010-82a9-03e666341c4a\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-13 05:36:46\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-14 05:36:18\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-14 05:36:18\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-14 05:36:18\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-14 05:36:18\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-08 05:36:34\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-08 05:36:34\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-08 05:36:34\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"a1c3cc56-6058-4b87-b6dd-23ac4acfbeb6\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-08 05:36:34\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"a5c7afb6-6e41-4522-b54d-9dfa3fab52c6\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-09 05:35:35\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"a5c7afb6-6e41-4522-b54d-9dfa3fab52c6\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-09 05:35:35\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"a5c7afb6-6e41-4522-b54d-9dfa3fab52c6\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-09 05:35:35\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"a5c7afb6-6e41-4522-b54d-9dfa3fab52c6\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-09 05:35:35\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"07742efb-649a-4a3c-ad26-999a7cd209cf\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-10 05:35:47\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"07742efb-649a-4a3c-ad26-999a7cd209cf\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-10 05:35:47\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"07742efb-649a-4a3c-ad26-999a7cd209cf\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-10 05:35:47\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"07742efb-649a-4a3c-ad26-999a7cd209cf\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-10 05:35:47\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"bd0fa0be-2477-4b76-b9c7-721c8e395616\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-11 05:35:24\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"bd0fa0be-2477-4b76-b9c7-721c8e395616\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-11 05:35:24\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"bd0fa0be-2477-4b76-b9c7-721c8e395616\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-11 05:35:24\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"bd0fa0be-2477-4b76-b9c7-721c8e395616\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-11 05:35:24\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"9d25b317-fb21-4c43-b677-2e40987f1c5f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-12 05:35:37\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"9d25b317-fb21-4c43-b677-2e40987f1c5f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-12 05:35:37\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"9d25b317-fb21-4c43-b677-2e40987f1c5f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-12 05:35:37\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"9d25b317-fb21-4c43-b677-2e40987f1c5f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-12 05:35:37\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"5125cff8-c0a1-4010-82a9-03e666341c4a\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-13 05:36:46\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"5125cff8-c0a1-4010-82a9-03e666341c4a\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-13 05:36:46\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"5125cff8-c0a1-4010-82a9-03e666341c4a\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-13 05:36:46\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"5125cff8-c0a1-4010-82a9-03e666341c4a\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-13 05:36:46\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-14 05:36:18\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-05-14 05:36:18\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-05-14 05:36:18\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-05-14 05:36:18\"}]", "name": "JinjaLogInfo", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:27.450281Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:27.452290Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.3062658, "process_in_blocks": "0", "process_kernel_time": 0.212407, "process_mem_max_rss": "107228", "process_out_blocks": "3840", "process_user_time": 2.019877}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.3062658, \"process_user_time\": 2.019877, \"process_kernel_time\": 0.212407, \"process_mem_max_rss\": \"107228\", \"process_out_blocks\": \"3840\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:27.460715Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:27.461497Z", "elapsed": 2.3072116, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:27.461497 after 2.31 seconds", "name": "CommandCompleted", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:27.461618Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:27.462215Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2df6120d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dcc0cc40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2de2fcf70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2df6120d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2dcc0cc40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe2de2fcf70>]}", "name": "SendingEvent", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:27.462802Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "887faaf1-4875-4e0f-b70f-3fca9294f7ec", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 258, "thread": "MainThread", "ts": "2024-05-14T05:38:27.463372Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85fb516fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f9607d30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f9607d90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85fb516fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f9607d30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f9607d90>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:28.982676Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:28.986449Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'debug': 'False', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:28.987256Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:28.991108Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'd10a48e5-d498-42d6-b9c1-6de744e2686b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85fb2e7f10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'd10a48e5-d498-42d6-b9c1-6de744e2686b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85fb2e7f10>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.171109Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'd10a48e5-d498-42d6-b9c1-6de744e2686b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f964e940>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'd10a48e5-d498-42d6-b9c1-6de744e2686b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f964e940>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.232953Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.233870Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.257610Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.525065Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.525741Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'd10a48e5-d498-42d6-b9c1-6de744e2686b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f896f130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'd10a48e5-d498-42d6-b9c1-6de744e2686b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f896f130>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.604190Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'd10a48e5-d498-42d6-b9c1-6de744e2686b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f8555370>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'd10a48e5-d498-42d6-b9c1-6de744e2686b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f8555370>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.838148Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.839041Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'd10a48e5-d498-42d6-b9c1-6de744e2686b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f8947160>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'd10a48e5-d498-42d6-b9c1-6de744e2686b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85f8947160>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.839632Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.840371Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.840945Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.841492Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:29.842017Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.635823Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.636678Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.637239Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.637780Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.735789Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.755524Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.799308Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.799967Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.896354Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.897070Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.897697Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:30.997357Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_dbt_tests, alerts_dbt_models, enriched_columns, metrics_anomaly_score, alerts_schema_changes, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity", "name": "ListRelations", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.004496Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.011474Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  ", "name": "SQLQuery", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.012086Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "SQL status: SELECT 6 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.115687Z"}}
{"data": {"msg": "Elementary: [{\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}, {\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "info", "msg": "Elementary: [{\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}, {\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}]", "name": "JinjaLogInfo", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.123969Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.124687Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.221329Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.3308587, "process_in_blocks": "0", "process_kernel_time": 0.168278, "process_mem_max_rss": "107808", "process_out_blocks": "3768", "process_user_time": 2.059405}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.3308587, \"process_user_time\": 2.059405, \"process_kernel_time\": 0.168278, \"process_mem_max_rss\": \"107808\", \"process_out_blocks\": \"3768\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.230067Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:31.230862Z", "elapsed": 2.3318088, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:31.230862 after 2.33 seconds", "name": "CommandCompleted", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.230982Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.231576Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85fb516fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85fa1ce970>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85fb222a90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85fb516fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85fa1ce970>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f85fb222a90>]}", "name": "SendingEvent", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.232121Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "d10a48e5-d498-42d6-b9c1-6de744e2686b", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 261, "thread": "MainThread", "ts": "2024-05-14T05:38:31.232686Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4330de10d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432eec82b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432eec8250>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4330de10d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432eec82b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432eec8250>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:32.707955Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:32.711729Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:32.712501Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:32.716341Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'cd9cad16-ebc8-410b-950b-e6ca69222d47', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432e3e5790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'cd9cad16-ebc8-410b-950b-e6ca69222d47', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432e3e5790>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:32.896487Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'cd9cad16-ebc8-410b-950b-e6ca69222d47', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432f04d040>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'cd9cad16-ebc8-410b-950b-e6ca69222d47', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432f04d040>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:32.958589Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:32.959532Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:32.983210Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:33.247936Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:33.248588Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'cd9cad16-ebc8-410b-950b-e6ca69222d47', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432e234130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'cd9cad16-ebc8-410b-950b-e6ca69222d47', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432e234130>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:33.326829Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'cd9cad16-ebc8-410b-950b-e6ca69222d47', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432dd528e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'cd9cad16-ebc8-410b-950b-e6ca69222d47', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432dd528e0>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:33.565310Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:33.566153Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'cd9cad16-ebc8-410b-950b-e6ca69222d47', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43302109d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'cd9cad16-ebc8-410b-950b-e6ca69222d47', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f43302109d0>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:33.566792Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:33.567544Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:33.568114Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:33.568648Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:33.569176Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.357569Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.358493Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.359089Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.359624Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.455764Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.476829Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.520638Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.521255Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.617233Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.617902Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.618503Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.716763Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_dbt_tests, alerts_dbt_models, enriched_columns, metrics_anomaly_score, alerts_schema_changes, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity", "name": "ListRelations", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.724118Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.731353Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n    \n  ", "name": "SQLQuery", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.731964Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "SQL status: SELECT 6 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.829085Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}]", "name": "JinjaLogInfo", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.837583Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.838338Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.934350Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.3227453, "process_in_blocks": "0", "process_kernel_time": 0.155699, "process_mem_max_rss": "107704", "process_out_blocks": "3776", "process_user_time": 2.079982}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.3227453, \"process_user_time\": 2.079982, \"process_kernel_time\": 0.155699, \"process_mem_max_rss\": \"107704\", \"process_out_blocks\": \"3776\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.943173Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:34.943916Z", "elapsed": 2.3236442, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:34.943916 after 2.32 seconds", "name": "CommandCompleted", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.944036Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.944625Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4330de10d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432e3e5790>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432facbf70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4330de10d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432e3e5790>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f432facbf70>]}", "name": "SendingEvent", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.945169Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "cd9cad16-ebc8-410b-950b-e6ca69222d47", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 264, "thread": "MainThread", "ts": "2024-05-14T05:38:34.945729Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5f9f40a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5dadb2b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5dadb250>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5f9f40a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5dadb2b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5dadb250>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:36.406222Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:36.410052Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'version_check': 'True', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'static_parser': 'True', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:36.410896Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:36.414846Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'bb33d3f7-386c-40db-9112-b8c0f13baab3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5cff8b80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'bb33d3f7-386c-40db-9112-b8c0f13baab3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5cff8b80>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:36.597239Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'bb33d3f7-386c-40db-9112-b8c0f13baab3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5e6c8400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'bb33d3f7-386c-40db-9112-b8c0f13baab3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5e6c8400>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:36.660028Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:36.661014Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:36.685243Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:36.953397Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:36.954073Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'bb33d3f7-386c-40db-9112-b8c0f13baab3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5ce44130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'bb33d3f7-386c-40db-9112-b8c0f13baab3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5ce44130>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:37.033931Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'bb33d3f7-386c-40db-9112-b8c0f13baab3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5cb9ed00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'bb33d3f7-386c-40db-9112-b8c0f13baab3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5cb9ed00>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:37.276148Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:37.276994Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'bb33d3f7-386c-40db-9112-b8c0f13baab3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5ce1b1f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'bb33d3f7-386c-40db-9112-b8c0f13baab3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5ce1b1f0>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:37.277585Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:37.278363Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:37.278981Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:37.279520Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:37.280055Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.058715Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.059580Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.060134Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.060674Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.156080Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.211418Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  ", "name": "SQLQuery", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.212064Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 34"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "SQL status: SELECT 34 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.312126Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\"}]", "name": "JinjaLogInfo", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.321505Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.322432Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.0150793, "process_in_blocks": "0", "process_kernel_time": 0.172277, "process_mem_max_rss": "107340", "process_out_blocks": "3768", "process_user_time": 2.051299}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.0150793, \"process_user_time\": 2.051299, \"process_kernel_time\": 0.172277, \"process_mem_max_rss\": \"107340\", \"process_out_blocks\": \"3768\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.331225Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:38.331964Z", "elapsed": 2.0159712, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:38.331964 after 2.02 seconds", "name": "CommandCompleted", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.332082Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.332683Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5f9f40a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5e6a2fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5f722d60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5f9f40a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5e6a2fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fca5f722d60>]}", "name": "SendingEvent", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.333227Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "bb33d3f7-386c-40db-9112-b8c0f13baab3", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 267, "thread": "MainThread", "ts": "2024-05-14T05:38:38.333808Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d76e40d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d5847250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d58471f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d76e40d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d5847250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d58471f0>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:39.785802Z"}}
{"data": {"log_version": 3, "version": "=1.8.0"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "info", "msg": "Running with dbt=1.8.0", "name": "MainReportVersion", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:39.789653Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:39.790471Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:39.794573Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '0ccc7e55-ddc5-426a-b2f1-2ae139ebd504', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d4ce1c40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '0ccc7e55-ddc5-426a-b2f1-2ae139ebd504', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d4ce1c40>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:39.982716Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '0ccc7e55-ddc5-426a-b2f1-2ae139ebd504', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d594aaf0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '0ccc7e55-ddc5-426a-b2f1-2ae139ebd504', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d594aaf0>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.045477Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "info", "msg": "Registered adapter: postgres=1.8.0", "name": "AdapterRegistered", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.046695Z"}}
{"data": {"checksum": "dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92", "profile": "", "target": "", "vars": "{}", "version": "1.8.0"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "checksum: dbb12d416fdb55e3665e4828703bbedf40c5c90ed7ca6ff39bbbfb29b12b0a92, vars: {}, profile: , target: , version: 1.8.0", "name": "StateCheckVarsHash", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.071871Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.341197Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.341892Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '0ccc7e55-ddc5-426a-b2f1-2ae139ebd504', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d4b33130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '0ccc7e55-ddc5-426a-b2f1-2ae139ebd504', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d4b33130>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.420704Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '0ccc7e55-ddc5-426a-b2f1-2ae139ebd504', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d497a730>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '0ccc7e55-ddc5-426a-b2f1-2ae139ebd504', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d497a730>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.661796Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1336 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1336 macros", "name": "FoundStats", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.662745Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '0ccc7e55-ddc5-426a-b2f1-2ae139ebd504', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d6b16b20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '0ccc7e55-ddc5-426a-b2f1-2ae139ebd504', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d6b16b20>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.663345Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.664106Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.664679Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.665214Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:40.665730Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.455187Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.456023Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.456558Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.457093Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.553093Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.624028Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.624672Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.724539Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.725252Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.725832Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 35"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "SQL status: SELECT 35 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.827362Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.838129Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.0\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  ", "name": "SQLQuery", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.838776Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "SQL status: SELECT 1 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.939298Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9074292784\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"0a16f162-3208-4ea4-8ced-b8ac6c629a80\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/9074292784\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]", "name": "JinjaLogInfo", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.947331Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:41.948021Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:42.043691Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.3565414, "process_in_blocks": "0", "process_kernel_time": 0.192401, "process_mem_max_rss": "107576", "process_out_blocks": "3752", "process_user_time": 2.060302}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.3565414, \"process_user_time\": 2.060302, \"process_kernel_time\": 0.192401, \"process_mem_max_rss\": \"107576\", \"process_out_blocks\": \"3752\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:42.052289Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-05-14T05:38:42.053066Z", "elapsed": 2.3574889, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:42.053066 after 2.36 seconds", "name": "CommandCompleted", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:42.053188Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:42.053777Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d76e40d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d4ce1c40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d74e3850>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d76e40d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d4ce1c40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f84d74e3850>]}", "name": "SendingEvent", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:42.054315Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "0ccc7e55-ddc5-426a-b2f1-2ae139ebd504", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 270, "thread": "MainThread", "ts": "2024-05-14T05:38:42.054913Z"}}
