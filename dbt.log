{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f91fc7b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f938f2550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f8fef7b20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f91fc7b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f938f2550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f8fef7b20>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.348376Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.352242Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/github/workspace/report', 'version_check': 'True', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'invocation_command': 'dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.353080Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '58fa8d71-0fac-4f00-a8b0-f7f3224d951c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f926d9e80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '58fa8d71-0fac-4f00-a8b0-f7f3224d951c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f926d9e80>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.461712Z"}}
{"data": {"path": "/tmp/dbt-downloads-rscks54v"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-rscks54v'", "name": "DepsSetDownloadDirectory", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.463070Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M022", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Making package index registry request: GET https://hub.getdbt.com/api/v1/index.json", "name": "RegistryIndexProgressGETRequest", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.463852Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M023", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Response from registry index: GET https://hub.getdbt.com/api/v1/index.json 200", "name": "RegistryIndexProgressGETResponse", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.565737Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json", "name": "RegistryProgressGETRequest", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.567213Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json 200", "name": "RegistryProgressGETResponse", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.624775Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json", "name": "RegistryProgressGETRequest", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.630695Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json 200", "name": "RegistryProgressGETResponse", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.777150Z"}}
{"data": {"lock_filepath": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml"}, "info": {"category": "", "code": "M031", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "info", "msg": "Updating lock file in file path: /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml", "name": "DepsLockUpdating", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.801187Z"}}
{"data": {"path": "/tmp/dbt-downloads-z4dp0fgv"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-z4dp0fgv'", "name": "DepsSetDownloadDirectory", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.803927Z"}}
{"data": {"package_name": "dbt-labs/dbt_utils"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "info", "msg": "Installing dbt-labs/dbt_utils", "name": "DepsStartPackageInstall", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:20.814281Z"}}
{"data": {"version_name": "version 0.8.6"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "info", "msg": "Installed from version 0.8.6", "name": "DepsInstallInfo", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.243757Z"}}
{"data": {"version_latest": "1.1.1"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "info", "msg": "Updated version available: 1.1.1", "name": "DepsUpdateAvailable", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.244577Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '58fa8d71-0fac-4f00-a8b0-f7f3224d951c', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f926c1bb0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f8feabc10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '58fa8d71-0fac-4f00-a8b0-f7f3224d951c', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f926c1bb0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f8feabc10>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.245266Z"}}
{"data": {"package_name": "elementary-data/elementary"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "info", "msg": "Installing elementary-data/elementary", "name": "DepsStartPackageInstall", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.245923Z"}}
{"data": {"version_name": "version 0.14.1"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "info", "msg": "Installed from version 0.14.1", "name": "DepsInstallInfo", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.703133Z"}}
{"data": {}, "info": {"category": "", "code": "M017", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "info", "msg": "Up to date!", "name": "DepsUpToDate", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.703926Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '58fa8d71-0fac-4f00-a8b0-f7f3224d951c', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f8feab6a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f8fe56b50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '58fa8d71-0fac-4f00-a8b0-f7f3224d951c', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f8feab6a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f8fe56b50>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.704675Z"}}
{"data": {"msg": ""}, "info": {"category": "", "code": "Z017", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "info", "msg": "", "name": "Formatting", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.705353Z"}}
{"data": {"packages": ["dbt-labs/dbt_utils"]}, "info": {"category": "", "code": "M019", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "info", "msg": "Updates available for packages: ['dbt-labs/dbt_utils']                 \nUpdate your versions in packages.yml, then run dbt deps", "name": "DepsNotifyUpdatesAvailable", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.705960Z"}}
{"data": {"command_name": "deps", "command_success": true, "command_wall_clock_time": 1.4109375, "process_in_blocks": "0", "process_kernel_time": 0.244252, "process_mem_max_rss": "94932", "process_out_blocks": "7160", "process_user_time": 2.486569}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Resource report: {\"command_name\": \"deps\", \"command_success\": true, \"command_wall_clock_time\": 1.4109375, \"process_user_time\": 2.486569, \"process_kernel_time\": 0.244252, \"process_mem_max_rss\": \"94932\", \"process_out_blocks\": \"7160\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.707488Z"}}
{"data": {"command": "dbt deps", "completed_at": "2024-04-15T05:37:21.708308Z", "elapsed": 1.4120044, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Command `dbt deps` succeeded at 05:37:21.708308 after 1.41 seconds", "name": "CommandCompleted", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.708510Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f91fc7b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f8fe7bd90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f926cb0a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f91fc7b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f8fe7bd90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5f926cb0a0>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.709198Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "58fa8d71-0fac-4f00-a8b0-f7f3224d951c", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 95, "thread": "MainThread", "ts": "2024-04-15T05:37:21.709832Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febc2993b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febc3097640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febc30973d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febc2993b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febc3097640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febc30973d0>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:24.326117Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:24.329898Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:24.330723Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:24.334700Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febc02b7f40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febc02b7f40>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:24.533413Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbffd34c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbffd34c0>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:24.636101Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:24.637177Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:24.655544Z"}}
{"data": {"reason": "saved manifest not found. Starting full parse."}, "info": {"category": "", "code": "I024", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "info", "msg": "Unable to do partial parsing because saved manifest not found. Starting full parse.", "name": "UnableToPartialParse", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:24.656572Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'partial_parser', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbff3de20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbff3de20>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:24.657222Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbef5cc70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbef5cc70>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:29.955101Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbef5ce80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbef5ce80>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:29.989272Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:29.990119Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbfbfda30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '2aadf616-1c95-4c0c-bdf0-d4cd0d70a573', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbfbfda30>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:29.990793Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:29.991866Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:29.992577Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:29.993196Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:29.993799Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.112623Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.113661Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.114277Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.114880Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.253460Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.270987Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.284097Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.284833Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.423989Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.424911Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.425542Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.566563Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, model_run_results, anomaly_threshold_sensitivity, snapshot_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.577385Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.584626Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  ", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.585294Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "SQL status: SELECT 1 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.726456Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"8683955615\", \"run_started_at\": \"2024-04-15 05:35:24\", \"run_completed_at\": \"2024-04-15 05:35:54\", \"generated_at\": \"2024-04-15 05:35:54\", \"created_at\": \"2024-04-15T05:35:54.449862\", \"command\": \"run\", \"dbt_version\": \"1.7.11\", \"elementary_version\": \"0.14.1\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"b20c185e15cb00e9b46864e6dc6dfd5febb0ae1f\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8683955615\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8683955615\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"8683955615\", \"run_started_at\": \"2024-04-15 05:35:24\", \"run_completed_at\": \"2024-04-15 05:35:54\", \"generated_at\": \"2024-04-15 05:35:54\", \"created_at\": \"2024-04-15T05:35:54.449862\", \"command\": \"run\", \"dbt_version\": \"1.7.11\", \"elementary_version\": \"0.14.1\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"b20c185e15cb00e9b46864e6dc6dfd5febb0ae1f\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8683955615\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8683955615\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]", "name": "JinjaLogInfo", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.735735Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.736674Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.875379Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 7.6049194, "process_in_blocks": "0", "process_kernel_time": 0.196142, "process_mem_max_rss": "128484", "process_out_blocks": "7240", "process_user_time": 7.793652}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 7.6049194, \"process_user_time\": 7.793652, \"process_kernel_time\": 0.196142, \"process_mem_max_rss\": \"128484\", \"process_out_blocks\": \"7240\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.878140Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:37:31.878872Z", "elapsed": 7.6058865, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:31.878872 after 7.61 seconds", "name": "CommandCompleted", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.879068Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.879748Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febc2993b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbefd9520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbebd5400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febc2993b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbefd9520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7febbebd5400>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.880394Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "2aadf616-1c95-4c0c-bdf0-d4cd0d70a573", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 97, "thread": "MainThread", "ts": "2024-04-15T05:37:31.881039Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095d4e8fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095db68910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095db68bb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095d4e8fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095db68910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095db68bb0>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:34.532098Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:34.535736Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:34.536585Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:34.540523Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '5eb7ff8d-7b8f-436b-ab51-ef182f610706', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095db47550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '5eb7ff8d-7b8f-436b-ab51-ef182f610706', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095db47550>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:34.736448Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '5eb7ff8d-7b8f-436b-ab51-ef182f610706', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095a706880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '5eb7ff8d-7b8f-436b-ab51-ef182f610706', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095a706880>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:34.838288Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:34.839307Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:34.856685Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:34.978712Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:34.979421Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '5eb7ff8d-7b8f-436b-ab51-ef182f610706', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095a3810d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '5eb7ff8d-7b8f-436b-ab51-ef182f610706', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095a3810d0>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:34.990417Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '5eb7ff8d-7b8f-436b-ab51-ef182f610706', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0959b193d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '5eb7ff8d-7b8f-436b-ab51-ef182f610706', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0959b193d0>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:35.070579Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:35.071459Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '5eb7ff8d-7b8f-436b-ab51-ef182f610706', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0959b193a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '5eb7ff8d-7b8f-436b-ab51-ef182f610706', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0959b193a0>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:35.072100Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:35.073174Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:35.073814Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:35.074426Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:35.075013Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.186667Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.187569Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.188241Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.188854Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.326241Z"}}
{"data": {"msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "info", "msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]", "name": "JinjaLogInfo", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.340768Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.341517Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.864232, "process_in_blocks": "0", "process_kernel_time": 0.235168, "process_mem_max_rss": "111448", "process_out_blocks": "3720", "process_user_time": 2.558948}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.864232, \"process_user_time\": 2.558948, \"process_kernel_time\": 0.235168, \"process_mem_max_rss\": \"111448\", \"process_out_blocks\": \"3720\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.343733Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:37:36.344500Z", "elapsed": 1.8652222, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:36.344500 after 1.87 seconds", "name": "CommandCompleted", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.344696Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.345346Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095d4e8fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095a706880>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095ab3f730>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095d4e8fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095a706880>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f095ab3f730>]}", "name": "SendingEvent", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.345955Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "5eb7ff8d-7b8f-436b-ab51-ef182f610706", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 103, "thread": "MainThread", "ts": "2024-04-15T05:37:36.346595Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1697492af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1698dbc580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f16953c3b20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1697492af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1698dbc580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f16953c3b20>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:38.983477Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:38.987172Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/github/workspace/report', 'version_check': 'True', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'introspect': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:38.988Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:38.991987Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'e83608a6-9f97-40b0-8f6d-2d6a79b30545', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1698dbc580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'e83608a6-9f97-40b0-8f6d-2d6a79b30545', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1698dbc580>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.189395Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'e83608a6-9f97-40b0-8f6d-2d6a79b30545', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f16953d1400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'e83608a6-9f97-40b0-8f6d-2d6a79b30545', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f16953d1400>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.292155Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.293271Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.310933Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.437871Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.438637Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'e83608a6-9f97-40b0-8f6d-2d6a79b30545', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f16943c10d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'e83608a6-9f97-40b0-8f6d-2d6a79b30545', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f16943c10d0>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.450338Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'e83608a6-9f97-40b0-8f6d-2d6a79b30545', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f16946b1d60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'e83608a6-9f97-40b0-8f6d-2d6a79b30545', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f16946b1d60>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.534356Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.535209Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'e83608a6-9f97-40b0-8f6d-2d6a79b30545', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1693b5a3a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'e83608a6-9f97-40b0-8f6d-2d6a79b30545', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1693b5a3a0>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.535861Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.536943Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.537577Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.538192Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:39.538776Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.656472Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.657532Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.658173Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.658782Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.797520Z"}}
{"data": {"msg": "Elementary: \"neondb.dbt_testing_example_elementary\""}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "info", "msg": "Elementary: \"neondb.dbt_testing_example_elementary\"", "name": "JinjaLogInfo", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.814382Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.815140Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.8868357, "process_in_blocks": "0", "process_kernel_time": 0.215864, "process_mem_max_rss": "111328", "process_out_blocks": "3720", "process_user_time": 2.614354}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.8868357, \"process_user_time\": 2.614354, \"process_kernel_time\": 0.215864, \"process_mem_max_rss\": \"111328\", \"process_out_blocks\": \"3720\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.817349Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:37:40.818085Z", "elapsed": 1.887812, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:40.818085 after 1.89 seconds", "name": "CommandCompleted", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.818277Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.818922Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1697492af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1698dbc580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1697ba6760>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1697492af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1698dbc580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1697ba6760>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.819529Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "e83608a6-9f97-40b0-8f6d-2d6a79b30545", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 106, "thread": "MainThread", "ts": "2024-04-15T05:37:40.820197Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5e622af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5ff4e580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5c552b20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5e622af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5ff4e580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5c552b20>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:43.493727Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:43.497472Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:43.498286Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:43.502224Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5ff4e580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5ff4e580>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:43.699952Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5c561400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5c561400>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:43.803399Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:43.804579Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:43.822137Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:43.944634Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:43.945401Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5b1c00d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5b1c00d0>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:43.957084Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5b5f3d60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5b5f3d60>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:44.036534Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:44.037397Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5ac613a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5ac613a0>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:44.038042Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:44.039099Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:44.039746Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:44.040399Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:44.041001Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:45.173829Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:45.174878Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:45.175562Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:45.176200Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:45.317098Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:45.391727Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  ", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:45.392727Z"}}
{"data": {"elapsed": 1.0, "status": "SELECT 267"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "SQL status: SELECT 267 in 1.0 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:46.300731Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:46.326772Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  ", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:46.327482Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 454"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "SQL status: SELECT 454 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:46.656007Z"}}
{"data": {"msg": "Elementary: [{\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"742d0b60-049a-47b9-a706-8d83306c4ee4.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"742d0b60-049a-47b9-a706-8d83306c4ee4\", \"test_execution_id\": \"742d0b60-049a-47b9-a706-8d83306c4ee4.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T08:28:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n      \\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n    \\n  \\n\\n    \\n  \\n  \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n        \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n\\n\\n  \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where True\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"e974c0d9-a73c-498d-8dff-207d51f8de28.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"e974c0d9-a73c-498d-8dff-207d51f8de28\", \"test_execution_id\": \"e974c0d9-a73c-498d-8dff-207d51f8de28.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T08:29:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n      \\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n    \\n  \\n\\n    \\n  \\n  \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n        \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n\\n\\n  \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where True\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"days_diff\": 6, \"invocations_rank_index\": 9, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c21a0758-8cc4-4718-9d98-9f0941f72675.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"c21a0758-8cc4-4718-9d98-9f0941f72675\", \"test_execution_id\": \"c21a0758-8cc4-4718-9d98-9f0941f72675.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n      \\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n    \\n  \\n\\n    \\n  \\n  \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n        \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n\\n\\n  \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where True\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"days_diff\": 6, \"invocations_rank_index\": 8, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9b1078c8-08ba-4e47-bfbe-53356e95e9e9.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"9b1078c8-08ba-4e47-bfbe-53356e95e9e9\", \"test_execution_id\": \"9b1078c8-08ba-4e47-bfbe-53356e95e9e9.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b6d93adb-2094-46e1-8e49-686ae83dab58.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"b6d93adb-2094-46e1-8e49-686ae83dab58\", \"test_execution_id\": \"b6d93adb-2094-46e1-8e49-686ae83dab58.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-11T18:32:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0e7e2ae3-b708-4e1e-94ad-981a009583cd.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"0e7e2ae3-b708-4e1e-94ad-981a009583cd\", \"test_execution_id\": \"0e7e2ae3-b708-4e1e-94ad-981a009583cd.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-11T18:50:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"33be7233-7e71-49df-9ec0-04c128009d4c.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"33be7233-7e71-49df-9ec0-04c128009d4c\", \"test_execution_id\": \"33be7233-7e71-49df-9ec0-04c128009d4c.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-11T19:02:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:18:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9\", \"test_execution_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:32:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942\", \"test_execution_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:49:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70\", \"test_execution_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-11T19:02:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-09T05:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-11T18:30:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-11T18:30:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-11T18:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-14T05:52:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-09T05:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-11T18:30:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-11T18:30:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-11T18:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-14T05:52:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-09T05:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-11T18:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-14T05:52:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-09T05:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-11T18:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-14T05:52:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-09T05:34:37\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-09T08:14:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-09T08:18:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-12T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-13T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-09T05:34:37\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-09T08:14:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-09T08:18:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-12T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-13T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-09T05:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-09T08:14:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-11T18:34:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-14T05:52:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-09T05:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-09T08:14:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-09T08:18:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-09T11:26:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-11T18:34:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-14T05:52:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6bae00de38a4ebe06205edc28139913d\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-09T08:14:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-04-09 05:35:39.196338, 2.41 hours ago. Usually the table is updated within 213.51 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240409081412521318\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-04-09 05:35:39.196338\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"715086495231b74b02b23a5de38995f9\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-09T08:18:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-04-09 05:35:39.196338, 2.41 hours ago. Usually the table is updated within 213.51 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240409081818121033\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-04-09 05:35:39.196338\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f6a5aaa0c389b9e6dea2ed8e75f34568\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-04-09 05:35:39.196338, 4.41 hours ago. Usually the table is updated within 211.05 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240409112641008571\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-04-09 05:35:39.196338\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"aa1647a5f43497d1105a0a4140c26228\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-11T18:30:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-04-09 11:48:09.539462, 54.20 hours ago. Usually the table is updated within 166.79 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  \\n  \\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240411183010406286\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-04-09 11:48:09.539462\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06d5cabb95f78225eff916ca88053c91\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-11T18:30:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-04-09 11:48:09.539462, 54.20 hours ago. Usually the table is updated within 166.79 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  \\n  \\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240411183056358743\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-04-09 11:48:09.539462\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 675652.0, \"average\": 672052.0, \"min_value\": 656778.4935263706, \"max_value\": 687325.5064736294, \"start_time\": \"2024-03-28T02:00:00\", \"end_time\": \"2024-03-28T04:00:00\", \"id\": \"e4ce78913edd98fb8433988d2d24180c\", \"metric_id\": \"2b21e53b7a7182b1856ea55e809e8d8c\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 0.7071067811865475, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T02:00:00\", \"bucket_end\": \"2024-03-28T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 675652.0, \"min_metric_value\": 656778.4935263706, \"max_metric_value\": 687325.5064736294, \"training_avg\": 672052.0, \"training_stddev\": 5091.168824543142, \"training_set_size\": 2, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 187.68 hours ago. Usually the table is updated within 186.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 682852.0, \"average\": 675652.0, \"min_value\": 654052.0, \"max_value\": 697252.0, \"start_time\": \"2024-03-28T04:00:00\", \"end_time\": \"2024-03-28T06:00:00\", \"id\": \"7b09e9b34ce3761e8e9a7ea9fc8af0dd\", \"metric_id\": \"5b7d25f5e4566863b143461f791226b5\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T04:00:00\", \"bucket_end\": \"2024-03-28T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 682852.0, \"min_metric_value\": 654052.0, \"max_metric_value\": 697252.0, \"training_avg\": 675652.0, \"training_stddev\": 7200.0, \"training_set_size\": 3, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 189.68 hours ago. Usually the table is updated within 187.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 690052.0, \"average\": 679252.0, \"min_value\": 651366.5199073066, \"max_value\": 707137.4800926934, \"start_time\": \"2024-03-28T06:00:00\", \"end_time\": \"2024-03-28T08:00:00\", \"id\": \"3c855ac02dc5dfba4cef169da5f5556c\", \"metric_id\": \"ecc55797c48ffb6bd1e8f75c3ef1ce70\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.1618950038622249, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T06:00:00\", \"bucket_end\": \"2024-03-28T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 690052.0, \"min_metric_value\": 651366.5199073066, \"max_metric_value\": 707137.4800926934, \"training_avg\": 679252.0, \"training_stddev\": 9295.160030897801, \"training_set_size\": 4, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 191.68 hours ago. Usually the table is updated within 188.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 697252.0, \"average\": 682852.0, \"min_value\": 648699.4012701815, \"max_value\": 717004.5987298185, \"start_time\": \"2024-03-28T08:00:00\", \"end_time\": \"2024-03-28T10:00:00\", \"id\": \"2c8580df485b27cb11995d642dbaf209\", \"metric_id\": \"bc888a5f3bf660accaba3b47a21078a3\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.2649110640673515, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T08:00:00\", \"bucket_end\": \"2024-03-28T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 697252.0, \"min_metric_value\": 648699.4012701815, \"max_metric_value\": 717004.5987298185, \"training_avg\": 682852.0, \"training_stddev\": 11384.199576606166, \"training_set_size\": 5, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 193.68 hours ago. Usually the table is updated within 189.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 704452.0, \"average\": 686452.0, \"min_value\": 646042.1002228415, \"max_value\": 726861.8997771585, \"start_time\": \"2024-03-28T10:00:00\", \"end_time\": \"2024-03-28T12:00:00\", \"id\": \"1b8c536897d3f73339e8a7515a2b175f\", \"metric_id\": \"12b808de3e6360c2bb4d15079474e162\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.3363062095621219, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T10:00:00\", \"bucket_end\": \"2024-03-28T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 704452.0, \"min_metric_value\": 646042.1002228415, \"max_metric_value\": 726861.8997771585, \"training_avg\": 686452.0, \"training_stddev\": 13469.966592386188, \"training_set_size\": 6, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 195.68 hours ago. Usually the table is updated within 190.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 711652.0, \"average\": 690052.0, \"min_value\": 643390.6669714634, \"max_value\": 736713.3330285366, \"start_time\": \"2024-03-28T12:00:00\", \"end_time\": \"2024-03-28T14:00:00\", \"id\": \"ef82f72df1f01f9cc3b62eeafaa3ca91\", \"metric_id\": \"4eac7693ac942f4a7169bf810767da96\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.3887301496588271, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T12:00:00\", \"bucket_end\": \"2024-03-28T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 711652.0, \"min_metric_value\": 643390.6669714634, \"max_metric_value\": 736713.3330285366, \"training_avg\": 690052.0, \"training_stddev\": 15553.777676178865, \"training_set_size\": 7, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 197.68 hours ago. Usually the table is updated within 191.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 718852.0, \"average\": 693652.0, \"min_value\": 640743.0215558833, \"max_value\": 746560.9784441167, \"start_time\": \"2024-03-28T14:00:00\", \"end_time\": \"2024-03-28T16:00:00\", \"id\": \"693971626684e0caa633d618fa8f8ab6\", \"metric_id\": \"d9acc8287804f9048eaa077eba7dc22f\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4288690166235205, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T14:00:00\", \"bucket_end\": \"2024-03-28T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 718852.0, \"min_metric_value\": 640743.0215558833, \"max_metric_value\": 746560.9784441167, \"training_avg\": 693652.0, \"training_stddev\": 17636.326148038883, \"training_set_size\": 8, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 199.68 hours ago. Usually the table is updated within 192.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 726052.0, \"average\": 697252.0, \"min_value\": 638097.9637894421, \"max_value\": 756406.0362105579, \"start_time\": \"2024-03-28T16:00:00\", \"end_time\": \"2024-03-28T18:00:00\", \"id\": \"ec7ace98cfc89e6f6cacc2e6ecce3beb\", \"metric_id\": \"b262d7bb69f3603615d7718650dd8b24\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4605934866804429, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T16:00:00\", \"bucket_end\": \"2024-03-28T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 726052.0, \"min_metric_value\": 638097.9637894421, \"max_metric_value\": 756406.0362105579, \"training_avg\": 697252.0, \"training_stddev\": 19718.01207018598, \"training_set_size\": 9, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 201.68 hours ago. Usually the table is updated within 193.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 733252.0, \"average\": 700852.0, \"min_value\": 635454.7523514942, \"max_value\": 766249.2476485058, \"start_time\": \"2024-03-28T18:00:00\", \"end_time\": \"2024-03-28T20:00:00\", \"id\": \"87c495c60ef585bdbd71af78b8d97c5d\", \"metric_id\": \"0769ae865343d293e66911895e841c15\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4863010829205867, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T18:00:00\", \"bucket_end\": \"2024-03-28T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 733252.0, \"min_metric_value\": 635454.7523514942, \"max_metric_value\": 766249.2476485058, \"training_avg\": 700852.0, \"training_stddev\": 21799.08254950194, \"training_set_size\": 10, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 203.68 hours ago. Usually the table is updated within 194.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 740452.0, \"average\": 704452.0, \"min_value\": 632812.9045283233, \"max_value\": 776091.0954716767, \"start_time\": \"2024-03-28T20:00:00\", \"end_time\": \"2024-03-28T22:00:00\", \"id\": \"ca6cce1befbcff94a9b89e9030931f38\", \"metric_id\": \"a1feabb433e2bbc79d05ba1c4c8c241f\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.507556722888818, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T20:00:00\", \"bucket_end\": \"2024-03-28T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 740452.0, \"min_metric_value\": 632812.9045283233, \"max_metric_value\": 776091.0954716767, \"training_avg\": 704452.0, \"training_stddev\": 23879.69849055888, \"training_set_size\": 11, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 205.68 hours ago. Usually the table is updated within 195.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 747652.0, \"average\": 708052.0, \"min_value\": 630172.0924499779, \"max_value\": 785931.9075500221, \"start_time\": \"2024-03-28T22:00:00\", \"end_time\": \"2024-03-29T00:00:00\", \"id\": \"0a1a8a6f2a40f05f92248706b569cdf4\", \"metric_id\": \"34f60a97e0e8336292c6d6ea165eaa62\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.52542553961938, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T22:00:00\", \"bucket_end\": \"2024-03-29T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 747652.0, \"min_metric_value\": 630172.0924499779, \"max_metric_value\": 785931.9075500221, \"training_avg\": 708052.0, \"training_stddev\": 25959.969183340723, \"training_set_size\": 12, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 207.68 hours ago. Usually the table is updated within 196.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 754852.0, \"average\": 711652.0, \"min_value\": 627532.085592055, \"max_value\": 795771.914407945, \"start_time\": \"2024-03-29T00:00:00\", \"end_time\": \"2024-03-29T02:00:00\", \"id\": \"56948b36f0ac3aec8d7847b00f786765\", \"metric_id\": \"801997e365a24c8eda92ba59fc6cae1a\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5406577730392865, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T00:00:00\", \"bucket_end\": \"2024-03-29T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 754852.0, \"min_metric_value\": 627532.085592055, \"max_metric_value\": 795771.914407945, \"training_avg\": 711652.0, \"training_stddev\": 28039.971469315013, \"training_set_size\": 13, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 209.68 hours ago. Usually the table is updated within 197.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 762052.0, \"average\": 715252.0, \"min_value\": 624892.7171343198, \"max_value\": 805611.2828656802, \"start_time\": \"2024-03-29T02:00:00\", \"end_time\": \"2024-03-29T04:00:00\", \"id\": \"2031ab8ce2e14f466222b9f1834d31e4\", \"metric_id\": \"7720e98491b1863d1ec5c562669d1560\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5537971921347118, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T02:00:00\", \"bucket_end\": \"2024-03-29T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 762052.0, \"min_metric_value\": 624892.7171343198, \"max_metric_value\": 805611.2828656802, \"training_avg\": 715252.0, \"training_stddev\": 30119.76095522672, \"training_set_size\": 14, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 211.68 hours ago. Usually the table is updated within 198.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 769252.0, \"average\": 718852.0, \"min_value\": 622253.8633720091, \"max_value\": 815450.1366279909, \"start_time\": \"2024-03-29T04:00:00\", \"end_time\": \"2024-03-29T06:00:00\", \"id\": \"28c47757ca466a788794361a79c06c6a\", \"metric_id\": \"e198601fa0d889c8228ed26757fe15ac\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5652475842498528, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T04:00:00\", \"bucket_end\": \"2024-03-29T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 769252.0, \"min_metric_value\": 622253.8633720091, \"max_metric_value\": 815450.1366279909, \"training_avg\": 718852.0, \"training_stddev\": 32199.378875996972, \"training_set_size\": 15, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 213.68 hours ago. Usually the table is updated within 199.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 776452.0, \"average\": 722452.0, \"min_value\": 619615.430628983, \"max_value\": 825288.569371017, \"start_time\": \"2024-03-29T06:00:00\", \"end_time\": \"2024-03-29T08:00:00\", \"id\": \"fa839e51aede8418a80ed990441b81c7\", \"metric_id\": \"e3331a2038a4bc5d28783b9a46815074\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.575315094531511, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T06:00:00\", \"bucket_end\": \"2024-03-29T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 776452.0, \"min_metric_value\": 619615.430628983, \"max_metric_value\": 825288.569371017, \"training_avg\": 722452.0, \"training_stddev\": 34278.85645700568, \"training_set_size\": 16, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 215.68 hours ago. Usually the table is updated within 200.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 783652.0, \"average\": 726052.0, \"min_value\": 616977.3466656896, \"max_value\": 835126.6533343104, \"start_time\": \"2024-03-29T08:00:00\", \"end_time\": \"2024-03-29T10:00:00\", \"id\": \"efc8485378a802de3eea438927128662\", \"metric_id\": \"35389d069ad45734185f5a0ed51f56e3\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.584236068762679, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T08:00:00\", \"bucket_end\": \"2024-03-29T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 783652.0, \"min_metric_value\": 616977.3466656896, \"max_metric_value\": 835126.6533343104, \"training_avg\": 726052.0, \"training_stddev\": 36358.21777810348, \"training_set_size\": 17, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 217.68 hours ago. Usually the table is updated within 201.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 790852.0, \"average\": 729652.0, \"min_value\": 614339.5548780619, \"max_value\": 844964.4451219381, \"start_time\": \"2024-03-29T10:00:00\", \"end_time\": \"2024-03-29T12:00:00\", \"id\": \"19a245f227557c8045b599a147ce6ff7\", \"metric_id\": \"c350a2fc206539ee3f5aea94945f1a9f\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5921958796888798, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T10:00:00\", \"bucket_end\": \"2024-03-29T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 790852.0, \"min_metric_value\": 614339.5548780619, \"max_metric_value\": 844964.4451219381, \"training_avg\": 729652.0, \"training_stddev\": 38437.48170731272, \"training_set_size\": 18, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 219.68 hours ago. Usually the table is updated within 202.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 798052.0, \"average\": 733252.0, \"min_value\": 611702.0102838343, \"max_value\": 854801.9897161657, \"start_time\": \"2024-03-29T12:00:00\", \"end_time\": \"2024-03-29T14:00:00\", \"id\": \"f7ae0c0d37791174b0fbd42783316d0b\", \"metric_id\": \"c2d0ed2094b294863dd399d533be7578\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5993419699495495, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T12:00:00\", \"bucket_end\": \"2024-03-29T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 798052.0, \"min_metric_value\": 611702.0102838343, \"max_metric_value\": 854801.9897161657, \"training_avg\": 733252.0, \"training_stddev\": 40516.663238721914, \"training_set_size\": 19, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 221.68 hours ago. Usually the table is updated within 203.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 805252.0, \"average\": 736852.0, \"min_value\": 609064.6766850483, \"max_value\": 864639.3233149517, \"start_time\": \"2024-03-29T14:00:00\", \"end_time\": \"2024-03-29T16:00:00\", \"id\": \"2ae312e578947bfeabcf4b905d9e05f3\", \"metric_id\": \"e807e0136c3a291450e0f8b9b496206a\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6057930839841816, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T14:00:00\", \"bucket_end\": \"2024-03-29T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 805252.0, \"min_metric_value\": 609064.6766850483, \"max_metric_value\": 864639.3233149517, \"training_avg\": 736852.0, \"training_stddev\": 42595.77443831723, \"training_set_size\": 20, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 223.68 hours ago. Usually the table is updated within 204.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 812452.0, \"average\": 740452.0, \"min_value\": 606427.5246232988, \"max_value\": 874476.4753767012, \"start_time\": \"2024-03-29T16:00:00\", \"end_time\": \"2024-03-29T18:00:00\", \"id\": \"17e7d2fa37733a5311cce1c34e4e385d\", \"metric_id\": \"96c8874e1b93c529580e86eb6d634fc8\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6116459280507607, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T16:00:00\", \"bucket_end\": \"2024-03-29T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 812452.0, \"min_metric_value\": 606427.5246232988, \"max_metric_value\": 874476.4753767012, \"training_avg\": 740452.0, \"training_stddev\": 44674.825125567084, \"training_set_size\": 21, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 225.68 hours ago. Usually the table is updated within 205.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 819652.0, \"average\": 744052.0, \"min_value\": 603790.5298807973, \"max_value\": 884313.4701192027, \"start_time\": \"2024-03-29T18:00:00\", \"end_time\": \"2024-03-29T20:00:00\", \"id\": \"394655011cb7cbe95dff47994a014ccc\", \"metric_id\": \"b61fbe2c5d222c8cb45b08d2e5a13178\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.616980057368938, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T18:00:00\", \"bucket_end\": \"2024-03-29T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 819652.0, \"min_metric_value\": 603790.5298807973, \"max_metric_value\": 884313.4701192027, \"training_avg\": 744052.0, \"training_stddev\": 46753.82337306758, \"training_set_size\": 22, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 227.68 hours ago. Usually the table is updated within 206.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 826852.0, \"average\": 747652.0, \"min_value\": 601153.6723644942, \"max_value\": 894150.3276355058, \"start_time\": \"2024-03-29T20:00:00\", \"end_time\": \"2024-03-29T22:00:00\", \"id\": \"86999c74117c0550e0aff3a7b2346710\", \"metric_id\": \"5d41db3e2978489948d6355ba623d06b\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6218615177038684, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T20:00:00\", \"bucket_end\": \"2024-03-29T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 826852.0, \"min_metric_value\": 601153.6723644942, \"max_metric_value\": 894150.3276355058, \"training_avg\": 747652.0, \"training_stddev\": 48832.77587850193, \"training_set_size\": 23, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 229.68 hours ago. Usually the table is updated within 207.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 834052.0, \"average\": 751252.0, \"min_value\": 598516.9352637057, \"max_value\": 903987.0647362943, \"start_time\": \"2024-03-29T22:00:00\", \"end_time\": \"2024-03-30T00:00:00\", \"id\": \"e0c7c075833f7dcbb0cc647573fbcb3e\", \"metric_id\": \"fbb4c6bed96c455e4d87b42de51f5420\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6263455967290594, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T22:00:00\", \"bucket_end\": \"2024-03-30T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 834052.0, \"min_metric_value\": 598516.9352637057, \"max_metric_value\": 903987.0647362943, \"training_avg\": 751252.0, \"training_stddev\": 50911.68824543142, \"training_set_size\": 24, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 231.68 hours ago. Usually the table is updated within 208.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 841252.0, \"average\": 754852.0, \"min_value\": 595880.3044060988, \"max_value\": 913823.6955939012, \"start_time\": \"2024-03-30T00:00:00\", \"end_time\": \"2024-03-30T02:00:00\", \"id\": \"806ea5133ff2dec3c4de8f25368c9b23\", \"metric_id\": \"01840e3c547f3b6d3ddb5bf348bbc74c\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.630478929168218, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T00:00:00\", \"bucket_end\": \"2024-03-30T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 841252.0, \"min_metric_value\": 595880.3044060988, \"max_metric_value\": 913823.6955939012, \"training_avg\": 754852.0, \"training_stddev\": 52990.56519796708, \"training_set_size\": 25, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 233.68 hours ago. Usually the table is updated within 209.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 848452.0, \"average\": 758452.0, \"min_value\": 593243.7677595938, \"max_value\": 923660.2322404062, \"start_time\": \"2024-03-30T02:00:00\", \"end_time\": \"2024-03-30T04:00:00\", \"id\": \"c84714b60b1c7bda48a1f74be4d760a6\", \"metric_id\": \"7569cb5dce8c3df6e85e333e89c5fbb7\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6343011261515337, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T02:00:00\", \"bucket_end\": \"2024-03-30T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 848452.0, \"min_metric_value\": 593243.7677595938, \"max_metric_value\": 923660.2322404062, \"training_avg\": 758452.0, \"training_stddev\": 55069.410746802074, \"training_set_size\": 26, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 235.68 hours ago. Usually the table is updated within 210.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 855652.0, \"average\": 762052.0, \"min_value\": 590607.3150430145, \"max_value\": 933496.6849569855, \"start_time\": \"2024-03-30T04:00:00\", \"end_time\": \"2024-03-30T06:00:00\", \"id\": \"5efa31748783205e9bbbe038220458b3\", \"metric_id\": \"e047a91304f89bcfb62e2651437b85a2\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6378460497066514, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T04:00:00\", \"bucket_end\": \"2024-03-30T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 855652.0, \"min_metric_value\": 590607.3150430145, \"max_metric_value\": 933496.6849569855, \"training_avg\": 762052.0, \"training_stddev\": 57148.228318995156, \"training_set_size\": 27, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 237.68 hours ago. Usually the table is updated within 211.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 862852.0, \"average\": 765652.0, \"min_value\": 587970.9374187558, \"max_value\": 943333.0625812442, \"start_time\": \"2024-03-30T06:00:00\", \"end_time\": \"2024-03-30T08:00:00\", \"id\": \"0ffb6c5d7801d22c5b7c1705632a42f5\", \"metric_id\": \"af17d504fdab25c7ed08332f0c389b29\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.641142819408043, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T06:00:00\", \"bucket_end\": \"2024-03-30T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 862852.0, \"min_metric_value\": 587970.9374187558, \"max_metric_value\": 943333.0625812442, \"training_avg\": 765652.0, \"training_stddev\": 59227.02086041472, \"training_set_size\": 28, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 239.68 hours ago. Usually the table is updated within 212.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 870052.0, \"average\": 769252.0, \"min_value\": 585334.6272479949, \"max_value\": 953169.3727520051, \"start_time\": \"2024-03-30T08:00:00\", \"end_time\": \"2024-03-30T10:00:00\", \"id\": \"8a1d7f87c349e91e9f35895e3c2457bb\", \"metric_id\": \"10dd94d3c2659d3029e4f8b8e04c41bd\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6442166146411699, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T08:00:00\", \"bucket_end\": \"2024-03-30T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 870052.0, \"min_metric_value\": 585334.6272479949, \"max_metric_value\": 953169.3727520051, \"training_avg\": 769252.0, \"training_stddev\": 61305.79091733504, \"training_set_size\": 29, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 241.68 hours ago. Usually the table is updated within 213.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 877252.0, \"average\": 772852.0, \"min_value\": 582698.3778940827, \"max_value\": 963005.6221059173, \"start_time\": \"2024-03-30T10:00:00\", \"end_time\": \"2024-03-30T12:00:00\", \"id\": \"fafaf15edd4515bd4a6e87bf6b030a26\", \"metric_id\": \"11dc8625b46c4e534e439842c7a6980b\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.647089319316488, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T10:00:00\", \"bucket_end\": \"2024-03-30T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 877252.0, \"min_metric_value\": 582698.3778940827, \"max_metric_value\": 963005.6221059173, \"training_avg\": 772852.0, \"training_stddev\": 63384.54070197243, \"training_set_size\": 30, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 243.68 hours ago. Usually the table is updated within 214.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 884452.0, \"average\": 776452.0, \"min_value\": 580062.1835634037, \"max_value\": 972841.8164365963, \"start_time\": \"2024-03-30T12:00:00\", \"end_time\": \"2024-03-30T14:00:00\", \"id\": \"1f4c9ce22847a090d2c3fdff1745454d\", \"metric_id\": \"e7c3f5e7579cb6ce0bf0d43731139417\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6497800439902246, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T12:00:00\", \"bucket_end\": \"2024-03-30T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 884452.0, \"min_metric_value\": 580062.1835634037, \"max_metric_value\": 972841.8164365963, \"training_avg\": 776452.0, \"training_stddev\": 65463.27214553211, \"training_set_size\": 31, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 245.68 hours ago. Usually the table is updated within 215.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 891652.0, \"average\": 780052.0, \"min_value\": 577426.0391756278, \"max_value\": 982677.9608243722, \"start_time\": \"2024-03-30T14:00:00\", \"end_time\": \"2024-03-30T16:00:00\", \"id\": \"447e4bb6914805788c0bd194c495be3f\", \"metric_id\": \"9d09184bf3fca6c5d74259b715cdbad7\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6523055517559808, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T14:00:00\", \"bucket_end\": \"2024-03-30T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 891652.0, \"min_metric_value\": 577426.0391756278, \"max_metric_value\": 982677.9608243722, \"training_avg\": 780052.0, \"training_stddev\": 67541.98694145739, \"training_set_size\": 32, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 247.68 hours ago. Usually the table is updated within 216.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 898852.0, \"average\": 783652.0, \"min_value\": 574789.9402572119, \"max_value\": 992514.0597427881, \"start_time\": \"2024-03-30T16:00:00\", \"end_time\": \"2024-03-30T18:00:00\", \"id\": \"f8848269985b6b9ee4d16d3fbfb049d4\", \"metric_id\": \"f0c0b16b2d3c53159c66cd318e447c73\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6546806079840612, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T16:00:00\", \"bucket_end\": \"2024-03-30T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 898852.0, \"min_metric_value\": 574789.9402572119, \"max_metric_value\": 992514.0597427881, \"training_avg\": 783652.0, \"training_stddev\": 69620.68658092938, \"training_set_size\": 33, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 249.68 hours ago. Usually the table is updated within 217.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 906052.0, \"average\": 787252.0, \"min_value\": 572153.882853429, \"max_value\": 1002350.117146571, \"start_time\": \"2024-03-30T18:00:00\", \"end_time\": \"2024-03-30T20:00:00\", \"id\": \"d82b5d73f225122a09601f7fdba0afb8\", \"metric_id\": \"cc29d2a0188b07ac18b52056bcd52029\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6569182693363314, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T18:00:00\", \"bucket_end\": \"2024-03-30T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 906052.0, \"min_metric_value\": 572153.882853429, \"max_metric_value\": 1002350.117146571, \"training_avg\": 787252.0, \"training_stddev\": 71699.37238219035, \"training_set_size\": 34, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 251.68 hours ago. Usually the table is updated within 218.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 913252.0, \"average\": 790852.0, \"min_value\": 569517.8634552726, \"max_value\": 1012186.1365447274, \"start_time\": \"2024-03-30T20:00:00\", \"end_time\": \"2024-03-30T22:00:00\", \"id\": \"af9c04ee8f23f168c1f83afe951ae308\", \"metric_id\": \"4f3192a4ec2b2f225aab4f6a2bb4eeaf\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6590301240125063, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T20:00:00\", \"bucket_end\": \"2024-03-30T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 913252.0, \"min_metric_value\": 569517.8634552726, \"max_metric_value\": 1012186.1365447274, \"training_avg\": 790852.0, \"training_stddev\": 73778.04551490911, \"training_set_size\": 35, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 253.68 hours ago. Usually the table is updated within 219.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 920452.0, \"average\": 794452.0, \"min_value\": 566881.8789383809, \"max_value\": 1022022.1210616191, \"start_time\": \"2024-03-30T22:00:00\", \"end_time\": \"2024-03-31T00:00:00\", \"id\": \"b39dbefb3dfe337468dc4c7beb5ad24d\", \"metric_id\": \"28aa8e2acc041ceaa7931e17ada8c1f4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6610264925668732, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T22:00:00\", \"bucket_end\": \"2024-03-31T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 920452.0, \"min_metric_value\": 566881.8789383809, \"max_metric_value\": 1022022.1210616191, \"training_avg\": 794452.0, \"training_stddev\": 75856.70702053972, \"training_set_size\": 36, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 255.68 hours ago. Usually the table is updated within 220.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 927652.0, \"average\": 798052.0, \"min_value\": 564245.926511735, \"max_value\": 1031858.073488265, \"start_time\": \"2024-03-31T00:00:00\", \"end_time\": \"2024-03-31T02:00:00\", \"id\": \"cde09194358ec40965901c98067f33ea\", \"metric_id\": \"073214bf1b4924086171da658a87aa74\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6629165966448438, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T00:00:00\", \"bucket_end\": \"2024-03-31T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 927652.0, \"min_metric_value\": 564245.926511735, \"max_metric_value\": 1031858.073488265, \"training_avg\": 798052.0, \"training_stddev\": 77935.35782942169, \"training_set_size\": 37, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 257.68 hours ago. Usually the table is updated within 221.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 934852.0, \"average\": 801652.0, \"min_value\": 561610.003674357, \"max_value\": 1041693.996325643, \"start_time\": \"2024-03-31T02:00:00\", \"end_time\": \"2024-03-31T04:00:00\", \"id\": \"765dc5f45e1caa330155f7ad5e06dec6\", \"metric_id\": \"ac65d7233fea58e5ba487b3f3c5fface\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6647087014636357, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T02:00:00\", \"bucket_end\": \"2024-03-31T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 934852.0, \"min_metric_value\": 561610.003674357, \"max_metric_value\": 1041693.996325643, \"training_avg\": 801652.0, \"training_stddev\": 80013.99877521434, \"training_set_size\": 38, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 259.68 hours ago. Usually the table is updated within 222.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 942052.0, \"average\": 805252.0, \"min_value\": 558974.1081785862, \"max_value\": 1051529.8918214138, \"start_time\": \"2024-03-31T04:00:00\", \"end_time\": \"2024-03-31T06:00:00\", \"id\": \"a571bc6166476fb778ad4fddb4ffec53\", \"metric_id\": \"c235ccd3b7a9af23f38c3c7f35d2f6e1\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6664102366833555, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T04:00:00\", \"bucket_end\": \"2024-03-31T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 942052.0, \"min_metric_value\": 558974.1081785862, \"max_metric_value\": 1051529.8918214138, \"training_avg\": 805252.0, \"training_stddev\": 82092.63060713794, \"training_set_size\": 39, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 261.68 hours ago. Usually the table is updated within 223.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 949252.0, \"average\": 808852.0, \"min_value\": 556338.2379987973, \"max_value\": 1061365.7620012027, \"start_time\": \"2024-03-31T06:00:00\", \"end_time\": \"2024-03-31T08:00:00\", \"id\": \"7bdcd86058081383c1c31aed3baaf40b\", \"metric_id\": \"7dcaf04ea5de5720fe123c7e297e4485\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6680278993981879, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T06:00:00\", \"bucket_end\": \"2024-03-31T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 949252.0, \"min_metric_value\": 556338.2379987973, \"max_metric_value\": 1061365.7620012027, \"training_avg\": 808852.0, \"training_stddev\": 84171.25400040088, \"training_set_size\": 40, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 263.68 hours ago. Usually the table is updated within 224.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 956452.0, \"average\": 812452.0, \"min_value\": 553702.3913046437, \"max_value\": 1071201.6086953562, \"start_time\": \"2024-03-31T08:00:00\", \"end_time\": \"2024-03-31T10:00:00\", \"id\": \"8656700aa0340e6838aa60ce445f19e6\", \"metric_id\": \"d5983c913d785724828f121f380cf341\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6695677422593644, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T08:00:00\", \"bucket_end\": \"2024-03-31T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 956452.0, \"min_metric_value\": 553702.3913046437, \"max_metric_value\": 1071201.6086953562, \"training_avg\": 812452.0, \"training_stddev\": 86249.86956511876, \"training_set_size\": 41, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 265.68 hours ago. Usually the table is updated within 225.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 963652.0, \"average\": 816052.0, \"min_value\": 551066.5664380776, \"max_value\": 1081037.4335619225, \"start_time\": \"2024-03-31T10:00:00\", \"end_time\": \"2024-03-31T12:00:00\", \"id\": \"6717d882ab05ecd8f786a10b1ebb9798\", \"metric_id\": \"46dd93accc42b43a6a32a33f1d2bc7ff\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.671035249175406, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T10:00:00\", \"bucket_end\": \"2024-03-31T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 963652.0, \"min_metric_value\": 551066.5664380776, \"max_metric_value\": 1081037.4335619225, \"training_avg\": 816052.0, \"training_stddev\": 88328.47785397414, \"training_set_size\": 42, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 267.68 hours ago. Usually the table is updated within 226.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 970852.0, \"average\": 819652.0, \"min_value\": 548430.761893542, \"max_value\": 1090873.238106458, \"start_time\": \"2024-03-31T12:00:00\", \"end_time\": \"2024-03-31T14:00:00\", \"id\": \"49f7850723beb49ae34d9e235fd42dfe\", \"metric_id\": \"d9d60c1fcac8212c41bac8112428b37d\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6724354005859816, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T12:00:00\", \"bucket_end\": \"2024-03-31T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 970852.0, \"min_metric_value\": 548430.761893542, \"max_metric_value\": 1090873.238106458, \"training_avg\": 819652.0, \"training_stddev\": 90407.07936881934, \"training_set_size\": 43, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 269.68 hours ago. Usually the table is updated within 227.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 978052.0, \"average\": 823252.0, \"min_value\": 545794.9763008333, \"max_value\": 1100709.0236991667, \"start_time\": \"2024-03-31T14:00:00\", \"end_time\": \"2024-03-31T16:00:00\", \"id\": \"2e6666d31b3718c202d4e0571a2537b3\", \"metric_id\": \"bb1e9d1fa5c926408720bb4cfa4f0d56\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6737727299472744, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T14:00:00\", \"bucket_end\": \"2024-03-31T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 978052.0, \"min_metric_value\": 545794.9763008333, \"max_metric_value\": 1100709.0236991667, \"training_avg\": 823252.0, \"training_stddev\": 92485.67456638893, \"training_set_size\": 44, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 271.68 hours ago. Usually the table is updated within 228.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 985252.0, \"average\": 826852.0, \"min_value\": 543159.2084102242, \"max_value\": 1110544.7915897758, \"start_time\": \"2024-03-31T16:00:00\", \"end_time\": \"2024-03-31T18:00:00\", \"id\": \"03527952c4abbc31fd11d7ef85cc36ce\", \"metric_id\": \"e3be39f72b99da51582a3c619fdbf344\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6750513727791383, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T16:00:00\", \"bucket_end\": \"2024-03-31T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 985252.0, \"min_metric_value\": 543159.2084102242, \"max_metric_value\": 1110544.7915897758, \"training_avg\": 826852.0, \"training_stddev\": 94564.26386325862, \"training_set_size\": 45, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 273.68 hours ago. Usually the table is updated within 229.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 992452.0, \"average\": 830452.0, \"min_value\": 540523.4570795073, \"max_value\": 1120380.5429204926, \"start_time\": \"2024-03-31T18:00:00\", \"end_time\": \"2024-03-31T20:00:00\", \"id\": \"936c745f242c56cd38b152f4687b7b43\", \"metric_id\": \"061c37a98f79bdea3e3c02fe2723b09c\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6762751093923032, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T18:00:00\", \"bucket_end\": \"2024-03-31T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 992452.0, \"min_metric_value\": 540523.4570795073, \"max_metric_value\": 1120380.5429204926, \"training_avg\": 830452.0, \"training_stddev\": 96642.84764016424, \"training_set_size\": 46, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 275.68 hours ago. Usually the table is updated within 230.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 999652.0, \"average\": 834052.0, \"min_value\": 537887.7212626749, \"max_value\": 1130216.2787373252, \"start_time\": \"2024-03-31T20:00:00\", \"end_time\": \"2024-03-31T22:00:00\", \"id\": \"69fd6a03b41264056f011b676aca4711\", \"metric_id\": \"e21ef52c18441f48d9b9489d579b6c87\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6774474022257875, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T20:00:00\", \"bucket_end\": \"2024-03-31T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 999652.0, \"min_metric_value\": 537887.7212626749, \"max_metric_value\": 1130216.2787373252, \"training_avg\": 834052.0, \"training_stddev\": 98721.42624577503, \"training_set_size\": 47, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 277.68 hours ago. Usually the table is updated within 231.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1006852.0, \"average\": 837652.0, \"min_value\": 535252.0, \"max_value\": 1140052.0, \"start_time\": \"2024-03-31T22:00:00\", \"end_time\": \"2024-04-01T00:00:00\", \"id\": \"f5ba258b5a1d825e126cbcd6635900dd\", \"metric_id\": \"7114c4fb4afac06396f80596b484409a\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6785714285714286, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T22:00:00\", \"bucket_end\": \"2024-04-01T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1006852.0, \"min_metric_value\": 535252.0, \"max_metric_value\": 1140052.0, \"training_avg\": 837652.0, \"training_stddev\": 100800.0, \"training_set_size\": 48, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 279.68 hours ago. Usually the table is updated within 232.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1014052.0, \"average\": 841252.0, \"min_value\": 532616.2924093195, \"max_value\": 1149887.7075906806, \"start_time\": \"2024-04-01T00:00:00\", \"end_time\": \"2024-04-01T02:00:00\", \"id\": \"afc196f78bae3b0b88f57f1f8cae8786\", \"metric_id\": \"72be6ce9ab1dd92da3bd77eab09d682f\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6796501093370364, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T00:00:00\", \"bucket_end\": \"2024-04-01T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1014052.0, \"min_metric_value\": 532616.2924093195, \"max_metric_value\": 1149887.7075906806, \"training_avg\": 841252.0, \"training_stddev\": 102878.56919689348, \"training_set_size\": 49, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 281.68 hours ago. Usually the table is updated within 233.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1021252.0, \"average\": 844852.0, \"min_value\": 529980.5976783538, \"max_value\": 1159723.4023216462, \"start_time\": \"2024-04-01T02:00:00\", \"end_time\": \"2024-04-01T04:00:00\", \"id\": \"caa07a35427e9c592bdf9aae2f2ac4f5\", \"metric_id\": \"dbd3ad9b3b069b500e9bb075b9bce206\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6806861343965867, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T02:00:00\", \"bucket_end\": \"2024-04-01T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1021252.0, \"min_metric_value\": 529980.5976783538, \"max_metric_value\": 1159723.4023216462, \"training_avg\": 844852.0, \"training_stddev\": 104957.1341072154, \"training_set_size\": 50, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 283.68 hours ago. Usually the table is updated within 234.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1028452.0, \"average\": 848452.0, \"min_value\": 527344.9150579203, \"max_value\": 1169559.0849420796, \"start_time\": \"2024-04-01T04:00:00\", \"end_time\": \"2024-04-01T06:00:00\", \"id\": \"4b7ebeed67d261aff862cd75cf8836e0\", \"metric_id\": \"269e15f52c4f4e24947d251e068b99d4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6816819849907811, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T04:00:00\", \"bucket_end\": \"2024-04-01T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1028452.0, \"min_metric_value\": 527344.9150579203, \"max_metric_value\": 1169559.0849420796, \"training_avg\": 848452.0, \"training_stddev\": 107035.69498069324, \"training_set_size\": 51, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 285.68 hours ago. Usually the table is updated within 235.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1035652.0, \"average\": 852052.0, \"min_value\": 524709.243855924, \"max_value\": 1179394.7561440761, \"start_time\": \"2024-04-01T06:00:00\", \"end_time\": \"2024-04-01T08:00:00\", \"id\": \"05104ef17a430939ded1112cb26efac1\", \"metric_id\": \"02dddc74a4a641516a339110fc7f848e\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6826399535707826, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T06:00:00\", \"bucket_end\": \"2024-04-01T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1035652.0, \"min_metric_value\": 524709.243855924, \"max_metric_value\": 1179394.7561440761, \"training_avg\": 852052.0, \"training_stddev\": 109114.25204802533, \"training_set_size\": 52, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 287.68 hours ago. Usually the table is updated within 236.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1042852.0, \"average\": 855652.0, \"min_value\": 522073.5834320212, \"max_value\": 1189230.416567979, \"start_time\": \"2024-04-01T08:00:00\", \"end_time\": \"2024-04-01T10:00:00\", \"id\": \"518be66945ab885973b750fa7152cb0d\", \"metric_id\": \"fa555822124f561ebf1c812e9589ce77\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.683562161419258, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T08:00:00\", \"bucket_end\": \"2024-04-01T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1042852.0, \"min_metric_value\": 522073.5834320212, \"max_metric_value\": 1189230.416567979, \"training_avg\": 855652.0, \"training_stddev\": 111192.8055226596, \"training_set_size\": 53, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 289.68 hours ago. Usually the table is updated within 237.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1050052.0, \"average\": 859252.0, \"min_value\": 519437.9331928709, \"max_value\": 1199066.066807129, \"start_time\": \"2024-04-01T10:00:00\", \"end_time\": \"2024-04-01T12:00:00\", \"id\": \"b6dc8d26abbb0737b442b777a43921da\", \"metric_id\": \"96480178f7a4914272be7e6d3dbc0b10\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6844505743338798, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T10:00:00\", \"bucket_end\": \"2024-04-01T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1050052.0, \"min_metric_value\": 519437.9331928709, \"max_metric_value\": 1199066.066807129, \"training_avg\": 859252.0, \"training_stddev\": 113271.35560237637, \"training_set_size\": 54, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 291.68 hours ago. Usually the table is updated within 238.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1057252.0, \"average\": 862852.0, \"min_value\": 516802.2925879, \"max_value\": 1208901.7074121, \"start_time\": \"2024-04-01T12:00:00\", \"end_time\": \"2024-04-01T14:00:00\", \"id\": \"564ea60062d596701ca1a93fea7a5e75\", \"metric_id\": \"2d0e4f97f0b8742980e040fca8a869a2\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.68530701661737, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T12:00:00\", \"bucket_end\": \"2024-04-01T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1057252.0, \"min_metric_value\": 516802.2925879, \"max_metric_value\": 1208901.7074121, \"training_avg\": 862852.0, \"training_stddev\": 115349.90247069999, \"training_set_size\": 55, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 293.68 hours ago. Usually the table is updated within 239.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1064452.0, \"average\": 866452.0, \"min_value\": 514166.66110551805, \"max_value\": 1218737.338894482, \"start_time\": \"2024-04-01T14:00:00\", \"end_time\": \"2024-04-01T16:00:00\", \"id\": \"0b4b668422fe1d44614c006952fc4cf2\", \"metric_id\": \"315b998f944084f34e256ccfb1da48f3\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.686133183583656, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T14:00:00\", \"bucket_end\": \"2024-04-01T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1064452.0, \"min_metric_value\": 514166.66110551805, \"max_metric_value\": 1218737.338894482, \"training_avg\": 866452.0, \"training_stddev\": 117428.44629816065, \"training_set_size\": 56, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 295.68 hours ago. Usually the table is updated within 240.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1071652.0, \"average\": 870052.0, \"min_value\": 511531.03826972685, \"max_value\": 1228572.9617302732, \"start_time\": \"2024-04-01T16:00:00\", \"end_time\": \"2024-04-01T18:00:00\", \"id\": \"44e4c5a3ba23e1813887387a2a5e50c4\", \"metric_id\": \"f49d4913f0fc1b783887fdfe4b653ca5\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6869306527605783, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T16:00:00\", \"bucket_end\": \"2024-04-01T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1071652.0, \"min_metric_value\": 511531.03826972685, \"max_metric_value\": 1228572.9617302732, \"training_avg\": 870052.0, \"training_stddev\": 119506.98724342439, \"training_set_size\": 57, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 297.68 hours ago. Usually the table is updated within 241.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1078852.0, \"average\": 873652.0, \"min_value\": 508895.4236370782, \"max_value\": 1238408.5763629219, \"start_time\": \"2024-04-01T18:00:00\", \"end_time\": \"2024-04-01T20:00:00\", \"id\": \"2ff5ed668449afaeaf2ae890ffc4d6a5\", \"metric_id\": \"9e6b67c05d00770987a9219227505252\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.687700893944943, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T18:00:00\", \"bucket_end\": \"2024-04-01T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1078852.0, \"min_metric_value\": 508895.4236370782, \"max_metric_value\": 1238408.5763629219, \"training_avg\": 873652.0, \"training_stddev\": 121585.52545430727, \"training_set_size\": 58, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 299.68 hours ago. Usually the table is updated within 242.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1461.0, \"average\": 858869.1016949152, \"min_value\": 362084.4021514496, \"max_value\": 1355653.8012383808, \"start_time\": \"2024-04-09T04:00:00\", \"end_time\": \"2024-04-09T06:00:00\", \"id\": \"0fe690ac6d8dc35dcdf8abfc8d793e8e\", \"metric_id\": \"cd222eca29f1654604970d9c6190adee\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -5.177744619446943, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 05:35:39.196338\", \"bucket_start\": \"2024-04-09T04:00:00\", \"bucket_end\": \"2024-04-09T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1461.0, \"min_metric_value\": 362084.4021514496, \"max_metric_value\": 1355653.8012383808, \"training_avg\": 858869.1016949152, \"training_stddev\": 165594.8998478219, \"training_set_size\": 59, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 05:35:39.196338, 0.41 hours ago. Usually the table is updated within 238.57 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 8661.0, \"average\": 844698.9666666667, \"min_value\": 252212.5589002472, \"max_value\": 1437185.3744330863, \"start_time\": \"2024-04-09T06:00:00\", \"end_time\": \"2024-04-09T08:00:00\", \"id\": \"1c8bf384dd7b2849149ce0b5451d3213\", \"metric_id\": \"334fb2954aee8ba064d239d2f8132ccf\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -4.233200740343047, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 05:35:39.196338\", \"bucket_start\": \"2024-04-09T06:00:00\", \"bucket_end\": \"2024-04-09T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 8661.0, \"min_metric_value\": 252212.5589002472, \"max_metric_value\": 1437185.3744330863, \"training_avg\": 844698.9666666667, \"training_stddev\": 197495.46925547317, \"training_set_size\": 60, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 05:35:39.196338, 2.41 hours ago. Usually the table is updated within 234.64 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 15861.0, \"average\": 831111.4590163934, \"min_value\": 162870.44392694812, \"max_value\": 1499352.4741058387, \"start_time\": \"2024-04-09T08:00:00\", \"end_time\": \"2024-04-09T10:00:00\", \"id\": \"d1f7a664692b87fcebff4c8690bb5157\", \"metric_id\": \"463a62b3842e3579bb09150f88136f67\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -3.6599839306807773, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 05:35:39.196338\", \"bucket_start\": \"2024-04-09T08:00:00\", \"bucket_end\": \"2024-04-09T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 15861.0, \"min_metric_value\": 162870.44392694812, \"max_metric_value\": 1499352.4741058387, \"training_avg\": 831111.4590163934, \"training_stddev\": 222747.00502981507, \"training_set_size\": 61, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 05:35:39.196338, 4.41 hours ago. Usually the table is updated within 230.86 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 711.0, \"average\": 817717.9032258064, \"min_value\": 83331.24688172352, \"max_value\": 1552104.5595698892, \"start_time\": \"2024-04-09T10:00:00\", \"end_time\": \"2024-04-09T12:00:00\", \"id\": \"ee2768b9488d9bcecd7beb86bec1dc9a\", \"metric_id\": \"83f3a12c89302c4515c7219ac1f6fb18\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -3.337507140828332, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T10:00:00\", \"bucket_end\": \"2024-04-09T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 711.0, \"min_metric_value\": 83331.24688172352, \"max_metric_value\": 1552104.5595698892, \"training_avg\": 817717.9032258064, \"training_stddev\": 244795.55211469432, \"training_set_size\": 62, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 0.20 hours ago. Usually the table is updated within 227.14 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 7911.0, \"average\": 804863.8253968254, \"min_value\": 14731.634354170645, \"max_value\": 1594996.0164394802, \"start_time\": \"2024-04-09T12:00:00\", \"end_time\": \"2024-04-09T14:00:00\", \"id\": \"928f56d64aa86d78c99aab08c6300b73\", \"metric_id\": \"0b5bfcac3e6f236115c3d36d34f4fe26\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -3.025896809792689, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T12:00:00\", \"bucket_end\": \"2024-04-09T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 7911.0, \"min_metric_value\": 14731.634354170645, \"max_metric_value\": 1594996.0164394802, \"training_avg\": 804863.8253968254, \"training_stddev\": 263377.39701421827, \"training_set_size\": 63, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 2.20 hours ago. Usually the table is updated within 223.57 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 15111.0, \"average\": 792523.9375, \"min_value\": 0.0, \"max_value\": 1630443.006715582, \"start_time\": \"2024-04-09T14:00:00\", \"end_time\": \"2024-04-09T16:00:00\", \"id\": \"3b80a998a6d5f063460f9d7307e50237\", \"metric_id\": \"d465dce2dcfb5115f29661e94beb86ae\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.7833700152967347, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T14:00:00\", \"bucket_end\": \"2024-04-09T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 15111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1630443.006715582, \"training_avg\": 792523.9375, \"training_stddev\": 279306.356405194, \"training_set_size\": 64, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 4.20 hours ago. Usually the table is updated within 220.15 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 22311.0, \"average\": 780674.5076923077, \"min_value\": 0.0, \"max_value\": 1660036.310698686, \"start_time\": \"2024-04-09T16:00:00\", \"end_time\": \"2024-04-09T18:00:00\", \"id\": \"e0f1594ff935f5bd7cfc4993e6274a31\", \"metric_id\": \"4958ed1f1b8a586b7a2db8372b650948\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.587206443694509, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T16:00:00\", \"bucket_end\": \"2024-04-09T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 22311.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1660036.310698686, \"training_avg\": 780674.5076923077, \"training_stddev\": 293120.60100212606, \"training_set_size\": 65, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 6.20 hours ago. Usually the table is updated within 216.85 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 29511.0, \"average\": 769293.2424242424, \"min_value\": 0.0, \"max_value\": 1684893.225410389, \"start_time\": \"2024-04-09T18:00:00\", \"end_time\": \"2024-04-09T20:00:00\", \"id\": \"ca34ddd16fb4fa1c3e8893b5352bacb3\", \"metric_id\": \"3416bd4caf660466cce434ca4b320793\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.423926134243175, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T18:00:00\", \"bucket_end\": \"2024-04-09T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 29511.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1684893.225410389, \"training_avg\": 769293.2424242424, \"training_stddev\": 305199.99432871555, \"training_set_size\": 66, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 8.20 hours ago. Usually the table is updated within 213.69 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 36711.0, \"average\": 758359.1791044776, \"min_value\": 0.0, \"max_value\": 1705836.0209617326, \"start_time\": \"2024-04-09T20:00:00\", \"end_time\": \"2024-04-09T22:00:00\", \"id\": \"0a63fceaee075806d5e5eb79fa4a1b26\", \"metric_id\": \"7d781ffb018ac334990583fe93336342\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.2849577337106033, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T20:00:00\", \"bucket_end\": \"2024-04-09T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 36711.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1705836.0209617326, \"training_avg\": 758359.1791044776, \"training_stddev\": 315825.6139524183, \"training_set_size\": 67, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 10.20 hours ago. Usually the table is updated within 210.66 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 43911.0, \"average\": 747852.5882352941, \"min_value\": 0.0, \"max_value\": 1723491.5615568063, \"start_time\": \"2024-04-09T22:00:00\", \"end_time\": \"2024-04-10T00:00:00\", \"id\": \"bedd1ac9c20ae93eb1edacfecd4463b6\", \"metric_id\": \"8c4840b3a20b39e102b4c7b5dda71e74\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.1645555604613507, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T22:00:00\", \"bucket_end\": \"2024-04-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 43911.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1723491.5615568063, \"training_avg\": 747852.5882352941, \"training_stddev\": 325212.9911071707, \"training_set_size\": 68, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 12.20 hours ago. Usually the table is updated within 207.74 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 51111.0, \"average\": 737754.8840579711, \"min_value\": 0.0, \"max_value\": 1738351.0620251638, \"start_time\": \"2024-04-10T00:00:00\", \"end_time\": \"2024-04-10T02:00:00\", \"id\": \"514c6960a64b86745560deac191ca981\", \"metric_id\": \"dba05b3f506ecd006f06b13728494ebc\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.0587042980304626, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T00:00:00\", \"bucket_end\": \"2024-04-10T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 51111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1738351.0620251638, \"training_avg\": 737754.8840579711, \"training_stddev\": 333532.0593223975, \"training_set_size\": 69, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 14.20 hours ago. Usually the table is updated within 204.93 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 58311.0, \"average\": 728048.5428571429, \"min_value\": 0.0, \"max_value\": 1750807.9962755837, \"start_time\": \"2024-04-10T02:00:00\", \"end_time\": \"2024-04-10T04:00:00\", \"id\": \"1db8c92ed9950719102eb1f03afa2a4b\", \"metric_id\": \"021744640f8b4861a66e1c52366e49eb\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.9645016448940131, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T02:00:00\", \"bucket_end\": \"2024-04-10T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 58311.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1750807.9962755837, \"training_avg\": 728048.5428571429, \"training_stddev\": 340919.8178061469, \"training_set_size\": 70, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 16.20 hours ago. Usually the table is updated within 202.24 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 65511.0, \"average\": 718717.0281690141, \"min_value\": 0.0, \"max_value\": 1761183.2504471648, \"start_time\": \"2024-04-10T04:00:00\", \"end_time\": \"2024-04-10T06:00:00\", \"id\": \"e3d32a21bd12666aedc16289463ed230\", \"metric_id\": \"36aa57d25c113e1235249dc4641e8239\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.879790483978077, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T04:00:00\", \"bucket_end\": \"2024-04-10T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 65511.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1761183.2504471648, \"training_avg\": 718717.0281690141, \"training_stddev\": 347488.74075938354, \"training_set_size\": 71, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 18.20 hours ago. Usually the table is updated within 199.64 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 72711.0, \"average\": 709744.7222222222, \"min_value\": 0.0, \"max_value\": 1769742.439092498, \"start_time\": \"2024-04-10T06:00:00\", \"end_time\": \"2024-04-10T08:00:00\", \"id\": \"7bb799ad90872baa5c0aaf6d0fda3c70\", \"metric_id\": \"14fb41376012ced174833d60e82b556d\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.8029295122534217, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T06:00:00\", \"bucket_end\": \"2024-04-10T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 72711.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1769742.439092498, \"training_avg\": 709744.7222222222, \"training_stddev\": 353332.5722900919, \"training_set_size\": 72, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 20.20 hours ago. Usually the table is updated within 197.15 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 79911.0, \"average\": 701116.8630136986, \"min_value\": 0.0, \"max_value\": 1776708.1987732793, \"start_time\": \"2024-04-10T08:00:00\", \"end_time\": \"2024-04-10T10:00:00\", \"id\": \"13c59916050ff727da6f488371afb3c5\", \"metric_id\": \"89cdebe26c520884fbf46ccc6820868e\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.7326446644580051, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T08:00:00\", \"bucket_end\": \"2024-04-10T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 79911.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1776708.1987732793, \"training_avg\": 701116.8630136986, \"training_stddev\": 358530.4452531935, \"training_set_size\": 73, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 22.20 hours ago. Usually the table is updated within 194.75 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 87111.0, \"average\": 692819.4864864865, \"min_value\": 0.0, \"max_value\": 1782269.1465368192, \"start_time\": \"2024-04-10T10:00:00\", \"end_time\": \"2024-04-10T12:00:00\", \"id\": \"891d56e44b1c2a654407424cc0f33e07\", \"metric_id\": \"2dbea3ddfa0330ffb20c7dcf74bc9846\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.6679297135909041, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T10:00:00\", \"bucket_end\": \"2024-04-10T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 87111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1782269.1465368192, \"training_avg\": 692819.4864864865, \"training_stddev\": 363149.88668344426, \"training_set_size\": 74, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 24.20 hours ago. Usually the table is updated within 192.45 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 94311.0, \"average\": 684839.3733333333, \"min_value\": 0.0, \"max_value\": 1786586.555771521, \"start_time\": \"2024-04-10T12:00:00\", \"end_time\": \"2024-04-10T14:00:00\", \"id\": \"ec0c0f98e13500ed34598f8c8d781c95\", \"metric_id\": \"b2702cb5bd4a0bc500a3981f88beeaed\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.6079778993211926, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T12:00:00\", \"bucket_end\": \"2024-04-10T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 94311.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1786586.555771521, \"training_avg\": 684839.3733333333, \"training_stddev\": 367249.06081272924, \"training_set_size\": 75, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 26.20 hours ago. Usually the table is updated within 190.23 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 101511.0, \"average\": 677164.0, \"min_value\": 0.0, \"max_value\": 1789799.4284587922, \"start_time\": \"2024-04-10T14:00:00\", \"end_time\": \"2024-04-10T16:00:00\", \"id\": \"4dc7e096690821d74e6dfdafa1c2f0c7\", \"metric_id\": \"52a198388fd4294f6930effb0a850909\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.552133750039005, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T14:00:00\", \"bucket_end\": \"2024-04-10T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 101511.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1789799.4284587922, \"training_avg\": 677164.0, \"training_stddev\": 370878.4761529307, \"training_set_size\": 76, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 28.20 hours ago. Usually the table is updated within 188.10 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 108711.0, \"average\": 669781.4935064935, \"min_value\": 0.0, \"max_value\": 1792028.4149056615, \"start_time\": \"2024-04-10T16:00:00\", \"end_time\": \"2024-04-10T18:00:00\", \"id\": \"dcf0c12693ecded0475a4e741db82273\", \"metric_id\": \"9dd73f25729043ff9a935507d67d98b3\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.4998584076496522, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T16:00:00\", \"bucket_end\": \"2024-04-10T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 108711.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1792028.4149056615, \"training_avg\": 669781.4935064935, \"training_stddev\": 374082.307133056, \"training_set_size\": 77, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 30.20 hours ago. Usually the table is updated within 186.05 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 115911.0, \"average\": 662680.5897435897, \"min_value\": 0.0, \"max_value\": 1793378.8884021665, \"start_time\": \"2024-04-10T18:00:00\", \"end_time\": \"2024-04-10T20:00:00\", \"id\": \"5dba1d7cb32a7b7fdcc21c97b9408b5d\", \"metric_id\": \"08871662dcfe0b4c6e81cf26a560bc8c\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.450704198614942, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T18:00:00\", \"bucket_end\": \"2024-04-10T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 115911.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1793378.8884021665, \"training_avg\": 662680.5897435897, \"training_stddev\": 376899.4328861923, \"training_set_size\": 78, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 32.20 hours ago. Usually the table is updated within 184.08 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 123111.0, \"average\": 655850.5949367088, \"min_value\": 0.0, \"max_value\": 1793943.3891430632, \"start_time\": \"2024-04-10T20:00:00\", \"end_time\": \"2024-04-10T22:00:00\", \"id\": \"9011d9eb67e6c048510c8e0e433f0880\", \"metric_id\": \"94c5f4a88f3c24f8a7f5a0fbb4974dbc\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.4042956716237183, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T20:00:00\", \"bucket_end\": \"2024-04-10T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 123111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1793943.3891430632, \"training_avg\": 655850.5949367088, \"training_stddev\": 379364.26473545143, \"training_set_size\": 79, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 34.20 hours ago. Usually the table is updated within 182.18 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 130311.0, \"average\": 649281.35, \"min_value\": 0.0, \"max_value\": 1793803.589882207, \"start_time\": \"2024-04-10T22:00:00\", \"end_time\": \"2024-04-11T00:00:00\", \"id\": \"b6cd436f0ccb76e7750f9b8578e9387c\", \"metric_id\": \"b5468c5e7efa543d1d41ce3d5105446f\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.3603152439923187, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T22:00:00\", \"bucket_end\": \"2024-04-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 130311.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1793803.589882207, \"training_avg\": 649281.35, \"training_stddev\": 381507.41329406906, \"training_set_size\": 80, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 36.20 hours ago. Usually the table is updated within 180.36 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 137511.0, \"average\": 642963.1975308642, \"min_value\": 0.0, \"max_value\": 1793031.8937484073, \"start_time\": \"2024-04-11T00:00:00\", \"end_time\": \"2024-04-11T02:00:00\", \"id\": \"d8b7295353739bcb5e7f416648ef885c\", \"metric_id\": \"1b0178e022c1bf5cf3cad06249ffe6a9\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.3184921888403125, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T00:00:00\", \"bucket_end\": \"2024-04-11T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 137511.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1793031.8937484073, \"training_avg\": 642963.1975308642, \"training_stddev\": 383356.2320725143, \"training_set_size\": 81, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 38.20 hours ago. Usually the table is updated within 178.60 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 144711.0, \"average\": 636886.9512195121, \"min_value\": 0.0, \"max_value\": 1791692.7455115318, \"start_time\": \"2024-04-11T02:00:00\", \"end_time\": \"2024-04-11T04:00:00\", \"id\": \"7781060792aab1dec65a3dda3115520e\", \"metric_id\": \"12fef55a2e4f7635dad02405226c8dbe\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.2785940813223542, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T02:00:00\", \"bucket_end\": \"2024-04-11T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 144711.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1791692.7455115318, \"training_avg\": 636886.9512195121, \"training_stddev\": 384935.26476400654, \"training_set_size\": 82, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 40.20 hours ago. Usually the table is updated within 176.91 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 151911.0, \"average\": 631043.8674698796, \"min_value\": 0.0, \"max_value\": 1789843.717022076, \"start_time\": \"2024-04-11T04:00:00\", \"end_time\": \"2024-04-11T06:00:00\", \"id\": \"bcbd759abb7bc6a9007bde95e0ea6ab9\", \"metric_id\": \"ad8e1df818a7515214af1afa100987a7\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.240420080279699, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T04:00:00\", \"bucket_end\": \"2024-04-11T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 151911.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1789843.717022076, \"training_avg\": 631043.8674698796, \"training_stddev\": 386266.61651739886, \"training_set_size\": 83, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 42.20 hours ago. Usually the table is updated within 175.29 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 159111.0, \"average\": 625425.619047619, \"min_value\": 0.0, \"max_value\": 1787536.4127942035, \"start_time\": \"2024-04-11T06:00:00\", \"end_time\": \"2024-04-11T08:00:00\", \"id\": \"2f19b50663f97142d836eccd77831d63\", \"metric_id\": \"c096f3be0ddb5bf1174429a56d2867b5\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.2037955973481111, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T06:00:00\", \"bucket_end\": \"2024-04-11T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 159111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1787536.4127942035, \"training_avg\": 625425.619047619, \"training_stddev\": 387370.2645821948, \"training_set_size\": 84, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 44.20 hours ago. Usually the table is updated within 173.73 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 166311.0, \"average\": 620024.2705882353, \"min_value\": 0.0, \"max_value\": 1784817.2309600152, \"start_time\": \"2024-04-11T08:00:00\", \"end_time\": \"2024-04-11T10:00:00\", \"id\": \"55b4c3805a3272c49384a4460bb6b944\", \"metric_id\": \"fdd01322235c64cdd49bc8ed941d5141\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.168568027171332, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T08:00:00\", \"bucket_end\": \"2024-04-11T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 166311.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1784817.2309600152, \"training_avg\": 620024.2705882353, \"training_stddev\": 388264.32012392656, \"training_set_size\": 85, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 46.20 hours ago. Usually the table is updated within 172.23 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 173511.0, \"average\": 614832.2558139535, \"min_value\": 0.0, \"max_value\": 1781728.0068937212, \"start_time\": \"2024-04-11T10:00:00\", \"end_time\": \"2024-04-11T12:00:00\", \"id\": \"f8d87bd1bd62ad895a6487c05f84fc94\", \"metric_id\": \"e5d296abc0b9427c768a1a5e3560616e\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.1346032978667995, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T10:00:00\", \"bucket_end\": \"2024-04-11T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 173511.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1781728.0068937212, \"training_avg\": 614832.2558139535, \"training_stddev\": 388965.2503599226, \"training_set_size\": 86, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 48.20 hours ago. Usually the table is updated within 170.79 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 180711.0, \"average\": 609842.356321839, \"min_value\": 0.0, \"max_value\": 1778306.5608781106, \"start_time\": \"2024-04-11T12:00:00\", \"end_time\": \"2024-04-11T14:00:00\", \"id\": \"0313806b4b431eebf03fd94f5d14a2dd\", \"metric_id\": \"dbee61de882f0daeba244d7ea01cb7bd\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.101783061856319, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T12:00:00\", \"bucket_end\": \"2024-04-11T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 180711.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1778306.5608781106, \"training_avg\": 609842.356321839, \"training_stddev\": 389488.06818542385, \"training_set_size\": 87, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 50.20 hours ago. Usually the table is updated within 169.40 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 187911.0, \"average\": 605047.6818181818, \"min_value\": 0.0, \"max_value\": 1774587.1667049536, \"start_time\": \"2024-04-11T14:00:00\", \"end_time\": \"2024-04-11T16:00:00\", \"id\": \"d41fcb594149f7d054772a114b8faa14\", \"metric_id\": \"6f2da9c126dcbd6ff61e355fff1af560\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.0700023912195658, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T14:00:00\", \"bucket_end\": \"2024-04-11T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 187911.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1774587.1667049536, \"training_avg\": 605047.6818181818, \"training_stddev\": 389846.49496225733, \"training_set_size\": 88, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 52.20 hours ago. Usually the table is updated within 168.07 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 195111.0, \"average\": 600441.6516853933, \"min_value\": 0.0, \"max_value\": 1770600.954676879, \"start_time\": \"2024-04-11T16:00:00\", \"end_time\": \"2024-04-11T18:00:00\", \"id\": \"06d5cabb95f78225eff916ca88053c91\", \"metric_id\": \"f677fa34d389092a98c0abc764a9bd6d\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.0391678739360732, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T16:00:00\", \"bucket_end\": \"2024-04-11T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 195111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1770600.954676879, \"training_avg\": 600441.6516853933, \"training_stddev\": 390053.100997162, \"training_set_size\": 89, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 54.20 hours ago. Usually the table is updated within 166.79 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}]}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-09T08:14:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240409081412656383\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-09T08:18:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240409081818192129\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-09T11:26:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240409112640960167\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-11T18:30:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240411183010417655\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-11T18:31:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240411183056369533\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"e5950404e39b59bd55583f880e568dcd\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-09T08:14:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240409081412524360\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"33901830a9d3cf76170a4576a8fae415\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-09T08:18:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240409081818197364\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d9fc0e925e1e3e4d801abdf3ec2ac5af\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240409112641005111\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c4ed840ab53d301abeddccc7b0eef3c1\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-11T18:30:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  \\n\\n  \\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240411183010658854\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2379a5088fec26da6562405c418a9adb\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-11T18:30:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  \\n\\n  \\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240411183056667755\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-09T08:18:13\", \"id\": \"7a26a256a84a0baa92900c4adb6b5fb8\", \"metric_id\": \"005d012ddbc7480ef339360184826afa\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-09T08:18:13\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-09T08:18:13\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-01T20:58:55\", \"id\": \"f9263f67d0f217ecb5e8911b99381094\", \"metric_id\": \"f9fb50e3e2f23f987651be20732d3b6e\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-01T20:58:55\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-01T20:58:55\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-01T21:00:24\", \"id\": \"6801707738eff2d1f2779748499d0e00\", \"metric_id\": \"8e64f1bb19810a5b1c09bb9189e1e479\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-01T21:00:24\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-01T21:00:24\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-09T08:14:06\", \"id\": \"05a25c9842e4e3592192994215a88702\", \"metric_id\": \"aa790eb5141997c8be9fba8e5832b730\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-09T08:14:06\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-09T08:14:06\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-09T11:26:36\", \"id\": \"286a38e44cdf2d116fa46df4d417e833\", \"metric_id\": \"ead5921df88a2dcec2e2c590da290435\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-09T11:26:36\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-09T11:26:36\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-11T18:30:03\", \"id\": \"448d0e3fa6dd23eda0f07e088e8ada76\", \"metric_id\": \"31477b3dd9f8a88a51b50fb8c58066dd\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-11T18:30:03\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-11T18:30:03\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-11T18:30:50\", \"id\": \"2379a5088fec26da6562405c418a9adb\", \"metric_id\": \"e9b2bbf939a6b2af8a315d006ff13276\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-11T18:30:50\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-11T18:30:50\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}]}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9\", \"test_execution_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:32:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942\", \"test_execution_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:49:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70\", \"test_execution_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T19:02:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-09T05:34:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-09T08:18:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-12T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-13T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-09T05:34:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-09T08:18:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-12T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-13T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-09T05:34:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-09T08:18:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-12T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-13T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-09T05:34:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-12T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-13T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-09T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-09T11:26:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-11T18:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-11T18:51:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-11T19:04:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-12T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-13T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-14T05:53:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-15T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-09T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-09T08:14:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-09T11:26:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-11T18:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-11T18:51:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-11T19:04:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-12T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-13T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-14T05:53:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-15T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-09T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-09T08:14:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-09T11:26:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-11T18:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-11T18:51:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-11T19:04:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-12T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-13T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-14T05:53:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-15T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-09T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-09T08:14:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-09T11:26:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-11T18:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-11T18:51:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-11T19:04:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-12T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-13T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-14T05:53:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-15T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:14:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:18:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9\", \"test_execution_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:32:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942\", \"test_execution_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:49:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70\", \"test_execution_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T19:02:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:14:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:18:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9\", \"test_execution_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:32:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942\", \"test_execution_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:49:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70\", \"test_execution_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-11T19:02:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "info", "msg": "Elementary: [{\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"742d0b60-049a-47b9-a706-8d83306c4ee4.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"742d0b60-049a-47b9-a706-8d83306c4ee4\", \"test_execution_id\": \"742d0b60-049a-47b9-a706-8d83306c4ee4.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T08:28:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n      \\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n    \\n  \\n\\n    \\n  \\n  \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n        \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n\\n\\n  \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where True\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"e974c0d9-a73c-498d-8dff-207d51f8de28.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"e974c0d9-a73c-498d-8dff-207d51f8de28\", \"test_execution_id\": \"e974c0d9-a73c-498d-8dff-207d51f8de28.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T08:29:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n      \\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n    \\n  \\n\\n    \\n  \\n  \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n        \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n\\n\\n  \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where True\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"days_diff\": 6, \"invocations_rank_index\": 9, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c21a0758-8cc4-4718-9d98-9f0941f72675.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"c21a0758-8cc4-4718-9d98-9f0941f72675\", \"test_execution_id\": \"c21a0758-8cc4-4718-9d98-9f0941f72675.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n      \\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n\\n  \\n  \\n    \\n  \\n\\n    \\n  \\n  \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n        \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n        \\n      \\n\\n    \\n      \\n      \\n      \\n      \\n\\n      \\n        \\n          \\n        \\n        \\n      \\n\\n      \\n    \\n  \\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n    \\n    \\n    \\n      \\n    \\n  \\n  \\n  \\n\\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n    \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n      \\n        \\n        \\n          \\n        \\n    \\n    \\n  \\n\\n  \\n\\n\\n  \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where True\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"days_diff\": 6, \"invocations_rank_index\": 8, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9b1078c8-08ba-4e47-bfbe-53356e95e9e9.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"9b1078c8-08ba-4e47-bfbe-53356e95e9e9\", \"test_execution_id\": \"9b1078c8-08ba-4e47-bfbe-53356e95e9e9.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b6d93adb-2094-46e1-8e49-686ae83dab58.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"b6d93adb-2094-46e1-8e49-686ae83dab58\", \"test_execution_id\": \"b6d93adb-2094-46e1-8e49-686ae83dab58.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-11T18:32:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0e7e2ae3-b708-4e1e-94ad-981a009583cd.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"0e7e2ae3-b708-4e1e-94ad-981a009583cd\", \"test_execution_id\": \"0e7e2ae3-b708-4e1e-94ad-981a009583cd.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-11T18:50:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"33be7233-7e71-49df-9ec0-04c128009d4c.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"33be7233-7e71-49df-9ec0-04c128009d4c\", \"test_execution_id\": \"33be7233-7e71-49df-9ec0-04c128009d4c.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-11T19:02:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"test_tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:18:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9\", \"test_execution_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:32:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942\", \"test_execution_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:49:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70\", \"test_execution_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-11T19:02:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-09T05:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-11T18:30:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-11T18:30:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-11T18:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-14T05:52:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-09T05:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-11T18:30:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-11T18:30:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-11T18:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-14T05:52:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-09T05:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-11T18:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-14T05:52:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-09T05:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-09T08:14:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-11T18:34:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-14T05:52:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-09T05:34:37\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-09T08:14:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-09T08:18:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-12T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-13T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-09T05:34:37\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-09T08:14:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-09T08:18:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-12T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-13T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-09T05:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-09T08:14:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-09T08:18:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-09T11:26:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-11T18:34:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-14T05:52:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-09T05:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-09T08:14:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-09T08:18:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-09T11:26:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-11T18:30:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-11T18:30:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-11T18:34:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-11T18:51:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-11T19:04:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-12T05:34:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-13T05:34:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-14T05:52:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-15T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6bae00de38a4ebe06205edc28139913d\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-09T08:14:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-04-09 05:35:39.196338, 2.41 hours ago. Usually the table is updated within 213.51 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240409081412521318\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-04-09 05:35:39.196338\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"715086495231b74b02b23a5de38995f9\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-09T08:18:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-04-09 05:35:39.196338, 2.41 hours ago. Usually the table is updated within 213.51 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240409081818121033\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-04-09 05:35:39.196338\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f6a5aaa0c389b9e6dea2ed8e75f34568\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-04-09 05:35:39.196338, 4.41 hours ago. Usually the table is updated within 211.05 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240409112641008571\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-04-09 05:35:39.196338\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"aa1647a5f43497d1105a0a4140c26228\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-11T18:30:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-04-09 11:48:09.539462, 54.20 hours ago. Usually the table is updated within 166.79 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  \\n  \\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240411183010406286\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-04-09 11:48:09.539462\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06d5cabb95f78225eff916ca88053c91\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-11T18:30:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-04-09 11:48:09.539462, 54.20 hours ago. Usually the table is updated within 166.79 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  \\n  \\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240411183056358743\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-04-09 11:48:09.539462\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 675652.0, \"average\": 672052.0, \"min_value\": 656778.4935263706, \"max_value\": 687325.5064736294, \"start_time\": \"2024-03-28T02:00:00\", \"end_time\": \"2024-03-28T04:00:00\", \"id\": \"e4ce78913edd98fb8433988d2d24180c\", \"metric_id\": \"2b21e53b7a7182b1856ea55e809e8d8c\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 0.7071067811865475, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T02:00:00\", \"bucket_end\": \"2024-03-28T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 675652.0, \"min_metric_value\": 656778.4935263706, \"max_metric_value\": 687325.5064736294, \"training_avg\": 672052.0, \"training_stddev\": 5091.168824543142, \"training_set_size\": 2, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 187.68 hours ago. Usually the table is updated within 186.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 682852.0, \"average\": 675652.0, \"min_value\": 654052.0, \"max_value\": 697252.0, \"start_time\": \"2024-03-28T04:00:00\", \"end_time\": \"2024-03-28T06:00:00\", \"id\": \"7b09e9b34ce3761e8e9a7ea9fc8af0dd\", \"metric_id\": \"5b7d25f5e4566863b143461f791226b5\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T04:00:00\", \"bucket_end\": \"2024-03-28T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 682852.0, \"min_metric_value\": 654052.0, \"max_metric_value\": 697252.0, \"training_avg\": 675652.0, \"training_stddev\": 7200.0, \"training_set_size\": 3, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 189.68 hours ago. Usually the table is updated within 187.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 690052.0, \"average\": 679252.0, \"min_value\": 651366.5199073066, \"max_value\": 707137.4800926934, \"start_time\": \"2024-03-28T06:00:00\", \"end_time\": \"2024-03-28T08:00:00\", \"id\": \"3c855ac02dc5dfba4cef169da5f5556c\", \"metric_id\": \"ecc55797c48ffb6bd1e8f75c3ef1ce70\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.1618950038622249, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T06:00:00\", \"bucket_end\": \"2024-03-28T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 690052.0, \"min_metric_value\": 651366.5199073066, \"max_metric_value\": 707137.4800926934, \"training_avg\": 679252.0, \"training_stddev\": 9295.160030897801, \"training_set_size\": 4, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 191.68 hours ago. Usually the table is updated within 188.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 697252.0, \"average\": 682852.0, \"min_value\": 648699.4012701815, \"max_value\": 717004.5987298185, \"start_time\": \"2024-03-28T08:00:00\", \"end_time\": \"2024-03-28T10:00:00\", \"id\": \"2c8580df485b27cb11995d642dbaf209\", \"metric_id\": \"bc888a5f3bf660accaba3b47a21078a3\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.2649110640673515, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T08:00:00\", \"bucket_end\": \"2024-03-28T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 697252.0, \"min_metric_value\": 648699.4012701815, \"max_metric_value\": 717004.5987298185, \"training_avg\": 682852.0, \"training_stddev\": 11384.199576606166, \"training_set_size\": 5, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 193.68 hours ago. Usually the table is updated within 189.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 704452.0, \"average\": 686452.0, \"min_value\": 646042.1002228415, \"max_value\": 726861.8997771585, \"start_time\": \"2024-03-28T10:00:00\", \"end_time\": \"2024-03-28T12:00:00\", \"id\": \"1b8c536897d3f73339e8a7515a2b175f\", \"metric_id\": \"12b808de3e6360c2bb4d15079474e162\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.3363062095621219, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T10:00:00\", \"bucket_end\": \"2024-03-28T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 704452.0, \"min_metric_value\": 646042.1002228415, \"max_metric_value\": 726861.8997771585, \"training_avg\": 686452.0, \"training_stddev\": 13469.966592386188, \"training_set_size\": 6, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 195.68 hours ago. Usually the table is updated within 190.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 711652.0, \"average\": 690052.0, \"min_value\": 643390.6669714634, \"max_value\": 736713.3330285366, \"start_time\": \"2024-03-28T12:00:00\", \"end_time\": \"2024-03-28T14:00:00\", \"id\": \"ef82f72df1f01f9cc3b62eeafaa3ca91\", \"metric_id\": \"4eac7693ac942f4a7169bf810767da96\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.3887301496588271, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T12:00:00\", \"bucket_end\": \"2024-03-28T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 711652.0, \"min_metric_value\": 643390.6669714634, \"max_metric_value\": 736713.3330285366, \"training_avg\": 690052.0, \"training_stddev\": 15553.777676178865, \"training_set_size\": 7, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 197.68 hours ago. Usually the table is updated within 191.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 718852.0, \"average\": 693652.0, \"min_value\": 640743.0215558833, \"max_value\": 746560.9784441167, \"start_time\": \"2024-03-28T14:00:00\", \"end_time\": \"2024-03-28T16:00:00\", \"id\": \"693971626684e0caa633d618fa8f8ab6\", \"metric_id\": \"d9acc8287804f9048eaa077eba7dc22f\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4288690166235205, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T14:00:00\", \"bucket_end\": \"2024-03-28T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 718852.0, \"min_metric_value\": 640743.0215558833, \"max_metric_value\": 746560.9784441167, \"training_avg\": 693652.0, \"training_stddev\": 17636.326148038883, \"training_set_size\": 8, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 199.68 hours ago. Usually the table is updated within 192.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 726052.0, \"average\": 697252.0, \"min_value\": 638097.9637894421, \"max_value\": 756406.0362105579, \"start_time\": \"2024-03-28T16:00:00\", \"end_time\": \"2024-03-28T18:00:00\", \"id\": \"ec7ace98cfc89e6f6cacc2e6ecce3beb\", \"metric_id\": \"b262d7bb69f3603615d7718650dd8b24\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4605934866804429, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T16:00:00\", \"bucket_end\": \"2024-03-28T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 726052.0, \"min_metric_value\": 638097.9637894421, \"max_metric_value\": 756406.0362105579, \"training_avg\": 697252.0, \"training_stddev\": 19718.01207018598, \"training_set_size\": 9, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 201.68 hours ago. Usually the table is updated within 193.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 733252.0, \"average\": 700852.0, \"min_value\": 635454.7523514942, \"max_value\": 766249.2476485058, \"start_time\": \"2024-03-28T18:00:00\", \"end_time\": \"2024-03-28T20:00:00\", \"id\": \"87c495c60ef585bdbd71af78b8d97c5d\", \"metric_id\": \"0769ae865343d293e66911895e841c15\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4863010829205867, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T18:00:00\", \"bucket_end\": \"2024-03-28T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 733252.0, \"min_metric_value\": 635454.7523514942, \"max_metric_value\": 766249.2476485058, \"training_avg\": 700852.0, \"training_stddev\": 21799.08254950194, \"training_set_size\": 10, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 203.68 hours ago. Usually the table is updated within 194.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 740452.0, \"average\": 704452.0, \"min_value\": 632812.9045283233, \"max_value\": 776091.0954716767, \"start_time\": \"2024-03-28T20:00:00\", \"end_time\": \"2024-03-28T22:00:00\", \"id\": \"ca6cce1befbcff94a9b89e9030931f38\", \"metric_id\": \"a1feabb433e2bbc79d05ba1c4c8c241f\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.507556722888818, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T20:00:00\", \"bucket_end\": \"2024-03-28T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 740452.0, \"min_metric_value\": 632812.9045283233, \"max_metric_value\": 776091.0954716767, \"training_avg\": 704452.0, \"training_stddev\": 23879.69849055888, \"training_set_size\": 11, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-28T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 205.68 hours ago. Usually the table is updated within 195.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 747652.0, \"average\": 708052.0, \"min_value\": 630172.0924499779, \"max_value\": 785931.9075500221, \"start_time\": \"2024-03-28T22:00:00\", \"end_time\": \"2024-03-29T00:00:00\", \"id\": \"0a1a8a6f2a40f05f92248706b569cdf4\", \"metric_id\": \"34f60a97e0e8336292c6d6ea165eaa62\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.52542553961938, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T22:00:00\", \"bucket_end\": \"2024-03-29T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 747652.0, \"min_metric_value\": 630172.0924499779, \"max_metric_value\": 785931.9075500221, \"training_avg\": 708052.0, \"training_stddev\": 25959.969183340723, \"training_set_size\": 12, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 207.68 hours ago. Usually the table is updated within 196.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 754852.0, \"average\": 711652.0, \"min_value\": 627532.085592055, \"max_value\": 795771.914407945, \"start_time\": \"2024-03-29T00:00:00\", \"end_time\": \"2024-03-29T02:00:00\", \"id\": \"56948b36f0ac3aec8d7847b00f786765\", \"metric_id\": \"801997e365a24c8eda92ba59fc6cae1a\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5406577730392865, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T00:00:00\", \"bucket_end\": \"2024-03-29T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 754852.0, \"min_metric_value\": 627532.085592055, \"max_metric_value\": 795771.914407945, \"training_avg\": 711652.0, \"training_stddev\": 28039.971469315013, \"training_set_size\": 13, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 209.68 hours ago. Usually the table is updated within 197.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 762052.0, \"average\": 715252.0, \"min_value\": 624892.7171343198, \"max_value\": 805611.2828656802, \"start_time\": \"2024-03-29T02:00:00\", \"end_time\": \"2024-03-29T04:00:00\", \"id\": \"2031ab8ce2e14f466222b9f1834d31e4\", \"metric_id\": \"7720e98491b1863d1ec5c562669d1560\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5537971921347118, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T02:00:00\", \"bucket_end\": \"2024-03-29T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 762052.0, \"min_metric_value\": 624892.7171343198, \"max_metric_value\": 805611.2828656802, \"training_avg\": 715252.0, \"training_stddev\": 30119.76095522672, \"training_set_size\": 14, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 211.68 hours ago. Usually the table is updated within 198.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 769252.0, \"average\": 718852.0, \"min_value\": 622253.8633720091, \"max_value\": 815450.1366279909, \"start_time\": \"2024-03-29T04:00:00\", \"end_time\": \"2024-03-29T06:00:00\", \"id\": \"28c47757ca466a788794361a79c06c6a\", \"metric_id\": \"e198601fa0d889c8228ed26757fe15ac\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5652475842498528, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T04:00:00\", \"bucket_end\": \"2024-03-29T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 769252.0, \"min_metric_value\": 622253.8633720091, \"max_metric_value\": 815450.1366279909, \"training_avg\": 718852.0, \"training_stddev\": 32199.378875996972, \"training_set_size\": 15, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 213.68 hours ago. Usually the table is updated within 199.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 776452.0, \"average\": 722452.0, \"min_value\": 619615.430628983, \"max_value\": 825288.569371017, \"start_time\": \"2024-03-29T06:00:00\", \"end_time\": \"2024-03-29T08:00:00\", \"id\": \"fa839e51aede8418a80ed990441b81c7\", \"metric_id\": \"e3331a2038a4bc5d28783b9a46815074\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.575315094531511, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T06:00:00\", \"bucket_end\": \"2024-03-29T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 776452.0, \"min_metric_value\": 619615.430628983, \"max_metric_value\": 825288.569371017, \"training_avg\": 722452.0, \"training_stddev\": 34278.85645700568, \"training_set_size\": 16, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 215.68 hours ago. Usually the table is updated within 200.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 783652.0, \"average\": 726052.0, \"min_value\": 616977.3466656896, \"max_value\": 835126.6533343104, \"start_time\": \"2024-03-29T08:00:00\", \"end_time\": \"2024-03-29T10:00:00\", \"id\": \"efc8485378a802de3eea438927128662\", \"metric_id\": \"35389d069ad45734185f5a0ed51f56e3\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.584236068762679, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T08:00:00\", \"bucket_end\": \"2024-03-29T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 783652.0, \"min_metric_value\": 616977.3466656896, \"max_metric_value\": 835126.6533343104, \"training_avg\": 726052.0, \"training_stddev\": 36358.21777810348, \"training_set_size\": 17, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 217.68 hours ago. Usually the table is updated within 201.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 790852.0, \"average\": 729652.0, \"min_value\": 614339.5548780619, \"max_value\": 844964.4451219381, \"start_time\": \"2024-03-29T10:00:00\", \"end_time\": \"2024-03-29T12:00:00\", \"id\": \"19a245f227557c8045b599a147ce6ff7\", \"metric_id\": \"c350a2fc206539ee3f5aea94945f1a9f\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5921958796888798, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T10:00:00\", \"bucket_end\": \"2024-03-29T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 790852.0, \"min_metric_value\": 614339.5548780619, \"max_metric_value\": 844964.4451219381, \"training_avg\": 729652.0, \"training_stddev\": 38437.48170731272, \"training_set_size\": 18, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 219.68 hours ago. Usually the table is updated within 202.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 798052.0, \"average\": 733252.0, \"min_value\": 611702.0102838343, \"max_value\": 854801.9897161657, \"start_time\": \"2024-03-29T12:00:00\", \"end_time\": \"2024-03-29T14:00:00\", \"id\": \"f7ae0c0d37791174b0fbd42783316d0b\", \"metric_id\": \"c2d0ed2094b294863dd399d533be7578\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5993419699495495, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T12:00:00\", \"bucket_end\": \"2024-03-29T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 798052.0, \"min_metric_value\": 611702.0102838343, \"max_metric_value\": 854801.9897161657, \"training_avg\": 733252.0, \"training_stddev\": 40516.663238721914, \"training_set_size\": 19, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 221.68 hours ago. Usually the table is updated within 203.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 805252.0, \"average\": 736852.0, \"min_value\": 609064.6766850483, \"max_value\": 864639.3233149517, \"start_time\": \"2024-03-29T14:00:00\", \"end_time\": \"2024-03-29T16:00:00\", \"id\": \"2ae312e578947bfeabcf4b905d9e05f3\", \"metric_id\": \"e807e0136c3a291450e0f8b9b496206a\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6057930839841816, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T14:00:00\", \"bucket_end\": \"2024-03-29T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 805252.0, \"min_metric_value\": 609064.6766850483, \"max_metric_value\": 864639.3233149517, \"training_avg\": 736852.0, \"training_stddev\": 42595.77443831723, \"training_set_size\": 20, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 223.68 hours ago. Usually the table is updated within 204.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 812452.0, \"average\": 740452.0, \"min_value\": 606427.5246232988, \"max_value\": 874476.4753767012, \"start_time\": \"2024-03-29T16:00:00\", \"end_time\": \"2024-03-29T18:00:00\", \"id\": \"17e7d2fa37733a5311cce1c34e4e385d\", \"metric_id\": \"96c8874e1b93c529580e86eb6d634fc8\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6116459280507607, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T16:00:00\", \"bucket_end\": \"2024-03-29T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 812452.0, \"min_metric_value\": 606427.5246232988, \"max_metric_value\": 874476.4753767012, \"training_avg\": 740452.0, \"training_stddev\": 44674.825125567084, \"training_set_size\": 21, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 225.68 hours ago. Usually the table is updated within 205.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 819652.0, \"average\": 744052.0, \"min_value\": 603790.5298807973, \"max_value\": 884313.4701192027, \"start_time\": \"2024-03-29T18:00:00\", \"end_time\": \"2024-03-29T20:00:00\", \"id\": \"394655011cb7cbe95dff47994a014ccc\", \"metric_id\": \"b61fbe2c5d222c8cb45b08d2e5a13178\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.616980057368938, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T18:00:00\", \"bucket_end\": \"2024-03-29T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 819652.0, \"min_metric_value\": 603790.5298807973, \"max_metric_value\": 884313.4701192027, \"training_avg\": 744052.0, \"training_stddev\": 46753.82337306758, \"training_set_size\": 22, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 227.68 hours ago. Usually the table is updated within 206.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 826852.0, \"average\": 747652.0, \"min_value\": 601153.6723644942, \"max_value\": 894150.3276355058, \"start_time\": \"2024-03-29T20:00:00\", \"end_time\": \"2024-03-29T22:00:00\", \"id\": \"86999c74117c0550e0aff3a7b2346710\", \"metric_id\": \"5d41db3e2978489948d6355ba623d06b\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6218615177038684, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T20:00:00\", \"bucket_end\": \"2024-03-29T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 826852.0, \"min_metric_value\": 601153.6723644942, \"max_metric_value\": 894150.3276355058, \"training_avg\": 747652.0, \"training_stddev\": 48832.77587850193, \"training_set_size\": 23, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-29T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 229.68 hours ago. Usually the table is updated within 207.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 834052.0, \"average\": 751252.0, \"min_value\": 598516.9352637057, \"max_value\": 903987.0647362943, \"start_time\": \"2024-03-29T22:00:00\", \"end_time\": \"2024-03-30T00:00:00\", \"id\": \"e0c7c075833f7dcbb0cc647573fbcb3e\", \"metric_id\": \"fbb4c6bed96c455e4d87b42de51f5420\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6263455967290594, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T22:00:00\", \"bucket_end\": \"2024-03-30T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 834052.0, \"min_metric_value\": 598516.9352637057, \"max_metric_value\": 903987.0647362943, \"training_avg\": 751252.0, \"training_stddev\": 50911.68824543142, \"training_set_size\": 24, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 231.68 hours ago. Usually the table is updated within 208.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 841252.0, \"average\": 754852.0, \"min_value\": 595880.3044060988, \"max_value\": 913823.6955939012, \"start_time\": \"2024-03-30T00:00:00\", \"end_time\": \"2024-03-30T02:00:00\", \"id\": \"806ea5133ff2dec3c4de8f25368c9b23\", \"metric_id\": \"01840e3c547f3b6d3ddb5bf348bbc74c\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.630478929168218, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T00:00:00\", \"bucket_end\": \"2024-03-30T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 841252.0, \"min_metric_value\": 595880.3044060988, \"max_metric_value\": 913823.6955939012, \"training_avg\": 754852.0, \"training_stddev\": 52990.56519796708, \"training_set_size\": 25, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 233.68 hours ago. Usually the table is updated within 209.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 848452.0, \"average\": 758452.0, \"min_value\": 593243.7677595938, \"max_value\": 923660.2322404062, \"start_time\": \"2024-03-30T02:00:00\", \"end_time\": \"2024-03-30T04:00:00\", \"id\": \"c84714b60b1c7bda48a1f74be4d760a6\", \"metric_id\": \"7569cb5dce8c3df6e85e333e89c5fbb7\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6343011261515337, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T02:00:00\", \"bucket_end\": \"2024-03-30T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 848452.0, \"min_metric_value\": 593243.7677595938, \"max_metric_value\": 923660.2322404062, \"training_avg\": 758452.0, \"training_stddev\": 55069.410746802074, \"training_set_size\": 26, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 235.68 hours ago. Usually the table is updated within 210.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 855652.0, \"average\": 762052.0, \"min_value\": 590607.3150430145, \"max_value\": 933496.6849569855, \"start_time\": \"2024-03-30T04:00:00\", \"end_time\": \"2024-03-30T06:00:00\", \"id\": \"5efa31748783205e9bbbe038220458b3\", \"metric_id\": \"e047a91304f89bcfb62e2651437b85a2\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6378460497066514, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T04:00:00\", \"bucket_end\": \"2024-03-30T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 855652.0, \"min_metric_value\": 590607.3150430145, \"max_metric_value\": 933496.6849569855, \"training_avg\": 762052.0, \"training_stddev\": 57148.228318995156, \"training_set_size\": 27, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 237.68 hours ago. Usually the table is updated within 211.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 862852.0, \"average\": 765652.0, \"min_value\": 587970.9374187558, \"max_value\": 943333.0625812442, \"start_time\": \"2024-03-30T06:00:00\", \"end_time\": \"2024-03-30T08:00:00\", \"id\": \"0ffb6c5d7801d22c5b7c1705632a42f5\", \"metric_id\": \"af17d504fdab25c7ed08332f0c389b29\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.641142819408043, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T06:00:00\", \"bucket_end\": \"2024-03-30T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 862852.0, \"min_metric_value\": 587970.9374187558, \"max_metric_value\": 943333.0625812442, \"training_avg\": 765652.0, \"training_stddev\": 59227.02086041472, \"training_set_size\": 28, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 239.68 hours ago. Usually the table is updated within 212.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 870052.0, \"average\": 769252.0, \"min_value\": 585334.6272479949, \"max_value\": 953169.3727520051, \"start_time\": \"2024-03-30T08:00:00\", \"end_time\": \"2024-03-30T10:00:00\", \"id\": \"8a1d7f87c349e91e9f35895e3c2457bb\", \"metric_id\": \"10dd94d3c2659d3029e4f8b8e04c41bd\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6442166146411699, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T08:00:00\", \"bucket_end\": \"2024-03-30T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 870052.0, \"min_metric_value\": 585334.6272479949, \"max_metric_value\": 953169.3727520051, \"training_avg\": 769252.0, \"training_stddev\": 61305.79091733504, \"training_set_size\": 29, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 241.68 hours ago. Usually the table is updated within 213.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 877252.0, \"average\": 772852.0, \"min_value\": 582698.3778940827, \"max_value\": 963005.6221059173, \"start_time\": \"2024-03-30T10:00:00\", \"end_time\": \"2024-03-30T12:00:00\", \"id\": \"fafaf15edd4515bd4a6e87bf6b030a26\", \"metric_id\": \"11dc8625b46c4e534e439842c7a6980b\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.647089319316488, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T10:00:00\", \"bucket_end\": \"2024-03-30T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 877252.0, \"min_metric_value\": 582698.3778940827, \"max_metric_value\": 963005.6221059173, \"training_avg\": 772852.0, \"training_stddev\": 63384.54070197243, \"training_set_size\": 30, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 243.68 hours ago. Usually the table is updated within 214.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 884452.0, \"average\": 776452.0, \"min_value\": 580062.1835634037, \"max_value\": 972841.8164365963, \"start_time\": \"2024-03-30T12:00:00\", \"end_time\": \"2024-03-30T14:00:00\", \"id\": \"1f4c9ce22847a090d2c3fdff1745454d\", \"metric_id\": \"e7c3f5e7579cb6ce0bf0d43731139417\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6497800439902246, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T12:00:00\", \"bucket_end\": \"2024-03-30T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 884452.0, \"min_metric_value\": 580062.1835634037, \"max_metric_value\": 972841.8164365963, \"training_avg\": 776452.0, \"training_stddev\": 65463.27214553211, \"training_set_size\": 31, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 245.68 hours ago. Usually the table is updated within 215.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 891652.0, \"average\": 780052.0, \"min_value\": 577426.0391756278, \"max_value\": 982677.9608243722, \"start_time\": \"2024-03-30T14:00:00\", \"end_time\": \"2024-03-30T16:00:00\", \"id\": \"447e4bb6914805788c0bd194c495be3f\", \"metric_id\": \"9d09184bf3fca6c5d74259b715cdbad7\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6523055517559808, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T14:00:00\", \"bucket_end\": \"2024-03-30T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 891652.0, \"min_metric_value\": 577426.0391756278, \"max_metric_value\": 982677.9608243722, \"training_avg\": 780052.0, \"training_stddev\": 67541.98694145739, \"training_set_size\": 32, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 247.68 hours ago. Usually the table is updated within 216.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 898852.0, \"average\": 783652.0, \"min_value\": 574789.9402572119, \"max_value\": 992514.0597427881, \"start_time\": \"2024-03-30T16:00:00\", \"end_time\": \"2024-03-30T18:00:00\", \"id\": \"f8848269985b6b9ee4d16d3fbfb049d4\", \"metric_id\": \"f0c0b16b2d3c53159c66cd318e447c73\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6546806079840612, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T16:00:00\", \"bucket_end\": \"2024-03-30T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 898852.0, \"min_metric_value\": 574789.9402572119, \"max_metric_value\": 992514.0597427881, \"training_avg\": 783652.0, \"training_stddev\": 69620.68658092938, \"training_set_size\": 33, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 249.68 hours ago. Usually the table is updated within 217.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 906052.0, \"average\": 787252.0, \"min_value\": 572153.882853429, \"max_value\": 1002350.117146571, \"start_time\": \"2024-03-30T18:00:00\", \"end_time\": \"2024-03-30T20:00:00\", \"id\": \"d82b5d73f225122a09601f7fdba0afb8\", \"metric_id\": \"cc29d2a0188b07ac18b52056bcd52029\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6569182693363314, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T18:00:00\", \"bucket_end\": \"2024-03-30T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 906052.0, \"min_metric_value\": 572153.882853429, \"max_metric_value\": 1002350.117146571, \"training_avg\": 787252.0, \"training_stddev\": 71699.37238219035, \"training_set_size\": 34, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 251.68 hours ago. Usually the table is updated within 218.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 913252.0, \"average\": 790852.0, \"min_value\": 569517.8634552726, \"max_value\": 1012186.1365447274, \"start_time\": \"2024-03-30T20:00:00\", \"end_time\": \"2024-03-30T22:00:00\", \"id\": \"af9c04ee8f23f168c1f83afe951ae308\", \"metric_id\": \"4f3192a4ec2b2f225aab4f6a2bb4eeaf\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6590301240125063, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T20:00:00\", \"bucket_end\": \"2024-03-30T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 913252.0, \"min_metric_value\": 569517.8634552726, \"max_metric_value\": 1012186.1365447274, \"training_avg\": 790852.0, \"training_stddev\": 73778.04551490911, \"training_set_size\": 35, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-30T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 253.68 hours ago. Usually the table is updated within 219.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 920452.0, \"average\": 794452.0, \"min_value\": 566881.8789383809, \"max_value\": 1022022.1210616191, \"start_time\": \"2024-03-30T22:00:00\", \"end_time\": \"2024-03-31T00:00:00\", \"id\": \"b39dbefb3dfe337468dc4c7beb5ad24d\", \"metric_id\": \"28aa8e2acc041ceaa7931e17ada8c1f4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6610264925668732, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T22:00:00\", \"bucket_end\": \"2024-03-31T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 920452.0, \"min_metric_value\": 566881.8789383809, \"max_metric_value\": 1022022.1210616191, \"training_avg\": 794452.0, \"training_stddev\": 75856.70702053972, \"training_set_size\": 36, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 255.68 hours ago. Usually the table is updated within 220.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 927652.0, \"average\": 798052.0, \"min_value\": 564245.926511735, \"max_value\": 1031858.073488265, \"start_time\": \"2024-03-31T00:00:00\", \"end_time\": \"2024-03-31T02:00:00\", \"id\": \"cde09194358ec40965901c98067f33ea\", \"metric_id\": \"073214bf1b4924086171da658a87aa74\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6629165966448438, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T00:00:00\", \"bucket_end\": \"2024-03-31T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 927652.0, \"min_metric_value\": 564245.926511735, \"max_metric_value\": 1031858.073488265, \"training_avg\": 798052.0, \"training_stddev\": 77935.35782942169, \"training_set_size\": 37, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 257.68 hours ago. Usually the table is updated within 221.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 934852.0, \"average\": 801652.0, \"min_value\": 561610.003674357, \"max_value\": 1041693.996325643, \"start_time\": \"2024-03-31T02:00:00\", \"end_time\": \"2024-03-31T04:00:00\", \"id\": \"765dc5f45e1caa330155f7ad5e06dec6\", \"metric_id\": \"ac65d7233fea58e5ba487b3f3c5fface\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6647087014636357, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T02:00:00\", \"bucket_end\": \"2024-03-31T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 934852.0, \"min_metric_value\": 561610.003674357, \"max_metric_value\": 1041693.996325643, \"training_avg\": 801652.0, \"training_stddev\": 80013.99877521434, \"training_set_size\": 38, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 259.68 hours ago. Usually the table is updated within 222.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 942052.0, \"average\": 805252.0, \"min_value\": 558974.1081785862, \"max_value\": 1051529.8918214138, \"start_time\": \"2024-03-31T04:00:00\", \"end_time\": \"2024-03-31T06:00:00\", \"id\": \"a571bc6166476fb778ad4fddb4ffec53\", \"metric_id\": \"c235ccd3b7a9af23f38c3c7f35d2f6e1\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6664102366833555, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T04:00:00\", \"bucket_end\": \"2024-03-31T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 942052.0, \"min_metric_value\": 558974.1081785862, \"max_metric_value\": 1051529.8918214138, \"training_avg\": 805252.0, \"training_stddev\": 82092.63060713794, \"training_set_size\": 39, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 261.68 hours ago. Usually the table is updated within 223.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 949252.0, \"average\": 808852.0, \"min_value\": 556338.2379987973, \"max_value\": 1061365.7620012027, \"start_time\": \"2024-03-31T06:00:00\", \"end_time\": \"2024-03-31T08:00:00\", \"id\": \"7bdcd86058081383c1c31aed3baaf40b\", \"metric_id\": \"7dcaf04ea5de5720fe123c7e297e4485\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6680278993981879, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T06:00:00\", \"bucket_end\": \"2024-03-31T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 949252.0, \"min_metric_value\": 556338.2379987973, \"max_metric_value\": 1061365.7620012027, \"training_avg\": 808852.0, \"training_stddev\": 84171.25400040088, \"training_set_size\": 40, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 263.68 hours ago. Usually the table is updated within 224.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 956452.0, \"average\": 812452.0, \"min_value\": 553702.3913046437, \"max_value\": 1071201.6086953562, \"start_time\": \"2024-03-31T08:00:00\", \"end_time\": \"2024-03-31T10:00:00\", \"id\": \"8656700aa0340e6838aa60ce445f19e6\", \"metric_id\": \"d5983c913d785724828f121f380cf341\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6695677422593644, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T08:00:00\", \"bucket_end\": \"2024-03-31T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 956452.0, \"min_metric_value\": 553702.3913046437, \"max_metric_value\": 1071201.6086953562, \"training_avg\": 812452.0, \"training_stddev\": 86249.86956511876, \"training_set_size\": 41, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 265.68 hours ago. Usually the table is updated within 225.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 963652.0, \"average\": 816052.0, \"min_value\": 551066.5664380776, \"max_value\": 1081037.4335619225, \"start_time\": \"2024-03-31T10:00:00\", \"end_time\": \"2024-03-31T12:00:00\", \"id\": \"6717d882ab05ecd8f786a10b1ebb9798\", \"metric_id\": \"46dd93accc42b43a6a32a33f1d2bc7ff\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.671035249175406, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T10:00:00\", \"bucket_end\": \"2024-03-31T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 963652.0, \"min_metric_value\": 551066.5664380776, \"max_metric_value\": 1081037.4335619225, \"training_avg\": 816052.0, \"training_stddev\": 88328.47785397414, \"training_set_size\": 42, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 267.68 hours ago. Usually the table is updated within 226.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 970852.0, \"average\": 819652.0, \"min_value\": 548430.761893542, \"max_value\": 1090873.238106458, \"start_time\": \"2024-03-31T12:00:00\", \"end_time\": \"2024-03-31T14:00:00\", \"id\": \"49f7850723beb49ae34d9e235fd42dfe\", \"metric_id\": \"d9d60c1fcac8212c41bac8112428b37d\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6724354005859816, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T12:00:00\", \"bucket_end\": \"2024-03-31T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 970852.0, \"min_metric_value\": 548430.761893542, \"max_metric_value\": 1090873.238106458, \"training_avg\": 819652.0, \"training_stddev\": 90407.07936881934, \"training_set_size\": 43, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 269.68 hours ago. Usually the table is updated within 227.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 978052.0, \"average\": 823252.0, \"min_value\": 545794.9763008333, \"max_value\": 1100709.0236991667, \"start_time\": \"2024-03-31T14:00:00\", \"end_time\": \"2024-03-31T16:00:00\", \"id\": \"2e6666d31b3718c202d4e0571a2537b3\", \"metric_id\": \"bb1e9d1fa5c926408720bb4cfa4f0d56\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6737727299472744, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T14:00:00\", \"bucket_end\": \"2024-03-31T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 978052.0, \"min_metric_value\": 545794.9763008333, \"max_metric_value\": 1100709.0236991667, \"training_avg\": 823252.0, \"training_stddev\": 92485.67456638893, \"training_set_size\": 44, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 271.68 hours ago. Usually the table is updated within 228.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 985252.0, \"average\": 826852.0, \"min_value\": 543159.2084102242, \"max_value\": 1110544.7915897758, \"start_time\": \"2024-03-31T16:00:00\", \"end_time\": \"2024-03-31T18:00:00\", \"id\": \"03527952c4abbc31fd11d7ef85cc36ce\", \"metric_id\": \"e3be39f72b99da51582a3c619fdbf344\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6750513727791383, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T16:00:00\", \"bucket_end\": \"2024-03-31T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 985252.0, \"min_metric_value\": 543159.2084102242, \"max_metric_value\": 1110544.7915897758, \"training_avg\": 826852.0, \"training_stddev\": 94564.26386325862, \"training_set_size\": 45, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 273.68 hours ago. Usually the table is updated within 229.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 992452.0, \"average\": 830452.0, \"min_value\": 540523.4570795073, \"max_value\": 1120380.5429204926, \"start_time\": \"2024-03-31T18:00:00\", \"end_time\": \"2024-03-31T20:00:00\", \"id\": \"936c745f242c56cd38b152f4687b7b43\", \"metric_id\": \"061c37a98f79bdea3e3c02fe2723b09c\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6762751093923032, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T18:00:00\", \"bucket_end\": \"2024-03-31T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 992452.0, \"min_metric_value\": 540523.4570795073, \"max_metric_value\": 1120380.5429204926, \"training_avg\": 830452.0, \"training_stddev\": 96642.84764016424, \"training_set_size\": 46, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 275.68 hours ago. Usually the table is updated within 230.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 999652.0, \"average\": 834052.0, \"min_value\": 537887.7212626749, \"max_value\": 1130216.2787373252, \"start_time\": \"2024-03-31T20:00:00\", \"end_time\": \"2024-03-31T22:00:00\", \"id\": \"69fd6a03b41264056f011b676aca4711\", \"metric_id\": \"e21ef52c18441f48d9b9489d579b6c87\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6774474022257875, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T20:00:00\", \"bucket_end\": \"2024-03-31T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 999652.0, \"min_metric_value\": 537887.7212626749, \"max_metric_value\": 1130216.2787373252, \"training_avg\": 834052.0, \"training_stddev\": 98721.42624577503, \"training_set_size\": 47, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-03-31T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 277.68 hours ago. Usually the table is updated within 231.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1006852.0, \"average\": 837652.0, \"min_value\": 535252.0, \"max_value\": 1140052.0, \"start_time\": \"2024-03-31T22:00:00\", \"end_time\": \"2024-04-01T00:00:00\", \"id\": \"f5ba258b5a1d825e126cbcd6635900dd\", \"metric_id\": \"7114c4fb4afac06396f80596b484409a\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6785714285714286, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T22:00:00\", \"bucket_end\": \"2024-04-01T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1006852.0, \"min_metric_value\": 535252.0, \"max_metric_value\": 1140052.0, \"training_avg\": 837652.0, \"training_stddev\": 100800.0, \"training_set_size\": 48, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 279.68 hours ago. Usually the table is updated within 232.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1014052.0, \"average\": 841252.0, \"min_value\": 532616.2924093195, \"max_value\": 1149887.7075906806, \"start_time\": \"2024-04-01T00:00:00\", \"end_time\": \"2024-04-01T02:00:00\", \"id\": \"afc196f78bae3b0b88f57f1f8cae8786\", \"metric_id\": \"72be6ce9ab1dd92da3bd77eab09d682f\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6796501093370364, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T00:00:00\", \"bucket_end\": \"2024-04-01T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1014052.0, \"min_metric_value\": 532616.2924093195, \"max_metric_value\": 1149887.7075906806, \"training_avg\": 841252.0, \"training_stddev\": 102878.56919689348, \"training_set_size\": 49, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 281.68 hours ago. Usually the table is updated within 233.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1021252.0, \"average\": 844852.0, \"min_value\": 529980.5976783538, \"max_value\": 1159723.4023216462, \"start_time\": \"2024-04-01T02:00:00\", \"end_time\": \"2024-04-01T04:00:00\", \"id\": \"caa07a35427e9c592bdf9aae2f2ac4f5\", \"metric_id\": \"dbd3ad9b3b069b500e9bb075b9bce206\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6806861343965867, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T02:00:00\", \"bucket_end\": \"2024-04-01T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1021252.0, \"min_metric_value\": 529980.5976783538, \"max_metric_value\": 1159723.4023216462, \"training_avg\": 844852.0, \"training_stddev\": 104957.1341072154, \"training_set_size\": 50, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 283.68 hours ago. Usually the table is updated within 234.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1028452.0, \"average\": 848452.0, \"min_value\": 527344.9150579203, \"max_value\": 1169559.0849420796, \"start_time\": \"2024-04-01T04:00:00\", \"end_time\": \"2024-04-01T06:00:00\", \"id\": \"4b7ebeed67d261aff862cd75cf8836e0\", \"metric_id\": \"269e15f52c4f4e24947d251e068b99d4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6816819849907811, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T04:00:00\", \"bucket_end\": \"2024-04-01T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1028452.0, \"min_metric_value\": 527344.9150579203, \"max_metric_value\": 1169559.0849420796, \"training_avg\": 848452.0, \"training_stddev\": 107035.69498069324, \"training_set_size\": 51, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 285.68 hours ago. Usually the table is updated within 235.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1035652.0, \"average\": 852052.0, \"min_value\": 524709.243855924, \"max_value\": 1179394.7561440761, \"start_time\": \"2024-04-01T06:00:00\", \"end_time\": \"2024-04-01T08:00:00\", \"id\": \"05104ef17a430939ded1112cb26efac1\", \"metric_id\": \"02dddc74a4a641516a339110fc7f848e\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6826399535707826, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T06:00:00\", \"bucket_end\": \"2024-04-01T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1035652.0, \"min_metric_value\": 524709.243855924, \"max_metric_value\": 1179394.7561440761, \"training_avg\": 852052.0, \"training_stddev\": 109114.25204802533, \"training_set_size\": 52, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 287.68 hours ago. Usually the table is updated within 236.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1042852.0, \"average\": 855652.0, \"min_value\": 522073.5834320212, \"max_value\": 1189230.416567979, \"start_time\": \"2024-04-01T08:00:00\", \"end_time\": \"2024-04-01T10:00:00\", \"id\": \"518be66945ab885973b750fa7152cb0d\", \"metric_id\": \"fa555822124f561ebf1c812e9589ce77\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.683562161419258, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T08:00:00\", \"bucket_end\": \"2024-04-01T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1042852.0, \"min_metric_value\": 522073.5834320212, \"max_metric_value\": 1189230.416567979, \"training_avg\": 855652.0, \"training_stddev\": 111192.8055226596, \"training_set_size\": 53, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 289.68 hours ago. Usually the table is updated within 237.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1050052.0, \"average\": 859252.0, \"min_value\": 519437.9331928709, \"max_value\": 1199066.066807129, \"start_time\": \"2024-04-01T10:00:00\", \"end_time\": \"2024-04-01T12:00:00\", \"id\": \"b6dc8d26abbb0737b442b777a43921da\", \"metric_id\": \"96480178f7a4914272be7e6d3dbc0b10\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6844505743338798, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T10:00:00\", \"bucket_end\": \"2024-04-01T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1050052.0, \"min_metric_value\": 519437.9331928709, \"max_metric_value\": 1199066.066807129, \"training_avg\": 859252.0, \"training_stddev\": 113271.35560237637, \"training_set_size\": 54, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 291.68 hours ago. Usually the table is updated within 238.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1057252.0, \"average\": 862852.0, \"min_value\": 516802.2925879, \"max_value\": 1208901.7074121, \"start_time\": \"2024-04-01T12:00:00\", \"end_time\": \"2024-04-01T14:00:00\", \"id\": \"564ea60062d596701ca1a93fea7a5e75\", \"metric_id\": \"2d0e4f97f0b8742980e040fca8a869a2\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.68530701661737, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T12:00:00\", \"bucket_end\": \"2024-04-01T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1057252.0, \"min_metric_value\": 516802.2925879, \"max_metric_value\": 1208901.7074121, \"training_avg\": 862852.0, \"training_stddev\": 115349.90247069999, \"training_set_size\": 55, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 293.68 hours ago. Usually the table is updated within 239.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1064452.0, \"average\": 866452.0, \"min_value\": 514166.66110551805, \"max_value\": 1218737.338894482, \"start_time\": \"2024-04-01T14:00:00\", \"end_time\": \"2024-04-01T16:00:00\", \"id\": \"0b4b668422fe1d44614c006952fc4cf2\", \"metric_id\": \"315b998f944084f34e256ccfb1da48f3\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.686133183583656, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T14:00:00\", \"bucket_end\": \"2024-04-01T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1064452.0, \"min_metric_value\": 514166.66110551805, \"max_metric_value\": 1218737.338894482, \"training_avg\": 866452.0, \"training_stddev\": 117428.44629816065, \"training_set_size\": 56, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 295.68 hours ago. Usually the table is updated within 240.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1071652.0, \"average\": 870052.0, \"min_value\": 511531.03826972685, \"max_value\": 1228572.9617302732, \"start_time\": \"2024-04-01T16:00:00\", \"end_time\": \"2024-04-01T18:00:00\", \"id\": \"44e4c5a3ba23e1813887387a2a5e50c4\", \"metric_id\": \"f49d4913f0fc1b783887fdfe4b653ca5\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6869306527605783, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T16:00:00\", \"bucket_end\": \"2024-04-01T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1071652.0, \"min_metric_value\": 511531.03826972685, \"max_metric_value\": 1228572.9617302732, \"training_avg\": 870052.0, \"training_stddev\": 119506.98724342439, \"training_set_size\": 57, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 297.68 hours ago. Usually the table is updated within 241.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1078852.0, \"average\": 873652.0, \"min_value\": 508895.4236370782, \"max_value\": 1238408.5763629219, \"start_time\": \"2024-04-01T18:00:00\", \"end_time\": \"2024-04-01T20:00:00\", \"id\": \"2ff5ed668449afaeaf2ae890ffc4d6a5\", \"metric_id\": \"9e6b67c05d00770987a9219227505252\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.687700893944943, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T18:00:00\", \"bucket_end\": \"2024-04-01T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1078852.0, \"min_metric_value\": 508895.4236370782, \"max_metric_value\": 1238408.5763629219, \"training_avg\": 873652.0, \"training_stddev\": 121585.52545430727, \"training_set_size\": 58, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-01T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 299.68 hours ago. Usually the table is updated within 242.68 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 1461.0, \"average\": 858869.1016949152, \"min_value\": 362084.4021514496, \"max_value\": 1355653.8012383808, \"start_time\": \"2024-04-09T04:00:00\", \"end_time\": \"2024-04-09T06:00:00\", \"id\": \"0fe690ac6d8dc35dcdf8abfc8d793e8e\", \"metric_id\": \"cd222eca29f1654604970d9c6190adee\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -5.177744619446943, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 05:35:39.196338\", \"bucket_start\": \"2024-04-09T04:00:00\", \"bucket_end\": \"2024-04-09T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1461.0, \"min_metric_value\": 362084.4021514496, \"max_metric_value\": 1355653.8012383808, \"training_avg\": 858869.1016949152, \"training_stddev\": 165594.8998478219, \"training_set_size\": 59, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 05:35:39.196338, 0.41 hours ago. Usually the table is updated within 238.57 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 8661.0, \"average\": 844698.9666666667, \"min_value\": 252212.5589002472, \"max_value\": 1437185.3744330863, \"start_time\": \"2024-04-09T06:00:00\", \"end_time\": \"2024-04-09T08:00:00\", \"id\": \"1c8bf384dd7b2849149ce0b5451d3213\", \"metric_id\": \"334fb2954aee8ba064d239d2f8132ccf\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -4.233200740343047, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 05:35:39.196338\", \"bucket_start\": \"2024-04-09T06:00:00\", \"bucket_end\": \"2024-04-09T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 8661.0, \"min_metric_value\": 252212.5589002472, \"max_metric_value\": 1437185.3744330863, \"training_avg\": 844698.9666666667, \"training_stddev\": 197495.46925547317, \"training_set_size\": 60, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 05:35:39.196338, 2.41 hours ago. Usually the table is updated within 234.64 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 15861.0, \"average\": 831111.4590163934, \"min_value\": 162870.44392694812, \"max_value\": 1499352.4741058387, \"start_time\": \"2024-04-09T08:00:00\", \"end_time\": \"2024-04-09T10:00:00\", \"id\": \"d1f7a664692b87fcebff4c8690bb5157\", \"metric_id\": \"463a62b3842e3579bb09150f88136f67\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -3.6599839306807773, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 05:35:39.196338\", \"bucket_start\": \"2024-04-09T08:00:00\", \"bucket_end\": \"2024-04-09T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 15861.0, \"min_metric_value\": 162870.44392694812, \"max_metric_value\": 1499352.4741058387, \"training_avg\": 831111.4590163934, \"training_stddev\": 222747.00502981507, \"training_set_size\": 61, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 05:35:39.196338, 4.41 hours ago. Usually the table is updated within 230.86 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 711.0, \"average\": 817717.9032258064, \"min_value\": 83331.24688172352, \"max_value\": 1552104.5595698892, \"start_time\": \"2024-04-09T10:00:00\", \"end_time\": \"2024-04-09T12:00:00\", \"id\": \"ee2768b9488d9bcecd7beb86bec1dc9a\", \"metric_id\": \"83f3a12c89302c4515c7219ac1f6fb18\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -3.337507140828332, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T10:00:00\", \"bucket_end\": \"2024-04-09T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 711.0, \"min_metric_value\": 83331.24688172352, \"max_metric_value\": 1552104.5595698892, \"training_avg\": 817717.9032258064, \"training_stddev\": 244795.55211469432, \"training_set_size\": 62, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 0.20 hours ago. Usually the table is updated within 227.14 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 7911.0, \"average\": 804863.8253968254, \"min_value\": 14731.634354170645, \"max_value\": 1594996.0164394802, \"start_time\": \"2024-04-09T12:00:00\", \"end_time\": \"2024-04-09T14:00:00\", \"id\": \"928f56d64aa86d78c99aab08c6300b73\", \"metric_id\": \"0b5bfcac3e6f236115c3d36d34f4fe26\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -3.025896809792689, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T12:00:00\", \"bucket_end\": \"2024-04-09T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 7911.0, \"min_metric_value\": 14731.634354170645, \"max_metric_value\": 1594996.0164394802, \"training_avg\": 804863.8253968254, \"training_stddev\": 263377.39701421827, \"training_set_size\": 63, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 2.20 hours ago. Usually the table is updated within 223.57 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 15111.0, \"average\": 792523.9375, \"min_value\": 0.0, \"max_value\": 1630443.006715582, \"start_time\": \"2024-04-09T14:00:00\", \"end_time\": \"2024-04-09T16:00:00\", \"id\": \"3b80a998a6d5f063460f9d7307e50237\", \"metric_id\": \"d465dce2dcfb5115f29661e94beb86ae\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.7833700152967347, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T14:00:00\", \"bucket_end\": \"2024-04-09T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 15111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1630443.006715582, \"training_avg\": 792523.9375, \"training_stddev\": 279306.356405194, \"training_set_size\": 64, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 4.20 hours ago. Usually the table is updated within 220.15 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 22311.0, \"average\": 780674.5076923077, \"min_value\": 0.0, \"max_value\": 1660036.310698686, \"start_time\": \"2024-04-09T16:00:00\", \"end_time\": \"2024-04-09T18:00:00\", \"id\": \"e0f1594ff935f5bd7cfc4993e6274a31\", \"metric_id\": \"4958ed1f1b8a586b7a2db8372b650948\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.587206443694509, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T16:00:00\", \"bucket_end\": \"2024-04-09T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 22311.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1660036.310698686, \"training_avg\": 780674.5076923077, \"training_stddev\": 293120.60100212606, \"training_set_size\": 65, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 6.20 hours ago. Usually the table is updated within 216.85 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 29511.0, \"average\": 769293.2424242424, \"min_value\": 0.0, \"max_value\": 1684893.225410389, \"start_time\": \"2024-04-09T18:00:00\", \"end_time\": \"2024-04-09T20:00:00\", \"id\": \"ca34ddd16fb4fa1c3e8893b5352bacb3\", \"metric_id\": \"3416bd4caf660466cce434ca4b320793\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.423926134243175, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T18:00:00\", \"bucket_end\": \"2024-04-09T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 29511.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1684893.225410389, \"training_avg\": 769293.2424242424, \"training_stddev\": 305199.99432871555, \"training_set_size\": 66, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 8.20 hours ago. Usually the table is updated within 213.69 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 36711.0, \"average\": 758359.1791044776, \"min_value\": 0.0, \"max_value\": 1705836.0209617326, \"start_time\": \"2024-04-09T20:00:00\", \"end_time\": \"2024-04-09T22:00:00\", \"id\": \"0a63fceaee075806d5e5eb79fa4a1b26\", \"metric_id\": \"7d781ffb018ac334990583fe93336342\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.2849577337106033, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T20:00:00\", \"bucket_end\": \"2024-04-09T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 36711.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1705836.0209617326, \"training_avg\": 758359.1791044776, \"training_stddev\": 315825.6139524183, \"training_set_size\": 67, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-09T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 10.20 hours ago. Usually the table is updated within 210.66 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 43911.0, \"average\": 747852.5882352941, \"min_value\": 0.0, \"max_value\": 1723491.5615568063, \"start_time\": \"2024-04-09T22:00:00\", \"end_time\": \"2024-04-10T00:00:00\", \"id\": \"bedd1ac9c20ae93eb1edacfecd4463b6\", \"metric_id\": \"8c4840b3a20b39e102b4c7b5dda71e74\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.1645555604613507, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-09T22:00:00\", \"bucket_end\": \"2024-04-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 43911.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1723491.5615568063, \"training_avg\": 747852.5882352941, \"training_stddev\": 325212.9911071707, \"training_set_size\": 68, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 12.20 hours ago. Usually the table is updated within 207.74 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 51111.0, \"average\": 737754.8840579711, \"min_value\": 0.0, \"max_value\": 1738351.0620251638, \"start_time\": \"2024-04-10T00:00:00\", \"end_time\": \"2024-04-10T02:00:00\", \"id\": \"514c6960a64b86745560deac191ca981\", \"metric_id\": \"dba05b3f506ecd006f06b13728494ebc\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -2.0587042980304626, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T00:00:00\", \"bucket_end\": \"2024-04-10T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 51111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1738351.0620251638, \"training_avg\": 737754.8840579711, \"training_stddev\": 333532.0593223975, \"training_set_size\": 69, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 14.20 hours ago. Usually the table is updated within 204.93 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 58311.0, \"average\": 728048.5428571429, \"min_value\": 0.0, \"max_value\": 1750807.9962755837, \"start_time\": \"2024-04-10T02:00:00\", \"end_time\": \"2024-04-10T04:00:00\", \"id\": \"1db8c92ed9950719102eb1f03afa2a4b\", \"metric_id\": \"021744640f8b4861a66e1c52366e49eb\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.9645016448940131, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T02:00:00\", \"bucket_end\": \"2024-04-10T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 58311.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1750807.9962755837, \"training_avg\": 728048.5428571429, \"training_stddev\": 340919.8178061469, \"training_set_size\": 70, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 16.20 hours ago. Usually the table is updated within 202.24 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 65511.0, \"average\": 718717.0281690141, \"min_value\": 0.0, \"max_value\": 1761183.2504471648, \"start_time\": \"2024-04-10T04:00:00\", \"end_time\": \"2024-04-10T06:00:00\", \"id\": \"e3d32a21bd12666aedc16289463ed230\", \"metric_id\": \"36aa57d25c113e1235249dc4641e8239\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.879790483978077, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T04:00:00\", \"bucket_end\": \"2024-04-10T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 65511.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1761183.2504471648, \"training_avg\": 718717.0281690141, \"training_stddev\": 347488.74075938354, \"training_set_size\": 71, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 18.20 hours ago. Usually the table is updated within 199.64 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 72711.0, \"average\": 709744.7222222222, \"min_value\": 0.0, \"max_value\": 1769742.439092498, \"start_time\": \"2024-04-10T06:00:00\", \"end_time\": \"2024-04-10T08:00:00\", \"id\": \"7bb799ad90872baa5c0aaf6d0fda3c70\", \"metric_id\": \"14fb41376012ced174833d60e82b556d\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.8029295122534217, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T06:00:00\", \"bucket_end\": \"2024-04-10T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 72711.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1769742.439092498, \"training_avg\": 709744.7222222222, \"training_stddev\": 353332.5722900919, \"training_set_size\": 72, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 20.20 hours ago. Usually the table is updated within 197.15 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 79911.0, \"average\": 701116.8630136986, \"min_value\": 0.0, \"max_value\": 1776708.1987732793, \"start_time\": \"2024-04-10T08:00:00\", \"end_time\": \"2024-04-10T10:00:00\", \"id\": \"13c59916050ff727da6f488371afb3c5\", \"metric_id\": \"89cdebe26c520884fbf46ccc6820868e\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.7326446644580051, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T08:00:00\", \"bucket_end\": \"2024-04-10T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 79911.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1776708.1987732793, \"training_avg\": 701116.8630136986, \"training_stddev\": 358530.4452531935, \"training_set_size\": 73, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 22.20 hours ago. Usually the table is updated within 194.75 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 87111.0, \"average\": 692819.4864864865, \"min_value\": 0.0, \"max_value\": 1782269.1465368192, \"start_time\": \"2024-04-10T10:00:00\", \"end_time\": \"2024-04-10T12:00:00\", \"id\": \"891d56e44b1c2a654407424cc0f33e07\", \"metric_id\": \"2dbea3ddfa0330ffb20c7dcf74bc9846\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.6679297135909041, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T10:00:00\", \"bucket_end\": \"2024-04-10T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 87111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1782269.1465368192, \"training_avg\": 692819.4864864865, \"training_stddev\": 363149.88668344426, \"training_set_size\": 74, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 24.20 hours ago. Usually the table is updated within 192.45 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 94311.0, \"average\": 684839.3733333333, \"min_value\": 0.0, \"max_value\": 1786586.555771521, \"start_time\": \"2024-04-10T12:00:00\", \"end_time\": \"2024-04-10T14:00:00\", \"id\": \"ec0c0f98e13500ed34598f8c8d781c95\", \"metric_id\": \"b2702cb5bd4a0bc500a3981f88beeaed\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.6079778993211926, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T12:00:00\", \"bucket_end\": \"2024-04-10T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 94311.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1786586.555771521, \"training_avg\": 684839.3733333333, \"training_stddev\": 367249.06081272924, \"training_set_size\": 75, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 26.20 hours ago. Usually the table is updated within 190.23 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 101511.0, \"average\": 677164.0, \"min_value\": 0.0, \"max_value\": 1789799.4284587922, \"start_time\": \"2024-04-10T14:00:00\", \"end_time\": \"2024-04-10T16:00:00\", \"id\": \"4dc7e096690821d74e6dfdafa1c2f0c7\", \"metric_id\": \"52a198388fd4294f6930effb0a850909\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.552133750039005, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T14:00:00\", \"bucket_end\": \"2024-04-10T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 101511.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1789799.4284587922, \"training_avg\": 677164.0, \"training_stddev\": 370878.4761529307, \"training_set_size\": 76, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 28.20 hours ago. Usually the table is updated within 188.10 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 108711.0, \"average\": 669781.4935064935, \"min_value\": 0.0, \"max_value\": 1792028.4149056615, \"start_time\": \"2024-04-10T16:00:00\", \"end_time\": \"2024-04-10T18:00:00\", \"id\": \"dcf0c12693ecded0475a4e741db82273\", \"metric_id\": \"9dd73f25729043ff9a935507d67d98b3\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.4998584076496522, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T16:00:00\", \"bucket_end\": \"2024-04-10T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 108711.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1792028.4149056615, \"training_avg\": 669781.4935064935, \"training_stddev\": 374082.307133056, \"training_set_size\": 77, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 30.20 hours ago. Usually the table is updated within 186.05 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 115911.0, \"average\": 662680.5897435897, \"min_value\": 0.0, \"max_value\": 1793378.8884021665, \"start_time\": \"2024-04-10T18:00:00\", \"end_time\": \"2024-04-10T20:00:00\", \"id\": \"5dba1d7cb32a7b7fdcc21c97b9408b5d\", \"metric_id\": \"08871662dcfe0b4c6e81cf26a560bc8c\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.450704198614942, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T18:00:00\", \"bucket_end\": \"2024-04-10T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 115911.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1793378.8884021665, \"training_avg\": 662680.5897435897, \"training_stddev\": 376899.4328861923, \"training_set_size\": 78, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 32.20 hours ago. Usually the table is updated within 184.08 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 123111.0, \"average\": 655850.5949367088, \"min_value\": 0.0, \"max_value\": 1793943.3891430632, \"start_time\": \"2024-04-10T20:00:00\", \"end_time\": \"2024-04-10T22:00:00\", \"id\": \"9011d9eb67e6c048510c8e0e433f0880\", \"metric_id\": \"94c5f4a88f3c24f8a7f5a0fbb4974dbc\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.4042956716237183, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T20:00:00\", \"bucket_end\": \"2024-04-10T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 123111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1793943.3891430632, \"training_avg\": 655850.5949367088, \"training_stddev\": 379364.26473545143, \"training_set_size\": 79, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-10T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 34.20 hours ago. Usually the table is updated within 182.18 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 130311.0, \"average\": 649281.35, \"min_value\": 0.0, \"max_value\": 1793803.589882207, \"start_time\": \"2024-04-10T22:00:00\", \"end_time\": \"2024-04-11T00:00:00\", \"id\": \"b6cd436f0ccb76e7750f9b8578e9387c\", \"metric_id\": \"b5468c5e7efa543d1d41ce3d5105446f\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.3603152439923187, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-10T22:00:00\", \"bucket_end\": \"2024-04-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 130311.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1793803.589882207, \"training_avg\": 649281.35, \"training_stddev\": 381507.41329406906, \"training_set_size\": 80, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 36.20 hours ago. Usually the table is updated within 180.36 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 137511.0, \"average\": 642963.1975308642, \"min_value\": 0.0, \"max_value\": 1793031.8937484073, \"start_time\": \"2024-04-11T00:00:00\", \"end_time\": \"2024-04-11T02:00:00\", \"id\": \"d8b7295353739bcb5e7f416648ef885c\", \"metric_id\": \"1b0178e022c1bf5cf3cad06249ffe6a9\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.3184921888403125, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T00:00:00\", \"bucket_end\": \"2024-04-11T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 137511.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1793031.8937484073, \"training_avg\": 642963.1975308642, \"training_stddev\": 383356.2320725143, \"training_set_size\": 81, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 38.20 hours ago. Usually the table is updated within 178.60 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 144711.0, \"average\": 636886.9512195121, \"min_value\": 0.0, \"max_value\": 1791692.7455115318, \"start_time\": \"2024-04-11T02:00:00\", \"end_time\": \"2024-04-11T04:00:00\", \"id\": \"7781060792aab1dec65a3dda3115520e\", \"metric_id\": \"12fef55a2e4f7635dad02405226c8dbe\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.2785940813223542, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T02:00:00\", \"bucket_end\": \"2024-04-11T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 144711.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1791692.7455115318, \"training_avg\": 636886.9512195121, \"training_stddev\": 384935.26476400654, \"training_set_size\": 82, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 40.20 hours ago. Usually the table is updated within 176.91 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 151911.0, \"average\": 631043.8674698796, \"min_value\": 0.0, \"max_value\": 1789843.717022076, \"start_time\": \"2024-04-11T04:00:00\", \"end_time\": \"2024-04-11T06:00:00\", \"id\": \"bcbd759abb7bc6a9007bde95e0ea6ab9\", \"metric_id\": \"ad8e1df818a7515214af1afa100987a7\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.240420080279699, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T04:00:00\", \"bucket_end\": \"2024-04-11T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 151911.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1789843.717022076, \"training_avg\": 631043.8674698796, \"training_stddev\": 386266.61651739886, \"training_set_size\": 83, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 42.20 hours ago. Usually the table is updated within 175.29 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 159111.0, \"average\": 625425.619047619, \"min_value\": 0.0, \"max_value\": 1787536.4127942035, \"start_time\": \"2024-04-11T06:00:00\", \"end_time\": \"2024-04-11T08:00:00\", \"id\": \"2f19b50663f97142d836eccd77831d63\", \"metric_id\": \"c096f3be0ddb5bf1174429a56d2867b5\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.2037955973481111, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T06:00:00\", \"bucket_end\": \"2024-04-11T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 159111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1787536.4127942035, \"training_avg\": 625425.619047619, \"training_stddev\": 387370.2645821948, \"training_set_size\": 84, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 44.20 hours ago. Usually the table is updated within 173.73 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 166311.0, \"average\": 620024.2705882353, \"min_value\": 0.0, \"max_value\": 1784817.2309600152, \"start_time\": \"2024-04-11T08:00:00\", \"end_time\": \"2024-04-11T10:00:00\", \"id\": \"55b4c3805a3272c49384a4460bb6b944\", \"metric_id\": \"fdd01322235c64cdd49bc8ed941d5141\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.168568027171332, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T08:00:00\", \"bucket_end\": \"2024-04-11T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 166311.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1784817.2309600152, \"training_avg\": 620024.2705882353, \"training_stddev\": 388264.32012392656, \"training_set_size\": 85, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 46.20 hours ago. Usually the table is updated within 172.23 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 173511.0, \"average\": 614832.2558139535, \"min_value\": 0.0, \"max_value\": 1781728.0068937212, \"start_time\": \"2024-04-11T10:00:00\", \"end_time\": \"2024-04-11T12:00:00\", \"id\": \"f8d87bd1bd62ad895a6487c05f84fc94\", \"metric_id\": \"e5d296abc0b9427c768a1a5e3560616e\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.1346032978667995, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T10:00:00\", \"bucket_end\": \"2024-04-11T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 173511.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1781728.0068937212, \"training_avg\": 614832.2558139535, \"training_stddev\": 388965.2503599226, \"training_set_size\": 86, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 48.20 hours ago. Usually the table is updated within 170.79 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 180711.0, \"average\": 609842.356321839, \"min_value\": 0.0, \"max_value\": 1778306.5608781106, \"start_time\": \"2024-04-11T12:00:00\", \"end_time\": \"2024-04-11T14:00:00\", \"id\": \"0313806b4b431eebf03fd94f5d14a2dd\", \"metric_id\": \"dbee61de882f0daeba244d7ea01cb7bd\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.101783061856319, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T12:00:00\", \"bucket_end\": \"2024-04-11T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 180711.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1778306.5608781106, \"training_avg\": 609842.356321839, \"training_stddev\": 389488.06818542385, \"training_set_size\": 87, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 50.20 hours ago. Usually the table is updated within 169.40 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 187911.0, \"average\": 605047.6818181818, \"min_value\": 0.0, \"max_value\": 1774587.1667049536, \"start_time\": \"2024-04-11T14:00:00\", \"end_time\": \"2024-04-11T16:00:00\", \"id\": \"d41fcb594149f7d054772a114b8faa14\", \"metric_id\": \"6f2da9c126dcbd6ff61e355fff1af560\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.0700023912195658, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T14:00:00\", \"bucket_end\": \"2024-04-11T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 187911.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1774587.1667049536, \"training_avg\": 605047.6818181818, \"training_stddev\": 389846.49496225733, \"training_set_size\": 88, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 52.20 hours ago. Usually the table is updated within 168.07 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}, {\"value\": 195111.0, \"average\": 600441.6516853933, \"min_value\": 0.0, \"max_value\": 1770600.954676879, \"start_time\": \"2024-04-11T16:00:00\", \"end_time\": \"2024-04-11T18:00:00\", \"id\": \"06d5cabb95f78225eff916ca88053c91\", \"metric_id\": \"f677fa34d389092a98c0abc764a9bd6d\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-11T18:30:56.452073\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": -1.0391678739360732, \"anomaly_score_threshold\": 3, \"anomalous_value\": \"2024-04-09 11:48:09.539462\", \"bucket_start\": \"2024-04-11T16:00:00\", \"bucket_end\": \"2024-04-11T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 195111.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1770600.954676879, \"training_avg\": 600441.6516853933, \"training_stddev\": 390053.100997162, \"training_set_size\": 89, \"training_start\": \"2024-03-28T02:00:00\", \"training_end\": \"2024-04-11T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-04-09 11:48:09.539462, 54.20 hours ago. Usually the table is updated within 166.79 hours.\", \"max_bucket_end\": \"2024-04-11T18:00:00\", \"is_anomalous\": false}]}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-09T08:14:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240409081412656383\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-09T08:18:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240409081818192129\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-09T11:26:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240409112640960167\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-11T18:30:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240411183010417655\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-11T18:31:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240411183056369533\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"e5950404e39b59bd55583f880e568dcd\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-09T08:14:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240409081412524360\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"33901830a9d3cf76170a4576a8fae415\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-09T08:18:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240409081818197364\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d9fc0e925e1e3e4d801abdf3ec2ac5af\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240409112641005111\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c4ed840ab53d301abeddccc7b0eef3c1\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-11T18:30:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  \\n\\n  \\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240411183010658854\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2379a5088fec26da6562405c418a9adb\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-11T18:30:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"data-quality\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  \\n\\n  \\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240411183056667755\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-09T08:18:13\", \"id\": \"7a26a256a84a0baa92900c4adb6b5fb8\", \"metric_id\": \"005d012ddbc7480ef339360184826afa\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-09T08:18:13\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-09T08:18:13\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-01T20:58:55\", \"id\": \"f9263f67d0f217ecb5e8911b99381094\", \"metric_id\": \"f9fb50e3e2f23f987651be20732d3b6e\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-01T20:58:55\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-01T20:58:55\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-01T21:00:24\", \"id\": \"6801707738eff2d1f2779748499d0e00\", \"metric_id\": \"8e64f1bb19810a5b1c09bb9189e1e479\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-01T21:00:24\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-01T21:00:24\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-09T08:14:06\", \"id\": \"05a25c9842e4e3592192994215a88702\", \"metric_id\": \"aa790eb5141997c8be9fba8e5832b730\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-09T08:14:06\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-09T08:14:06\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-09T11:26:36\", \"id\": \"286a38e44cdf2d116fa46df4d417e833\", \"metric_id\": \"ead5921df88a2dcec2e2c590da290435\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-09T11:26:36\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-09T11:26:36\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-11T18:30:03\", \"id\": \"448d0e3fa6dd23eda0f07e088e8ada76\", \"metric_id\": \"31477b3dd9f8a88a51b50fb8c58066dd\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-11T18:30:03\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-11T18:30:03\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-11T18:30:50\", \"id\": \"2379a5088fec26da6562405c418a9adb\", \"metric_id\": \"e9b2bbf939a6b2af8a315d006ff13276\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-11T18:30:56.749747\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-11T18:30:50\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-04-01T20:49:03\", \"training_end\": \"2024-04-11T18:30:50\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-11T18:30:50\", \"is_anomalous\": false}]}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9\", \"test_execution_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:32:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942\", \"test_execution_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:49:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70\", \"test_execution_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T19:02:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-09T05:34:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-09T08:18:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-12T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-13T05:34:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-09T05:34:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-09T08:18:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-12T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-13T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-09T05:34:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-09T08:18:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-12T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-13T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-09T05:34:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-09T11:26:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-11T18:34:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-11T18:51:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-11T19:04:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-12T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-13T05:34:25\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-14T05:53:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-15T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-09T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-09T08:14:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-09T11:26:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-11T18:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-11T18:51:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-11T19:04:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-12T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-13T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-14T05:53:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-15T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-09T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-09T08:14:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-09T11:26:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-11T18:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-11T18:51:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-11T19:04:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-12T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-13T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-14T05:53:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-15T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-09T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-09T08:14:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-09T11:26:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-11T18:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-11T18:51:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-11T19:04:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-12T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-13T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-14T05:53:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-15T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd\", \"test_execution_id\": \"b1c65320-d78f-460c-90ee-526da8c16cfd.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-09T05:34:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 13, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-09T08:14:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 12, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-09T08:18:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 11, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-09T11:26:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 10, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-11T18:30:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 9, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-11T18:30:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f\", \"test_execution_id\": \"7392a237-bbf5-4881-ab71-6af8b9a7c38f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-11T18:34:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6\", \"test_execution_id\": \"d6215b58-8d30-4345-9fd2-0d77ab2056c6.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-11T18:51:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7\", \"test_execution_id\": \"fae65820-e1fa-41ca-bdb6-be5827b12db7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-11T19:04:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d\", \"test_execution_id\": \"872a8557-6286-410c-a6ee-cd9ad71d794d.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-12T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a\", \"test_execution_id\": \"29dd9c5d-bd76-47e9-ac55-6f5e1b26635a.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-13T05:34:26\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7\", \"test_execution_id\": \"2bf2a86f-d43a-4572-818e-289a0c83fee7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-14T05:53:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab\", \"test_execution_id\": \"7720ff9b-d5e7-45ed-8b46-7c37bb18f3ab.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-15T05:34:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:14:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:18:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9\", \"test_execution_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:32:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942\", \"test_execution_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:49:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70\", \"test_execution_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-11T19:02:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8\", \"test_execution_id\": \"f0bff295-dd11-48c6-ac51-fabb4c4305b8.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:14:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3\", \"test_execution_id\": \"01a396d7-58a0-4d77-8eaa-96538e462ad3.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-09T08:18:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97\", \"test_execution_id\": \"6527f525-ceb9-4d1c-b018-8986e7b6cb97.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-09T11:26:43\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d\", \"test_execution_id\": \"f54e4d1e-b4bd-438e-b570-b84a55eaf93d.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4\", \"test_execution_id\": \"f7d10d54-7023-4157-9624-3b31a16adbb4.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:30:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9\", \"test_execution_id\": \"691b72f5-f918-4c38-8b11-7886e4c644e9.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:32:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942\", \"test_execution_id\": \"9755b416-31b1-4990-88ad-0f6be2f24942.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-11T18:49:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70\", \"test_execution_id\": \"091086f7-b5cf-4889-a16a-f5f9b6976c70.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-11T19:02:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"test_tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n      \\n  \\n  \\n  \\n  \\n  \\n  \\n\\n      \\n      \\n      \\n      \\n      \\n\\n      \\n      \\n      select * from (select 1) as t where False    \\n      \\n  \\n  \\n  \\n\\n    \\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]", "name": "JinjaLogInfo", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:46.811596Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:46.862302Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 3.4240127, "process_in_blocks": "0", "process_kernel_time": 0.176301, "process_mem_max_rss": "122880", "process_out_blocks": "7024", "process_user_time": 2.965066}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 3.4240127, \"process_user_time\": 2.965066, \"process_kernel_time\": 0.176301, \"process_mem_max_rss\": \"122880\", \"process_out_blocks\": \"7024\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:46.864958Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:37:46.865703Z", "elapsed": 3.424995, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:46.865703 after 3.42 seconds", "name": "CommandCompleted", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:46.865901Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:46.866559Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5e622af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5ff4e580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5ed0c760>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5e622af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5ff4e580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c5ed0c760>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:46.867178Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "dc345b5c-d8c8-414d-a5d0-e2b3a5ed234a", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 108, "thread": "MainThread", "ts": "2024-04-15T05:37:46.867843Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa4a1823b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa4a1f28640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa4a1f283d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa4a1823b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa4a1f28640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa4a1f283d0>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:49.582573Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:49.586475Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'debug': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'introspect': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:49.587311Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:49.591358Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '635b1f4e-dc34-46e6-94f1-67df47896931', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49ebbff40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '635b1f4e-dc34-46e6-94f1-67df47896931', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49ebbff40>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:49.789763Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '635b1f4e-dc34-46e6-94f1-67df47896931', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49eb534c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '635b1f4e-dc34-46e6-94f1-67df47896931', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49eb534c0>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:49.893140Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:49.894166Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:49.911616Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:50.034039Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:50.034743Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '635b1f4e-dc34-46e6-94f1-67df47896931', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49e3c50d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '635b1f4e-dc34-46e6-94f1-67df47896931', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49e3c50d0>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:50.045741Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '635b1f4e-dc34-46e6-94f1-67df47896931', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa4a1f06d00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '635b1f4e-dc34-46e6-94f1-67df47896931', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa4a1f06d00>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:50.123629Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:50.124514Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '635b1f4e-dc34-46e6-94f1-67df47896931', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49db7cb50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '635b1f4e-dc34-46e6-94f1-67df47896931', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49db7cb50>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:50.125177Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:50.126230Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:50.126883Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:50.127524Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:50.128154Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.248550Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.249515Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.250134Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.250758Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.389639Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.433372Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.434085Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.573602Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.574361Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.575001Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 17"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "SQL status: SELECT 17 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.722698Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.731178Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.731850Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 22"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "SQL status: SELECT 22 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.873286Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.911564Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  ", "name": "SQLQuery", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:51.912357Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:52.052521Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:52.061034Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:52.061805Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:52.200383Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.6738834, "process_in_blocks": "0", "process_kernel_time": 0.144087, "process_mem_max_rss": "111340", "process_out_blocks": "3744", "process_user_time": 2.781694}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.6738834, \"process_user_time\": 2.781694, \"process_kernel_time\": 0.144087, \"process_mem_max_rss\": \"111340\", \"process_out_blocks\": \"3744\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:52.202930Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:37:52.203690Z", "elapsed": 2.674874, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:52.203690 after 2.67 seconds", "name": "CommandCompleted", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:52.203884Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:52.204589Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa4a1823b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49e6445e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49ea7da30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa4a1823b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49e6445e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa49ea7da30>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:52.205206Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "635b1f4e-dc34-46e6-94f1-67df47896931", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 110, "thread": "MainThread", "ts": "2024-04-15T05:37:52.205860Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160ec4fb20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160f353640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160f3533d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160ec4fb20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160f353640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160f3533d0>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:54.830177Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:54.833963Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:54.834808Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:54.838828Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160bffff40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160bffff40>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.036067Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160bf934c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160bf934c0>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.138886Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.139925Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.157591Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.280665Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.281387Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160bb810d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160bb810d0>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.292657Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160f332d00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160f332d00>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.369441Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.370283Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160affcb50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160affcb50>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.370949Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.371998Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.372681Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.373294Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:55.373890Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.492795Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.493674Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.494288Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.494891Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.634789Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.653685Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.667075Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.667729Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.806139Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.806930Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.807565Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.949400Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, model_run_results, anomaly_threshold_sensitivity, snapshot_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.958909Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.971453Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:56.972150Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "SQL status: SELECT 19 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.114977Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.125435Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  ", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.126134Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 4"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "SQL status: SELECT 4 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.266418Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}, {\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "info", "msg": "Elementary: [{\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}, {\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}]", "name": "JinjaLogInfo", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.275469Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.276353Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.414711Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.640356, "process_in_blocks": "0", "process_kernel_time": 0.188221, "process_mem_max_rss": "111424", "process_out_blocks": "3768", "process_user_time": 2.687163}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.640356, \"process_user_time\": 2.687163, \"process_kernel_time\": 0.188221, \"process_mem_max_rss\": \"111424\", \"process_out_blocks\": \"3768\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.417377Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:37:57.418105Z", "elapsed": 2.6413102, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:57.418105 after 2.64 seconds", "name": "CommandCompleted", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.418297Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.418951Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160ec4fb20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160b6df5e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160bebda30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160ec4fb20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160b6df5e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f160bebda30>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.419556Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "235e2fb7-a8f2-4bfb-8fc2-098c5b3a97b8", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 112, "thread": "MainThread", "ts": "2024-04-15T05:37:57.420217Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65ad63d490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65add193d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65add19a00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65ad63d490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65add193d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65add19a00>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.067085Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.070994Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'debug': 'False', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.071826Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.076041Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'af8a8d97-8888-482d-baf9-1e5cf7029d33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aef69520>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'af8a8d97-8888-482d-baf9-1e5cf7029d33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aef69520>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.272229Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'af8a8d97-8888-482d-baf9-1e5cf7029d33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aa872d30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'af8a8d97-8888-482d-baf9-1e5cf7029d33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aa872d30>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.374017Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.375166Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.393068Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.515203Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.515892Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'af8a8d97-8888-482d-baf9-1e5cf7029d33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aa5800d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'af8a8d97-8888-482d-baf9-1e5cf7029d33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aa5800d0>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.526708Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'af8a8d97-8888-482d-baf9-1e5cf7029d33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aa9fe130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'af8a8d97-8888-482d-baf9-1e5cf7029d33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aa9fe130>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.609716Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.610522Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'af8a8d97-8888-482d-baf9-1e5cf7029d33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65a99fbca0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'af8a8d97-8888-482d-baf9-1e5cf7029d33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65a99fbca0>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.611170Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.612254Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.612887Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.613497Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:00.614081Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:01.750153Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:01.751085Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:01.751690Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:01.752333Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:01.893857Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:01.911900Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:01.925193Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:01.925834Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.068324Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.069160Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.069795Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.212538Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, model_run_results, anomaly_threshold_sensitivity, snapshot_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.222087Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.229571Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  ", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.230250Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 2"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "SQL status: SELECT 2 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.372182Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}, {\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "info", "msg": "Elementary: [{\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}, {\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}]", "name": "JinjaLogInfo", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.380993Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.381795Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.522220Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.5110536, "process_in_blocks": "0", "process_kernel_time": 0.168456, "process_mem_max_rss": "111592", "process_out_blocks": "3752", "process_user_time": 2.673592}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.5110536, \"process_user_time\": 2.673592, \"process_kernel_time\": 0.168456, \"process_mem_max_rss\": \"111592\", \"process_out_blocks\": \"3752\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.524934Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:38:02.525655Z", "elapsed": 2.5120027, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:02.525655 after 2.51 seconds", "name": "CommandCompleted", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.525849Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.526496Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65ad63d490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aa0745b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aa8bd4c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65ad63d490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aa0745b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f65aa8bd4c0>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.527093Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "af8a8d97-8888-482d-baf9-1e5cf7029d33", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 114, "thread": "MainThread", "ts": "2024-04-15T05:38:02.527735Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73a68cfa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73ace3910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73ace3bb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73a68cfa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73ace3910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73ace3bb0>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.164812Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.168930Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.169879Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.174080Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '2f97001d-4d18-494c-acb2-aa0cf977f60a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73acc3550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '2f97001d-4d18-494c-acb2-aa0cf977f60a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73acc3550>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.374327Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '2f97001d-4d18-494c-acb2-aa0cf977f60a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc7378c6880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '2f97001d-4d18-494c-acb2-aa0cf977f60a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc7378c6880>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.477657Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.478823Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.496660Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.621137Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.621855Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '2f97001d-4d18-494c-acb2-aa0cf977f60a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc7371c10d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '2f97001d-4d18-494c-acb2-aa0cf977f60a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc7371c10d0>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.632970Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '2f97001d-4d18-494c-acb2-aa0cf977f60a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc736c9d3d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '2f97001d-4d18-494c-acb2-aa0cf977f60a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc736c9d3d0>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.710129Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.710976Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '2f97001d-4d18-494c-acb2-aa0cf977f60a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc736c9d3a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '2f97001d-4d18-494c-acb2-aa0cf977f60a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc736c9d3a0>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.711620Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.712691Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.713342Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.713948Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:05.714532Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:06.874645Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:06.875664Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:06.876311Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:06.876917Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.020562Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.041642Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.055089Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.055749Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.199270Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.200140Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.200782Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.346411Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, model_run_results, anomaly_threshold_sensitivity, snapshot_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.356158Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.368767Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.369585Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "SQL status: SELECT 20 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.518589Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.527885Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.528596Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "SQL status: SELECT 20 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.674270Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.680203Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.680863Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "SQL status: SELECT 20 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.830322Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.839674Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  \n                    depends_on_columns\n                  \n\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  \n                    depends_on_columns\n                  \n\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  ", "name": "SQLQuery", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.840397Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.984784Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.993111Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:07.993892Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:08.137230Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 3.0284204, "process_in_blocks": "0", "process_kernel_time": 0.192234, "process_mem_max_rss": "111104", "process_out_blocks": "3760", "process_user_time": 2.719323}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 3.0284204, \"process_user_time\": 2.719323, \"process_kernel_time\": 0.192234, \"process_mem_max_rss\": \"111104\", \"process_out_blocks\": \"3760\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:08.139876Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:38:08.140661Z", "elapsed": 3.0294385, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:08.140661 after 3.03 seconds", "name": "CommandCompleted", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:08.140857Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:08.141530Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73a68cfa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc7379f0730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73acc3550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73a68cfa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc7379f0730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc73acc3550>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:08.142146Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "2f97001d-4d18-494c-acb2-aa0cf977f60a", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 116, "thread": "MainThread", "ts": "2024-04-15T05:38:08.142791Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319ed51070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319f3d3fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319f3d38b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319ed51070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319f3d3fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319f3d38b0>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:10.772947Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:10.776882Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'static_parser': 'True', 'log_format': 'json', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:10.777726Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:10.781905Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '670948e4-958a-4930-8ba4-21630a742608', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319f3c7340>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '670948e4-958a-4930-8ba4-21630a742608', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319f3c7340>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:10.978652Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '670948e4-958a-4930-8ba4-21630a742608', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319c3449a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '670948e4-958a-4930-8ba4-21630a742608', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319c3449a0>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.081899Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.083025Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.100636Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.222781Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.223529Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '670948e4-958a-4930-8ba4-21630a742608', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319bbc00d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '670948e4-958a-4930-8ba4-21630a742608', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319bbc00d0>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.234784Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '670948e4-958a-4930-8ba4-21630a742608', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319bee0d60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '670948e4-958a-4930-8ba4-21630a742608', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319bee0d60>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.312574Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.313429Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '670948e4-958a-4930-8ba4-21630a742608', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319bee0280>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '670948e4-958a-4930-8ba4-21630a742608', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319bee0280>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.314083Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.315161Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.315814Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.316476Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:11.317088Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:12.436294Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:12.437228Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:12.437833Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:12.438436Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:12.576677Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:12.636991Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  ", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:12.637812Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 36"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "SQL status: SELECT 36 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:13.060811Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"260892e9-70c7-4bc5-96e7-5b079edfc719\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-09 05:35:43\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"260892e9-70c7-4bc5-96e7-5b079edfc719\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-09 05:35:43\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"260892e9-70c7-4bc5-96e7-5b079edfc719\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-09 05:35:43\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"260892e9-70c7-4bc5-96e7-5b079edfc719\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-09 05:35:43\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"3f1fb15d-d652-44b2-bb81-c40e5f08483f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 0.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-09 11:48:10\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"3f1fb15d-d652-44b2-bb81-c40e5f08483f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.0, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-09 11:48:10\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"3f1fb15d-d652-44b2-bb81-c40e5f08483f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 0.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-09 11:48:10\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"3f1fb15d-d652-44b2-bb81-c40e5f08483f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 0.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-09 11:48:10\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"14120952-3e3b-41bf-866a-959bdf313dcc\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 18:35:42\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"14120952-3e3b-41bf-866a-959bdf313dcc\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 18:35:42\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"14120952-3e3b-41bf-866a-959bdf313dcc\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.0, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-11 18:35:42\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"14120952-3e3b-41bf-866a-959bdf313dcc\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-11 18:35:42\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"f43004fb-42ce-49ea-adfa-8b334980e65f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 18:53:01\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"f43004fb-42ce-49ea-adfa-8b334980e65f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 18:53:01\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"f43004fb-42ce-49ea-adfa-8b334980e65f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-11 18:53:01\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"f43004fb-42ce-49ea-adfa-8b334980e65f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-11 18:53:01\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"891926ea-8bf3-4a71-b1af-db7ab0866a8f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-11 19:05:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"891926ea-8bf3-4a71-b1af-db7ab0866a8f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 19:05:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"891926ea-8bf3-4a71-b1af-db7ab0866a8f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 19:05:02\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"891926ea-8bf3-4a71-b1af-db7ab0866a8f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-11 19:05:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"f00bfe86-83b3-4d17-913a-bc8d5c55ee1c\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-12 05:35:53\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"f00bfe86-83b3-4d17-913a-bc8d5c55ee1c\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-12 05:35:53\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"f00bfe86-83b3-4d17-913a-bc8d5c55ee1c\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-12 05:35:53\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"f00bfe86-83b3-4d17-913a-bc8d5c55ee1c\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-12 05:35:53\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"1cb91ce5-8277-425f-a296-b312149fc7f5\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-13 05:35:32\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"1cb91ce5-8277-425f-a296-b312149fc7f5\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-13 05:35:32\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"1cb91ce5-8277-425f-a296-b312149fc7f5\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-13 05:35:32\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"1cb91ce5-8277-425f-a296-b312149fc7f5\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-13 05:35:32\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"44531ef5-5d20-49ee-9cc6-67d5f6de6ed0\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-14 05:54:19\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"44531ef5-5d20-49ee-9cc6-67d5f6de6ed0\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-14 05:54:19\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"44531ef5-5d20-49ee-9cc6-67d5f6de6ed0\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-14 05:54:19\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"44531ef5-5d20-49ee-9cc6-67d5f6de6ed0\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-14 05:54:19\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-15 05:35:52\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-15 05:35:52\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-15 05:35:52\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-15 05:35:52\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"260892e9-70c7-4bc5-96e7-5b079edfc719\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-09 05:35:43\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"260892e9-70c7-4bc5-96e7-5b079edfc719\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-09 05:35:43\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"260892e9-70c7-4bc5-96e7-5b079edfc719\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-09 05:35:43\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"260892e9-70c7-4bc5-96e7-5b079edfc719\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-09 05:35:43\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"3f1fb15d-d652-44b2-bb81-c40e5f08483f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 0.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-09 11:48:10\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"3f1fb15d-d652-44b2-bb81-c40e5f08483f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.0, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-09 11:48:10\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"3f1fb15d-d652-44b2-bb81-c40e5f08483f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 0.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-09 11:48:10\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"3f1fb15d-d652-44b2-bb81-c40e5f08483f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 0.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-09 11:48:10\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"14120952-3e3b-41bf-866a-959bdf313dcc\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 18:35:42\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"14120952-3e3b-41bf-866a-959bdf313dcc\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 18:35:42\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"14120952-3e3b-41bf-866a-959bdf313dcc\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.0, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-11 18:35:42\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"14120952-3e3b-41bf-866a-959bdf313dcc\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-11 18:35:42\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"f43004fb-42ce-49ea-adfa-8b334980e65f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 18:53:01\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"f43004fb-42ce-49ea-adfa-8b334980e65f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 18:53:01\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"f43004fb-42ce-49ea-adfa-8b334980e65f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-11 18:53:01\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"f43004fb-42ce-49ea-adfa-8b334980e65f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-11 18:53:01\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"891926ea-8bf3-4a71-b1af-db7ab0866a8f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-11 19:05:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"891926ea-8bf3-4a71-b1af-db7ab0866a8f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 19:05:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"891926ea-8bf3-4a71-b1af-db7ab0866a8f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-11 19:05:02\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"891926ea-8bf3-4a71-b1af-db7ab0866a8f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-11 19:05:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"f00bfe86-83b3-4d17-913a-bc8d5c55ee1c\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-12 05:35:53\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"f00bfe86-83b3-4d17-913a-bc8d5c55ee1c\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-12 05:35:53\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"f00bfe86-83b3-4d17-913a-bc8d5c55ee1c\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-12 05:35:53\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"f00bfe86-83b3-4d17-913a-bc8d5c55ee1c\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-12 05:35:53\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"1cb91ce5-8277-425f-a296-b312149fc7f5\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-13 05:35:32\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"1cb91ce5-8277-425f-a296-b312149fc7f5\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-13 05:35:32\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"1cb91ce5-8277-425f-a296-b312149fc7f5\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-13 05:35:32\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"1cb91ce5-8277-425f-a296-b312149fc7f5\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-13 05:35:32\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"44531ef5-5d20-49ee-9cc6-67d5f6de6ed0\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-14 05:54:19\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"44531ef5-5d20-49ee-9cc6-67d5f6de6ed0\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-14 05:54:19\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"44531ef5-5d20-49ee-9cc6-67d5f6de6ed0\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-14 05:54:19\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"44531ef5-5d20-49ee-9cc6-67d5f6de6ed0\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-14 05:54:19\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-15 05:35:52\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-15 05:35:52\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-15 05:35:52\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-15 05:35:52\"}]", "name": "JinjaLogInfo", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:13.076661Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:13.079088Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.3622358, "process_in_blocks": "0", "process_kernel_time": 0.144212, "process_mem_max_rss": "111476", "process_out_blocks": "3848", "process_user_time": 2.720015}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.3622358, \"process_user_time\": 2.720015, \"process_kernel_time\": 0.144212, \"process_mem_max_rss\": \"111476\", \"process_out_blocks\": \"3848\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:13.081506Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:38:13.082244Z", "elapsed": 2.363198, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:13.082244 after 2.36 seconds", "name": "CommandCompleted", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:13.082438Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:13.083094Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319ed51070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319f3c7340>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319bf93cd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319ed51070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319f3c7340>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f319bf93cd0>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:13.083700Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "670948e4-958a-4930-8ba4-21630a742608", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 118, "thread": "MainThread", "ts": "2024-04-15T05:38:13.084362Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff469790b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff469e96640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff469e963d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff469790b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff469e96640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff469e963d0>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:15.728474Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:15.732223Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'static_parser': 'True', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:15.733079Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:15.737058Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'e0385dc4-987f-4223-97fc-3cab96b685cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4670b6f40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'e0385dc4-987f-4223-97fc-3cab96b685cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4670b6f40>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:15.934620Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'e0385dc4-987f-4223-97fc-3cab96b685cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff466dd34c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'e0385dc4-987f-4223-97fc-3cab96b685cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff466dd34c0>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.037413Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.038467Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.056075Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.179789Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.180560Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'e0385dc4-987f-4223-97fc-3cab96b685cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4665c00d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'e0385dc4-987f-4223-97fc-3cab96b685cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4665c00d0>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.191493Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'e0385dc4-987f-4223-97fc-3cab96b685cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff469e75d00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'e0385dc4-987f-4223-97fc-3cab96b685cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff469e75d00>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.268482Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.269327Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'e0385dc4-987f-4223-97fc-3cab96b685cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff465d79b50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'e0385dc4-987f-4223-97fc-3cab96b685cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff465d79b50>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.270Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.271067Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.271717Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.272388Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:16.273005Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.393738Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.394674Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.395292Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.395903Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.534928Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.552695Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.566293Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.566967Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.705987Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.706855Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.707498Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.848214Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, model_run_results, anomaly_threshold_sensitivity, snapshot_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.857865Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.865415Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  ", "name": "SQLQuery", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:17.866105Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "SQL status: SELECT 6 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:18.011227Z"}}
{"data": {"msg": "Elementary: [{\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "info", "msg": "Elementary: [{\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}]", "name": "JinjaLogInfo", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:18.020069Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:18.020892Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:18.159360Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.4865744, "process_in_blocks": "0", "process_kernel_time": 0.200003, "process_mem_max_rss": "111572", "process_out_blocks": "3744", "process_user_time": 2.668048}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.4865744, \"process_user_time\": 2.668048, \"process_kernel_time\": 0.200003, \"process_mem_max_rss\": \"111572\", \"process_out_blocks\": \"3744\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:18.161970Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:38:18.162720Z", "elapsed": 2.4875987, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:18.162720 after 2.49 seconds", "name": "CommandCompleted", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:18.162916Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:18.163578Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff469790b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4668525e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4669fda30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff469790b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4668525e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4669fda30>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:18.164211Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "e0385dc4-987f-4223-97fc-3cab96b685cf", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 120, "thread": "MainThread", "ts": "2024-04-15T05:38:18.164867Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc474726af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc47604f580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc472656b20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc474726af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc47604f580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc472656b20>]}", "name": "SendingEvent", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:20.800663Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:20.804449Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'version_check': 'True', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:20.805268Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:20.809247Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'ec90c7b1-4e20-4df1-a7d0-b03756146bf0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc47604f580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ec90c7b1-4e20-4df1-a7d0-b03756146bf0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc47604f580>]}", "name": "SendingEvent", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.007004Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'ec90c7b1-4e20-4df1-a7d0-b03756146bf0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc472665400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ec90c7b1-4e20-4df1-a7d0-b03756146bf0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc472665400>]}", "name": "SendingEvent", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.110373Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.111437Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.129040Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.252038Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.252856Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'ec90c7b1-4e20-4df1-a7d0-b03756146bf0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc4715c10d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ec90c7b1-4e20-4df1-a7d0-b03756146bf0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc4715c10d0>]}", "name": "SendingEvent", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.264446Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'ec90c7b1-4e20-4df1-a7d0-b03756146bf0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc471933d60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ec90c7b1-4e20-4df1-a7d0-b03756146bf0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc471933d60>]}", "name": "SendingEvent", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.341415Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.342248Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'ec90c7b1-4e20-4df1-a7d0-b03756146bf0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc470da23a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ec90c7b1-4e20-4df1-a7d0-b03756146bf0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc470da23a0>]}", "name": "SendingEvent", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.342891Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.343932Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.344606Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.345219Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:21.345825Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.504526Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.505414Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.506030Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.506634Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.650074Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.669580Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.682954Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.683617Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.827155Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.827967Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.828637Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.981106Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, model_run_results, anomaly_threshold_sensitivity, snapshot_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.990827Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.998587Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n    \n  ", "name": "SQLQuery", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:22.999286Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "SQL status: SELECT 6 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:23.144245Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}]", "name": "JinjaLogInfo", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:23.152896Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:23.153713Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:23.298429Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.5534296, "process_in_blocks": "0", "process_kernel_time": 0.207815, "process_mem_max_rss": "111316", "process_out_blocks": "3752", "process_user_time": 2.648803}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.5534296, \"process_user_time\": 2.648803, \"process_kernel_time\": 0.207815, \"process_mem_max_rss\": \"111316\", \"process_out_blocks\": \"3752\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:23.301411Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:38:23.302157Z", "elapsed": 2.554425, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:23.302157 after 2.55 seconds", "name": "CommandCompleted", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:23.302353Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:23.303010Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc474726af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc4711935b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc474e39760>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc474726af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc4711935b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc474e39760>]}", "name": "SendingEvent", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:23.303628Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "ec90c7b1-4e20-4df1-a7d0-b03756146bf0", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 122, "thread": "MainThread", "ts": "2024-04-15T05:38:23.304294Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e2406fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e2a86b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e2a861f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e2406fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e2a86b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e2a861f0>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:25.964597Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:25.968532Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:25.969923Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:25.974008Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7dfca68b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7dfca68b0>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.172200Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e02c1610>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e02c1610>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.274948Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.275954Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.293619Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.415814Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.416560Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7df1c00d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7df1c00d0>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.427799Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7dec9d490>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7dec9d490>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.505066Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.505897Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7dec9d3d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7dec9d3d0>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.506545Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.507588Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.508254Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.508862Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:26.509455Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.651993Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.652944Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.653554Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.654162Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.795053Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.818665Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  ", "name": "SQLQuery", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.819358Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 34"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "SQL status: SELECT 34 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.964201Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\"}]", "name": "JinjaLogInfo", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.974065Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.975043Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.0659356, "process_in_blocks": "0", "process_kernel_time": 0.183294, "process_mem_max_rss": "111592", "process_out_blocks": "3744", "process_user_time": 2.645814}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.0659356, \"process_user_time\": 2.645814, \"process_kernel_time\": 0.183294, \"process_mem_max_rss\": \"111592\", \"process_out_blocks\": \"3744\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.977448Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:38:27.978171Z", "elapsed": 2.0669062, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:27.978171 after 2.07 seconds", "name": "CommandCompleted", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.978367Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.979021Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e2406fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e02c1610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7df990490>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e2406fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7e02c1610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff7df990490>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.979626Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "3c94a2bf-b3e4-4b55-ba4a-59ae4da332ec", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 124, "thread": "MainThread", "ts": "2024-04-15T05:38:27.980299Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd619cf40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd7ac65b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd68a07f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd619cf40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd7ac65b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd68a07f0>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:30.637772Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:30.641701Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'debug': 'False', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:30.642530Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:30.646537Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '180b3dd3-7eb2-4323-88db-92681c3634ed', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd68afa60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '180b3dd3-7eb2-4323-88db-92681c3634ed', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd68afa60>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:30.844008Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '180b3dd3-7eb2-4323-88db-92681c3634ed', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd68a05e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '180b3dd3-7eb2-4323-88db-92681c3634ed', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd68a05e0>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:30.946741Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:30.947901Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:30.966060Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:31.094123Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:31.094900Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '180b3dd3-7eb2-4323-88db-92681c3634ed', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd2fc10d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '180b3dd3-7eb2-4323-88db-92681c3634ed', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd2fc10d0>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:31.106734Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '180b3dd3-7eb2-4323-88db-92681c3634ed', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd33a1130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '180b3dd3-7eb2-4323-88db-92681c3634ed', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd33a1130>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:31.194453Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "info", "msg": "Found 41 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1324 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:31.195346Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '180b3dd3-7eb2-4323-88db-92681c3634ed', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd274e880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '180b3dd3-7eb2-4323-88db-92681c3634ed', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd274e880>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:31.196011Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:31.197122Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:31.197769Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:31.198379Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:31.198979Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.359888Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.360843Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.361455Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.362062Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.505559Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.535589Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.536266Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.680144Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.681116Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.681774Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 35"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "SQL status: SELECT 35 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.833338Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.844831Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  ", "name": "SQLQuery", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.845524Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "SQL status: SELECT 1 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:32.994465Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8683955615\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"5559120d-7f83-4145-94aa-664710ba3c1d\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8683955615\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]", "name": "JinjaLogInfo", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:33.002907Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:33.003670Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:33.147396Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.5677843, "process_in_blocks": "0", "process_kernel_time": 0.2119, "process_mem_max_rss": "111172", "process_out_blocks": "3736", "process_user_time": 2.690739}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.5677843, \"process_user_time\": 2.690739, \"process_kernel_time\": 0.2119, \"process_mem_max_rss\": \"111172\", \"process_out_blocks\": \"3736\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:33.150207Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-15T05:38:33.150959Z", "elapsed": 2.5687733, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:33.150959 after 2.57 seconds", "name": "CommandCompleted", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:33.151155Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:33.151818Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd619cf40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd324c640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd68afa60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd619cf40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd324c640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dd68afa60>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:33.152465Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "180b3dd3-7eb2-4323-88db-92681c3634ed", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 126, "thread": "MainThread", "ts": "2024-04-15T05:38:33.153163Z"}}
