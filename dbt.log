{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c3fe3100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c327b430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c327b490>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c3fe3100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c327b430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c327b490>]}", "name": "SendingEvent", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:37.918717Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:37.922747Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'static_parser': 'True', 'log_format': 'json', 'target_path': 'None', 'invocation_command': 'dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:37.923528Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '69a9207d-b888-402a-a3c8-45cfee0d3e64', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c327b400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '69a9207d-b888-402a-a3c8-45cfee0d3e64', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c327b400>]}", "name": "SendingEvent", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.068352Z"}}
{"data": {"path": "/tmp/dbt-downloads-ed25eh_8"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-ed25eh_8'", "name": "DepsSetDownloadDirectory", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.080516Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M022", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Making package index registry request: GET https://hub.getdbt.com/api/v1/index.json", "name": "RegistryIndexProgressGETRequest", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.081243Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M023", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Response from registry index: GET https://hub.getdbt.com/api/v1/index.json 200", "name": "RegistryIndexProgressGETResponse", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.262206Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json", "name": "RegistryProgressGETRequest", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.263030Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json 200", "name": "RegistryProgressGETResponse", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.305273Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json", "name": "RegistryProgressGETRequest", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.313962Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json 200", "name": "RegistryProgressGETResponse", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.382593Z"}}
{"data": {"lock_filepath": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml"}, "info": {"category": "", "code": "M031", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "info", "msg": "Updating lock file in file path: /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml", "name": "DepsLockUpdating", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.409874Z"}}
{"data": {"path": "/tmp/dbt-downloads-4_4g9xce"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-4_4g9xce'", "name": "DepsSetDownloadDirectory", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.412385Z"}}
{"data": {"package_name": "dbt-labs/dbt_utils"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "info", "msg": "Installing dbt-labs/dbt_utils", "name": "DepsStartPackageInstall", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.423919Z"}}
{"data": {"version_name": "version 0.8.6"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "info", "msg": "Installed from version 0.8.6", "name": "DepsInstallInfo", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.732105Z"}}
{"data": {"version_latest": "1.3.0"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "info", "msg": "Updated version available: 1.3.0", "name": "DepsUpdateAvailable", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.732702Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '69a9207d-b888-402a-a3c8-45cfee0d3e64', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c3090d30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c3090ca0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '69a9207d-b888-402a-a3c8-45cfee0d3e64', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c3090d30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c3090ca0>]}", "name": "SendingEvent", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.733294Z"}}
{"data": {"package_name": "elementary-data/elementary"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "info", "msg": "Installing elementary-data/elementary", "name": "DepsStartPackageInstall", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:38.733929Z"}}
{"data": {"version_name": "version 0.14.1"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "info", "msg": "Installed from version 0.14.1", "name": "DepsInstallInfo", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:39.093814Z"}}
{"data": {"version_latest": "0.18.2"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "info", "msg": "Updated version available: 0.18.2", "name": "DepsUpdateAvailable", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:39.094410Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '69a9207d-b888-402a-a3c8-45cfee0d3e64', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c32bf5e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c32bf190>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '69a9207d-b888-402a-a3c8-45cfee0d3e64', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c32bf5e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c32bf190>]}", "name": "SendingEvent", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:39.094991Z"}}
{"data": {"msg": ""}, "info": {"category": "", "code": "Z017", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "info", "msg": "", "name": "Formatting", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:39.095564Z"}}
{"data": {"packages": ["dbt-labs/dbt_utils", "elementary-data/elementary"]}, "info": {"category": "", "code": "M019", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "info", "msg": "Updates available for packages: ['dbt-labs/dbt_utils', 'elementary-data/elementary']                 \nUpdate your versions in packages.yml, then run dbt deps", "name": "DepsNotifyUpdatesAvailable", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:39.096141Z"}}
{"data": {"command_name": "deps", "command_success": true, "command_wall_clock_time": 1.2456608, "process_in_blocks": "0", "process_kernel_time": 0.207402, "process_mem_max_rss": "93160", "process_out_blocks": "7160", "process_user_time": 1.614134}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Resource report: {\"command_name\": \"deps\", \"command_success\": true, \"command_wall_clock_time\": 1.2456608, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.207402, \"process_mem_max_rss\": \"93160\", \"process_out_blocks\": \"7160\", \"process_user_time\": 1.614134}", "name": "ResourceReport", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:39.097635Z"}}
{"data": {"command": "dbt deps", "completed_at": "2025-05-09T05:40:39.098464Z", "elapsed": 1.2467532, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Command `dbt deps` succeeded at 05:40:39.098464 after 1.25 seconds", "name": "CommandCompleted", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:39.098593Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c3fe3100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c5755f10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c32bf190>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c3fe3100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c5755f10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f54c32bf190>]}", "name": "SendingEvent", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:39.099254Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:39.099843Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "69a9207d-b888-402a-a3c8-45cfee0d3e64", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 93, "thread": "MainThread", "ts": "2025-05-09T05:40:39.259124Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73cb4a5100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73ca73c610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73ca73c670>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73cb4a5100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73ca73c610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73ca73c670>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:40.795434Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:40.799504Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'debug': 'False', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:40.800308Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:40.804193Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73ca71dbe0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73ca71dbe0>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:40.999124Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73ca725d00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73ca725d00>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:41.068261Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:41.069188Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:41.187539Z"}}
{"data": {"reason": "saved manifest not found. Starting full parse."}, "info": {"category": "", "code": "I024", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "info", "msg": "Unable to do partial parsing because saved manifest not found. Starting full parse.", "name": "UnableToPartialParse", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:41.188706Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'partial_parser', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73ca0742e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73ca0742e0>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:41.189325Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73c88d7e80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73c88d7e80>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:46.166592Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:46.354985Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:46.358972Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73c9107d60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73c9107d60>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:46.372437Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:46.373180Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73c907c2b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '65e9de88-62d0-41d8-b9eb-9f871c0cf9ec', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73c907c2b0>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:46.373800Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:46.374574Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:46.375197Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:46.375768Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:46.376302Z"}}
{"data": {"elapsed": 1.0676368, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "SQL status: BEGIN in 1.068 seconds", "name": "SQLQueryStatus", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.443979Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.444683Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.445269Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.445828Z"}}
{"data": {"elapsed": 0.12525126, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "SQL status: COMMIT in 0.125 seconds", "name": "SQLQueryStatus", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.571653Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.588772Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.631027Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.631638Z"}}
{"data": {"elapsed": 0.12488391, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "SQL status: BEGIN in 0.125 seconds", "name": "SQLQueryStatus", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.757155Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.757979Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.758560Z"}}
{"data": {"elapsed": 0.12746249, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "SQL status: SELECT 30 in 0.127 seconds", "name": "SQLQueryStatus", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.886651Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, anomaly_threshold_sensitivity, metrics_anomaly_score, alerts_schema_changes, alerts_dbt_models, enriched_columns, alerts_dbt_source_freshness, monitors_runs, job_run_results, information_schema_columns, snapshot_run_results, dbt_artifacts_hashes, model_run_results, alerts_anomaly_detection, alerts_dbt_tests", "name": "ListRelations", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.894164Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.900912Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  ", "name": "SQLQuery", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:47.901511Z"}}
{"data": {"elapsed": 0.12622857, "query_id": "", "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "SQL status: SELECT 1 in 0.126 seconds", "name": "SQLQueryStatus", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:48.028385Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"14922202421\", \"run_started_at\": \"2025-05-09 05:38:37\", \"run_completed_at\": \"2025-05-09 05:39:17\", \"generated_at\": \"2025-05-09 05:39:17\", \"created_at\": \"2025-05-09T05:39:17.682314\", \"command\": \"run\", \"dbt_version\": \"1.7.11\", \"elementary_version\": \"0.14.1\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"b20c185e15cb00e9b46864e6dc6dfd5febb0ae1f\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/14922202421\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/14922202421\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"14922202421\", \"run_started_at\": \"2025-05-09 05:38:37\", \"run_completed_at\": \"2025-05-09 05:39:17\", \"generated_at\": \"2025-05-09 05:39:17\", \"created_at\": \"2025-05-09T05:39:17.682314\", \"command\": \"run\", \"dbt_version\": \"1.7.11\", \"elementary_version\": \"0.14.1\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"b20c185e15cb00e9b46864e6dc6dfd5febb0ae1f\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/14922202421\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/14922202421\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]", "name": "JinjaLogInfo", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:48.037242Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:48.037993Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:48.163778Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:48.172440Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 7.445267, "process_in_blocks": "0", "process_kernel_time": 0.24606, "process_mem_max_rss": "123320", "process_out_blocks": "7424", "process_user_time": 6.843428}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 7.445267, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.24606, \"process_mem_max_rss\": \"123320\", \"process_out_blocks\": \"7424\", \"process_user_time\": 6.843428}", "name": "ResourceReport", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:48.173573Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:40:48.174330Z", "elapsed": 7.4462643, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:40:48.174330 after 7.45 seconds", "name": "CommandCompleted", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:48.174455Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:48.175076Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73cb4a5100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73cac655e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73cddaee80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73cb4a5100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73cac655e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f73cddaee80>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:48.175632Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:48.176243Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "65e9de88-62d0-41d8-b9eb-9f871c0cf9ec", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 95, "thread": "MainThread", "ts": "2025-05-09T05:40:48.376956Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f173a1bd130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1739454520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1739454580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f173a1bd130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1739454520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1739454580>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:49.953031Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:49.957039Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:49.957851Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:49.961694Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '2494e271-dd77-4838-959d-774267d196cb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f173b92ff10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '2494e271-dd77-4838-959d-774267d196cb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f173b92ff10>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.156290Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '2494e271-dd77-4838-959d-774267d196cb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1739b17fd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '2494e271-dd77-4838-959d-774267d196cb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1739b17fd0>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.225671Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.226567Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.344368Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.628035Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.628633Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '2494e271-dd77-4838-959d-774267d196cb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f17383f9130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '2494e271-dd77-4838-959d-774267d196cb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f17383f9130>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.712391Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.943680Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.947919Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '2494e271-dd77-4838-959d-774267d196cb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f17377f0790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '2494e271-dd77-4838-959d-774267d196cb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f17377f0790>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.961361Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.962157Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '2494e271-dd77-4838-959d-774267d196cb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1737ee4040>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '2494e271-dd77-4838-959d-774267d196cb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1737ee4040>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.962767Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.963542Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.964160Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.964736Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:50.965279Z"}}
{"data": {"elapsed": 1.0021458, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "SQL status: BEGIN in 1.002 seconds", "name": "SQLQueryStatus", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:51.967486Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:51.968241Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:51.968837Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:51.969380Z"}}
{"data": {"elapsed": 0.124840125, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "SQL status: COMMIT in 0.125 seconds", "name": "SQLQueryStatus", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:52.094808Z"}}
{"data": {"msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "info", "msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]", "name": "JinjaLogInfo", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:52.110901Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:52.111565Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:52.119912Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.2348404, "process_in_blocks": "0", "process_kernel_time": 0.221884, "process_mem_max_rss": "111024", "process_out_blocks": "3816", "process_user_time": 2.216843}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.2348404, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.221884, \"process_mem_max_rss\": \"111024\", \"process_out_blocks\": \"3816\", \"process_user_time\": 2.216843}", "name": "ResourceReport", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:52.121045Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:40:52.121812Z", "elapsed": 2.2358475, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:40:52.121812 after 2.24 seconds", "name": "CommandCompleted", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:52.121940Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:52.122539Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f173a1bd130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f173ad9a340>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f17373ba4c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f173a1bd130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f173ad9a340>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f17373ba4c0>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:52.123108Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:52.123694Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "2494e271-dd77-4838-959d-774267d196cb", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 102, "thread": "MainThread", "ts": "2025-05-09T05:40:52.320933Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cf7670d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32ce9ff4c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32ce9ff520>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cf7670d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32ce9ff4c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32ce9ff520>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:53.885625Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:53.889727Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'static_parser': 'True', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:53.890518Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:53.894372Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '5515e986-e385-4c8d-b2cd-59803e40fe23', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32ce9e5280>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '5515e986-e385-4c8d-b2cd-59803e40fe23', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32ce9e5280>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.090103Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '5515e986-e385-4c8d-b2cd-59803e40fe23', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32ce1fe580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '5515e986-e385-4c8d-b2cd-59803e40fe23', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32ce1fe580>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.159805Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.160749Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.278215Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.564545Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.565173Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '5515e986-e385-4c8d-b2cd-59803e40fe23', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cd9fa130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '5515e986-e385-4c8d-b2cd-59803e40fe23', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cd9fa130>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.649719Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.885903Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.889978Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '5515e986-e385-4c8d-b2cd-59803e40fe23', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cd9faaf0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '5515e986-e385-4c8d-b2cd-59803e40fe23', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cd9faaf0>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.903321Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.904086Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '5515e986-e385-4c8d-b2cd-59803e40fe23', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cd1a9fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '5515e986-e385-4c8d-b2cd-59803e40fe23', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cd1a9fa0>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.904702Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.905478Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.906096Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.906640Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:54.907204Z"}}
{"data": {"elapsed": 0.9816077, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "SQL status: BEGIN in 0.982 seconds", "name": "SQLQueryStatus", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:55.888898Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:55.889634Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:55.890217Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:55.890776Z"}}
{"data": {"elapsed": 0.12104792, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "SQL status: COMMIT in 0.121 seconds", "name": "SQLQueryStatus", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:56.012381Z"}}
{"data": {"msg": "Elementary: \"neondb.dbt_testing_example_elementary\""}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "info", "msg": "Elementary: \"neondb.dbt_testing_example_elementary\"", "name": "JinjaLogInfo", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:56.030825Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:56.031499Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:56.040034Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.222965, "process_in_blocks": "0", "process_kernel_time": 0.233718, "process_mem_max_rss": "111120", "process_out_blocks": "3816", "process_user_time": 2.234307}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.222965, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.233718, \"process_mem_max_rss\": \"111120\", \"process_out_blocks\": \"3816\", \"process_user_time\": 2.234307}", "name": "ResourceReport", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:56.041205Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:40:56.041979Z", "elapsed": 2.223981, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:40:56.041979 after 2.22 seconds", "name": "CommandCompleted", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:56.042106Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:56.042723Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cf7670d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cd9e1880>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cd9faaf0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cf7670d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cd9e1880>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f32cd9faaf0>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:56.043281Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:56.043933Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "5515e986-e385-4c8d-b2cd-59803e40fe23", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 106, "thread": "MainThread", "ts": "2025-05-09T05:40:56.218802Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced496a0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced3c014f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced3c01550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced496a0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced3c014f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced3c01550>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:57.784728Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:57.788812Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:57.789598Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:57.793498Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'bdf34150-ae45-4077-80d1-f629a013013f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced3bf4280>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'bdf34150-ae45-4077-80d1-f629a013013f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced3bf4280>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:57.990962Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'bdf34150-ae45-4077-80d1-f629a013013f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced3be9a30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'bdf34150-ae45-4077-80d1-f629a013013f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced3be9a30>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.061373Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.062310Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.182501Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.472274Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.472901Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'bdf34150-ae45-4077-80d1-f629a013013f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced2bf2130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'bdf34150-ae45-4077-80d1-f629a013013f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced2bf2130>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.558425Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.795692Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.799617Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'bdf34150-ae45-4077-80d1-f629a013013f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced27c26d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'bdf34150-ae45-4077-80d1-f629a013013f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced27c26d0>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.812877Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.813616Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'bdf34150-ae45-4077-80d1-f629a013013f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced26e1fd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'bdf34150-ae45-4077-80d1-f629a013013f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced26e1fd0>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.814216Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.815015Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.815603Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.816172Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:58.816711Z"}}
{"data": {"elapsed": 1.0240678, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "SQL status: BEGIN in 1.024 seconds", "name": "SQLQueryStatus", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:59.840832Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:59.841630Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:59.842204Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:59.842763Z"}}
{"data": {"elapsed": 0.12639743, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "SQL status: COMMIT in 0.126 seconds", "name": "SQLQueryStatus", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:40:59.969784Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:00.072429Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  ", "name": "SQLQuery", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:00.073252Z"}}
{"data": {"elapsed": 0.7070976, "query_id": "", "status": "SELECT 112"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "SQL status: SELECT 112 in 0.707 seconds", "name": "SQLQueryStatus", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:00.781308Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:00.798374Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  ", "name": "SQLQuery", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:00.799149Z"}}
{"data": {"elapsed": 0.17062671, "query_id": "", "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "SQL status: SELECT 0 in 0.171 seconds", "name": "SQLQueryStatus", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:00.970419Z"}}
{"data": {"msg": "Elementary: [{\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-04T05:37:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-07T05:38:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-08T05:38:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-04T05:37:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-07T05:38:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-08T05:38:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-04T05:37:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-07T05:38:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-08T05:38:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-04T05:37:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-07T05:38:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-08T05:38:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-03T05:37:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-04T05:37:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-05T05:38:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-06T05:38:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-09T05:38:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-03T05:37:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-04T05:37:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-05T05:38:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-06T05:38:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-09T05:38:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-04T05:37:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-07T05:38:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-08T05:38:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-04T05:37:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-07T05:38:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-08T05:38:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-03T05:37:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-04T05:37:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-05T05:38:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-06T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-09T05:38:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-03T05:37:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-04T05:37:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-05T05:38:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-06T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-09T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-03T05:37:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-04T05:37:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-05T05:38:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-06T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-09T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-03T05:37:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-04T05:37:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-05T05:38:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-06T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-09T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-03T05:37:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-04T05:37:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-05T05:38:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-06T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-07T05:38:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-08T05:38:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-09T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-03T05:37:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-04T05:37:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-05T05:38:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-06T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-07T05:38:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-08T05:38:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-09T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-03T05:37:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-04T05:37:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-05T05:38:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-06T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-07T05:38:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-08T05:38:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-09T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-03T05:37:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-04T05:37:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-05T05:38:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-06T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-07T05:38:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-08T05:38:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-09T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "info", "msg": "Elementary: [{\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-04T05:37:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-07T05:38:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-08T05:38:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-04T05:37:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-07T05:38:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-08T05:38:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-04T05:37:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-07T05:38:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-08T05:38:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-04T05:37:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-07T05:38:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-08T05:38:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-03T05:37:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-04T05:37:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-05T05:38:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-06T05:38:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-05-09T05:38:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-03T05:37:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-04T05:37:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-05T05:38:22\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-06T05:38:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-05-09T05:38:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-04T05:37:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-07T05:38:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-08T05:38:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-03T05:37:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-04T05:37:18\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-05T05:38:21\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-06T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-07T05:38:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-08T05:38:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-05-09T05:38:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-03T05:37:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-04T05:37:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-05T05:38:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-06T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-05-09T05:38:02\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-03T05:37:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-04T05:37:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-05T05:38:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-06T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-05-09T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-03T05:37:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-04T05:37:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-05T05:38:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-06T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-05-09T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-03T05:37:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-04T05:37:19\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-05T05:38:23\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-06T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-07T05:38:14\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-08T05:38:35\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-05-09T05:38:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-03T05:37:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-04T05:37:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-05T05:38:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-06T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-07T05:38:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-08T05:38:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-05-09T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-03T05:37:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-04T05:37:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-05T05:38:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-06T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-07T05:38:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-08T05:38:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-05-09T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-03T05:37:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-04T05:37:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-05T05:38:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-06T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-07T05:38:15\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-08T05:38:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-05-09T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e\", \"test_execution_id\": \"0016a704-c854-434d-8dbc-397ef7f9aa7e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-03T05:37:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde\", \"test_execution_id\": \"db2b3ce9-6bfe-46ec-8ed7-a92c031f6dde.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-04T05:37:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7\", \"test_execution_id\": \"d44a1774-74bc-4578-b93c-e2c04d89aeb7.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-05T05:38:24\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"11538399-6c16-4163-bf19-04c591cb1235\", \"test_execution_id\": \"11538399-6c16-4163-bf19-04c591cb1235.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-06T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8\", \"test_execution_id\": \"93c997b5-b48d-4e50-941f-77c073fc89d8.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-07T05:38:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40\", \"test_execution_id\": \"5d701eed-f35b-4580-93b5-4a9413dacf40.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-08T05:38:36\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac\", \"test_execution_id\": \"dc610338-8402-41be-a42c-91e1d1c5aeac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-05-09T05:38:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]", "name": "JinjaLogInfo", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:01.036342Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:01.052968Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:01.061796Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 3.3462238, "process_in_blocks": "0", "process_kernel_time": 0.23193, "process_mem_max_rss": "117820", "process_out_blocks": "4936", "process_user_time": 2.436268}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 3.3462238, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.23193, \"process_mem_max_rss\": \"117820\", \"process_out_blocks\": \"4936\", \"process_user_time\": 2.436268}", "name": "ResourceReport", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:01.062999Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:41:01.063763Z", "elapsed": 3.347248, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:41:01.063763 after 3.35 seconds", "name": "CommandCompleted", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:01.063890Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:01.064487Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced496a0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced1b76430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced2bf2580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced496a0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced1b76430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fced2bf2580>]}", "name": "SendingEvent", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:01.065085Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:01.065698Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "bdf34150-ae45-4077-80d1-f629a013013f", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 109, "thread": "MainThread", "ts": "2025-05-09T05:41:01.267853Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed13620d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed05f94f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed05f9550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed13620d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed05f94f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed05f9550>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:02.833229Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:02.837223Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'version_check': 'True', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'static_parser': 'True', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:02.838012Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:02.841867Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '4828c3a5-85b5-426d-8cb0-f191c91a0ee5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed05ed280>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '4828c3a5-85b5-426d-8cb0-f191c91a0ee5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed05ed280>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.036016Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '4828c3a5-85b5-426d-8cb0-f191c91a0ee5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed05e1a30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '4828c3a5-85b5-426d-8cb0-f191c91a0ee5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed05e1a30>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.105179Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.106084Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.223789Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.510818Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.511448Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '4828c3a5-85b5-426d-8cb0-f191c91a0ee5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbecf5f0130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '4828c3a5-85b5-426d-8cb0-f191c91a0ee5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbecf5f0130>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.595462Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.828848Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.832978Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '4828c3a5-85b5-426d-8cb0-f191c91a0ee5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbecf1c06d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '4828c3a5-85b5-426d-8cb0-f191c91a0ee5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbecf1c06d0>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.846291Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.847057Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '4828c3a5-85b5-426d-8cb0-f191c91a0ee5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbecedf2fd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '4828c3a5-85b5-426d-8cb0-f191c91a0ee5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbecedf2fd0>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.847635Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.848426Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.849071Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.849621Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:03.850177Z"}}
{"data": {"elapsed": 1.0134164, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "SQL status: BEGIN in 1.013 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:04.863652Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:04.864396Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:04.864978Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:04.865512Z"}}
{"data": {"elapsed": 0.12496827, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "SQL status: COMMIT in 0.125 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:04.991077Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.075958Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.076573Z"}}
{"data": {"elapsed": 0.12521273, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "SQL status: BEGIN in 0.125 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.202423Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.203480Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.204531Z"}}
{"data": {"elapsed": 0.13541545, "query_id": "", "status": "SELECT 17"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "SQL status: SELECT 17 in 0.135 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.341037Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.349847Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.350469Z"}}
{"data": {"elapsed": 0.12757389, "query_id": "", "status": "SELECT 22"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "SQL status: SELECT 22 in 0.128 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.478730Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.515786Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  ", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.516494Z"}}
{"data": {"elapsed": 0.12653188, "query_id": "", "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "SQL status: SELECT 0 in 0.127 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.643803Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.651646Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.652343Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.778007Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.786965Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 3.021653, "process_in_blocks": "0", "process_kernel_time": 0.229997, "process_mem_max_rss": "114484", "process_out_blocks": "3840", "process_user_time": 2.342971}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 3.021653, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.229997, \"process_mem_max_rss\": \"114484\", \"process_out_blocks\": \"3840\", \"process_user_time\": 2.342971}", "name": "ResourceReport", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.788095Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:41:05.788859Z", "elapsed": 3.0226595, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:41:05.788859 after 3.02 seconds", "name": "CommandCompleted", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.788987Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.789597Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed13620d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbece576430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbecf5f0580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbed13620d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbece576430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbecf5f0580>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.790180Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.790790Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "4828c3a5-85b5-426d-8cb0-f191c91a0ee5", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 112, "thread": "MainThread", "ts": "2025-05-09T05:41:05.978042Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5ab240130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5aa4d8520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5aa4d8580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5ab240130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5aa4d8520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5aa4d8580>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:07.544322Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:07.548365Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'debug': 'False', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:07.549173Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:07.553060Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'd5e09209-3693-4806-8905-797a631cefe8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5ac9b2f10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'd5e09209-3693-4806-8905-797a631cefe8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5ac9b2f10>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:07.748454Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'd5e09209-3693-4806-8905-797a631cefe8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5aab9afd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'd5e09209-3693-4806-8905-797a631cefe8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5aab9afd0>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:07.818233Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:07.819168Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:07.938202Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.230238Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.230892Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'd5e09209-3693-4806-8905-797a631cefe8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a93f3130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'd5e09209-3693-4806-8905-797a631cefe8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a93f3130>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.316785Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.555726Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.559887Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'd5e09209-3693-4806-8905-797a631cefe8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a8ab0790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'd5e09209-3693-4806-8905-797a631cefe8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a8ab0790>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.573271Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.574049Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'd5e09209-3693-4806-8905-797a631cefe8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a8ae9040>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'd5e09209-3693-4806-8905-797a631cefe8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a8ae9040>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.574628Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.575432Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.576062Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.576609Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:08.577171Z"}}
{"data": {"elapsed": 1.0227205, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "SQL status: BEGIN in 1.023 seconds", "name": "SQLQueryStatus", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:09.599947Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:09.600822Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:09.601383Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:09.601948Z"}}
{"data": {"elapsed": 0.12636386, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "SQL status: COMMIT in 0.126 seconds", "name": "SQLQueryStatus", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:09.728898Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:09.749026Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:09.791898Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:09.792497Z"}}
{"data": {"elapsed": 0.1267077, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "SQL status: BEGIN in 0.127 seconds", "name": "SQLQueryStatus", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:09.919838Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:09.920575Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:09.921207Z"}}
{"data": {"elapsed": 0.12926933, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "SQL status: SELECT 30 in 0.129 seconds", "name": "SQLQueryStatus", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.051137Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, anomaly_threshold_sensitivity, metrics_anomaly_score, alerts_schema_changes, alerts_dbt_models, enriched_columns, alerts_dbt_source_freshness, monitors_runs, job_run_results, information_schema_columns, snapshot_run_results, dbt_artifacts_hashes, model_run_results, alerts_anomaly_detection, alerts_dbt_tests", "name": "ListRelations", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.058724Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.081295Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.081937Z"}}
{"data": {"elapsed": 0.13657136, "query_id": "", "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "SQL status: SELECT 19 in 0.137 seconds", "name": "SQLQueryStatus", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.219142Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.229143Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  ", "name": "SQLQuery", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.229798Z"}}
{"data": {"elapsed": 0.1272428, "query_id": "", "status": "SELECT 4"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "SQL status: SELECT 4 in 0.127 seconds", "name": "SQLQueryStatus", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.357747Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}, {\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "info", "msg": "Elementary: [{\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}, {\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}]", "name": "JinjaLogInfo", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.366400Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.367195Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.494156Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.502995Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 3.0276093, "process_in_blocks": "0", "process_kernel_time": 0.249241, "process_mem_max_rss": "114436", "process_out_blocks": "3856", "process_user_time": 2.327255}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 3.0276093, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.249241, \"process_mem_max_rss\": \"114436\", \"process_out_blocks\": \"3856\", \"process_user_time\": 2.327255}", "name": "ResourceReport", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.504175Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:41:10.504949Z", "elapsed": 3.0286577, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:41:10.504949 after 3.03 seconds", "name": "CommandCompleted", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.505078Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.505695Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5ab240130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5abe1d340>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a86754c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5ab240130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5abe1d340>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a86754c0>]}", "name": "SendingEvent", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.506252Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.506861Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "d5e09209-3693-4806-8905-797a631cefe8", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 115, "thread": "MainThread", "ts": "2025-05-09T05:41:10.714958Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1578a14160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1577c8c250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1577c8c7f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1578a14160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1577c8c250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1577c8c7f0>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:12.280931Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:12.284961Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'log_format': 'json', 'static_parser': 'True', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:12.285770Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:12.289610Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '1522b94a-dd9f-4517-9cb5-c330221e1ea1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f157a186f10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '1522b94a-dd9f-4517-9cb5-c330221e1ea1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f157a186f10>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:12.483696Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '1522b94a-dd9f-4517-9cb5-c330221e1ea1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f157830f2b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '1522b94a-dd9f-4517-9cb5-c330221e1ea1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f157830f2b0>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:12.553039Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:12.553954Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:12.671518Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:12.955096Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:12.955721Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '1522b94a-dd9f-4517-9cb5-c330221e1ea1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1576bf9130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '1522b94a-dd9f-4517-9cb5-c330221e1ea1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1576bf9130>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:13.040643Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:13.273222Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:13.277327Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '1522b94a-dd9f-4517-9cb5-c330221e1ea1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1576be2670>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '1522b94a-dd9f-4517-9cb5-c330221e1ea1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1576be2670>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:13.290731Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:13.291470Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '1522b94a-dd9f-4517-9cb5-c330221e1ea1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1575e7a730>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '1522b94a-dd9f-4517-9cb5-c330221e1ea1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1575e7a730>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:13.292090Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:13.292896Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:13.293496Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:13.294067Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:13.294593Z"}}
{"data": {"elapsed": 1.004909, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "SQL status: BEGIN in 1.005 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.299593Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.300579Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.301166Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.301716Z"}}
{"data": {"elapsed": 0.12525125, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "SQL status: COMMIT in 0.125 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.427541Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.447320Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.490208Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.490838Z"}}
{"data": {"elapsed": 0.12350056, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "SQL status: BEGIN in 0.124 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.614940Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.615604Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.616223Z"}}
{"data": {"elapsed": 0.12642692, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "SQL status: SELECT 30 in 0.126 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.743307Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, anomaly_threshold_sensitivity, metrics_anomaly_score, alerts_schema_changes, alerts_dbt_models, enriched_columns, alerts_dbt_source_freshness, monitors_runs, job_run_results, information_schema_columns, snapshot_run_results, dbt_artifacts_hashes, model_run_results, alerts_anomaly_detection, alerts_dbt_tests", "name": "ListRelations", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.750917Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.757736Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  ", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.758341Z"}}
{"data": {"elapsed": 0.12610339, "query_id": "", "status": "SELECT 2"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "SQL status: SELECT 2 in 0.126 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.885097Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}, {\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "info", "msg": "Elementary: [{\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}, {\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}]", "name": "JinjaLogInfo", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.893147Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:14.893880Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:15.017983Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:15.026988Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.8143444, "process_in_blocks": "0", "process_kernel_time": 0.214931, "process_mem_max_rss": "114240", "process_out_blocks": "3848", "process_user_time": 2.313258}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.8143444, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.214931, \"process_mem_max_rss\": \"114240\", \"process_out_blocks\": \"3848\", \"process_user_time\": 2.313258}", "name": "ResourceReport", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:15.028180Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:41:15.028954Z", "elapsed": 2.8153663, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:41:15.028954 after 2.82 seconds", "name": "CommandCompleted", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:15.029082Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:15.029704Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1578a14160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1579602d30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1576e82670>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1578a14160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1579602d30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1576e82670>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:15.030269Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:15.030882Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "1522b94a-dd9f-4517-9cb5-c330221e1ea1", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 118, "thread": "MainThread", "ts": "2025-05-09T05:41:15.267701Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b9fe3100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b927b610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b927b670>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b9fe3100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b927b610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b927b670>]}", "name": "SendingEvent", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:16.824411Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:16.828424Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:16.829221Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:16.833047Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '0b55f142-cb37-4411-8cd6-af2cb634e271', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b925cbe0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '0b55f142-cb37-4411-8cd6-af2cb634e271', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b925cbe0>]}", "name": "SendingEvent", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.027269Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '0b55f142-cb37-4411-8cd6-af2cb634e271', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b9263d00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '0b55f142-cb37-4411-8cd6-af2cb634e271', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b9263d00>]}", "name": "SendingEvent", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.096550Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.097467Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.215287Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.498460Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.499097Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '0b55f142-cb37-4411-8cd6-af2cb634e271', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b81f9130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '0b55f142-cb37-4411-8cd6-af2cb634e271', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b81f9130>]}", "name": "SendingEvent", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.582623Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.816629Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.820630Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '0b55f142-cb37-4411-8cd6-af2cb634e271', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b71fa2b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '0b55f142-cb37-4411-8cd6-af2cb634e271', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b71fa2b0>]}", "name": "SendingEvent", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.833884Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.834627Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '0b55f142-cb37-4411-8cd6-af2cb634e271', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b7c48e20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '0b55f142-cb37-4411-8cd6-af2cb634e271', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b7c48e20>]}", "name": "SendingEvent", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.835226Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.836031Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.836638Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.837211Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:17.837766Z"}}
{"data": {"elapsed": 0.9905207, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "SQL status: BEGIN in 0.991 seconds", "name": "SQLQueryStatus", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:18.828345Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:18.829197Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:18.829763Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:18.830297Z"}}
{"data": {"elapsed": 0.12233286, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "SQL status: COMMIT in 0.122 seconds", "name": "SQLQueryStatus", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:18.953220Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:18.975703Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.018175Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.018796Z"}}
{"data": {"elapsed": 0.12229454, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "SQL status: BEGIN in 0.122 seconds", "name": "SQLQueryStatus", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.141740Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.142580Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.143203Z"}}
{"data": {"elapsed": 0.124890216, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "SQL status: SELECT 30 in 0.125 seconds", "name": "SQLQueryStatus", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.268791Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, anomaly_threshold_sensitivity, metrics_anomaly_score, alerts_schema_changes, alerts_dbt_models, enriched_columns, alerts_dbt_source_freshness, monitors_runs, job_run_results, information_schema_columns, snapshot_run_results, dbt_artifacts_hashes, model_run_results, alerts_anomaly_detection, alerts_dbt_tests", "name": "ListRelations", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.276349Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.299027Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.299656Z"}}
{"data": {"elapsed": 0.13433807, "query_id": "", "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "SQL status: SELECT 20 in 0.134 seconds", "name": "SQLQueryStatus", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.434703Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.442620Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.443254Z"}}
{"data": {"elapsed": 0.12497614, "query_id": "", "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "SQL status: SELECT 20 in 0.125 seconds", "name": "SQLQueryStatus", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.568876Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.574803Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.575415Z"}}
{"data": {"elapsed": 0.12463355, "query_id": "", "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "SQL status: SELECT 20 in 0.125 seconds", "name": "SQLQueryStatus", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.700744Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.709356Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  \n                    depends_on_columns\n                  \n\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  \n                    depends_on_columns\n                  \n\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  ", "name": "SQLQuery", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.710017Z"}}
{"data": {"elapsed": 0.122465484, "query_id": "", "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "SQL status: SELECT 0 in 0.122 seconds", "name": "SQLQueryStatus", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.833121Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.840865Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.841521Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.964379Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.972980Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 3.216466, "process_in_blocks": "0", "process_kernel_time": 0.254032, "process_mem_max_rss": "114780", "process_out_blocks": "3856", "process_user_time": 2.311296}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 3.216466, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.254032, \"process_mem_max_rss\": \"114780\", \"process_out_blocks\": \"3856\", \"process_user_time\": 2.311296}", "name": "ResourceReport", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.974138Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:41:19.974903Z", "elapsed": 3.2174838, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:41:19.974903 after 3.22 seconds", "name": "CommandCompleted", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.975031Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.975631Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b9fe3100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b81f95b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b71fa2b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b9fe3100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b81f95b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb3b71fa2b0>]}", "name": "SendingEvent", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.976207Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:19.976814Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "0b55f142-cb37-4411-8cd6-af2cb634e271", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 121, "thread": "MainThread", "ts": "2025-05-09T05:41:20.136424Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb93652b0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9357c24f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9357c2550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb93652b0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9357c24f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9357c2550>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:21.696458Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:21.700495Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'static_parser': 'True', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:21.701343Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:21.705250Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '48132a32-3be5-4577-8611-e5ddc30af539', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9357b5280>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '48132a32-3be5-4577-8611-e5ddc30af539', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9357b5280>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:21.900971Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '48132a32-3be5-4577-8611-e5ddc30af539', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9357aba30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '48132a32-3be5-4577-8611-e5ddc30af539', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9357aba30>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:21.970966Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:21.971889Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.089322Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.375312Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.375942Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '48132a32-3be5-4577-8611-e5ddc30af539', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9343f2130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '48132a32-3be5-4577-8611-e5ddc30af539', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9343f2130>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.461336Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.697283Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.701293Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '48132a32-3be5-4577-8611-e5ddc30af539', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9347836d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '48132a32-3be5-4577-8611-e5ddc30af539', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9347836d0>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.714424Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.715168Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '48132a32-3be5-4577-8611-e5ddc30af539', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9346b9fd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '48132a32-3be5-4577-8611-e5ddc30af539', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9346b9fd0>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.715869Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.716946Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.717799Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.718592Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:22.719382Z"}}
{"data": {"elapsed": 0.9776432, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "SQL status: BEGIN in 0.978 seconds", "name": "SQLQueryStatus", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:23.697063Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:23.697979Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:23.698604Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:23.699162Z"}}
{"data": {"elapsed": 0.12078232, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "SQL status: COMMIT in 0.121 seconds", "name": "SQLQueryStatus", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:23.820522Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:23.909636Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  ", "name": "SQLQuery", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:23.910318Z"}}
{"data": {"elapsed": 0.6390687, "query_id": "", "status": "SELECT 28"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "SQL status: SELECT 28 in 0.639 seconds", "name": "SQLQueryStatus", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:24.550101Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"30d592d9-2794-4c66-a3b5-3ad6c4559784\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-03 05:38:37\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"30d592d9-2794-4c66-a3b5-3ad6c4559784\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-03 05:38:37\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"30d592d9-2794-4c66-a3b5-3ad6c4559784\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-03 05:38:37\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"30d592d9-2794-4c66-a3b5-3ad6c4559784\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-03 05:38:37\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"2f4998b2-ca13-47fa-af15-bf68ac1be887\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-04 05:38:16\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"2f4998b2-ca13-47fa-af15-bf68ac1be887\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-04 05:38:16\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"2f4998b2-ca13-47fa-af15-bf68ac1be887\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-04 05:38:16\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"2f4998b2-ca13-47fa-af15-bf68ac1be887\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-04 05:38:16\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"8af2c9d0-fb33-4e46-8b8f-11a6b97b9630\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-05 05:39:24\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"8af2c9d0-fb33-4e46-8b8f-11a6b97b9630\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-05 05:39:24\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"8af2c9d0-fb33-4e46-8b8f-11a6b97b9630\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-05 05:39:24\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"8af2c9d0-fb33-4e46-8b8f-11a6b97b9630\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-05 05:39:24\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"6ccd6ab7-2322-4c90-981b-7a0ae3030e52\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-06 05:39:04\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"6ccd6ab7-2322-4c90-981b-7a0ae3030e52\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-06 05:39:04\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"6ccd6ab7-2322-4c90-981b-7a0ae3030e52\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-06 05:39:04\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"6ccd6ab7-2322-4c90-981b-7a0ae3030e52\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-06 05:39:04\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"7d54e253-2e8d-4096-94bb-c196c59e3e48\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-07 05:39:28\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"7d54e253-2e8d-4096-94bb-c196c59e3e48\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-07 05:39:28\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"7d54e253-2e8d-4096-94bb-c196c59e3e48\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-07 05:39:28\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"7d54e253-2e8d-4096-94bb-c196c59e3e48\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-07 05:39:28\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"0cc53822-46c3-4675-988f-7688d106cf4f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-08 05:39:34\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"0cc53822-46c3-4675-988f-7688d106cf4f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-08 05:39:34\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"0cc53822-46c3-4675-988f-7688d106cf4f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-08 05:39:34\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"0cc53822-46c3-4675-988f-7688d106cf4f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-08 05:39:34\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-09 05:39:15\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-09 05:39:15\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-09 05:39:15\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-09 05:39:15\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"30d592d9-2794-4c66-a3b5-3ad6c4559784\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-03 05:38:37\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"30d592d9-2794-4c66-a3b5-3ad6c4559784\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-03 05:38:37\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"30d592d9-2794-4c66-a3b5-3ad6c4559784\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-03 05:38:37\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"30d592d9-2794-4c66-a3b5-3ad6c4559784\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-03 05:38:37\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"2f4998b2-ca13-47fa-af15-bf68ac1be887\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-04 05:38:16\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"2f4998b2-ca13-47fa-af15-bf68ac1be887\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-04 05:38:16\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"2f4998b2-ca13-47fa-af15-bf68ac1be887\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-04 05:38:16\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"2f4998b2-ca13-47fa-af15-bf68ac1be887\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-04 05:38:16\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"8af2c9d0-fb33-4e46-8b8f-11a6b97b9630\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-05 05:39:24\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"8af2c9d0-fb33-4e46-8b8f-11a6b97b9630\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.9, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-05 05:39:24\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"8af2c9d0-fb33-4e46-8b8f-11a6b97b9630\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-05 05:39:24\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"8af2c9d0-fb33-4e46-8b8f-11a6b97b9630\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-05 05:39:24\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"6ccd6ab7-2322-4c90-981b-7a0ae3030e52\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-06 05:39:04\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"6ccd6ab7-2322-4c90-981b-7a0ae3030e52\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-06 05:39:04\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"6ccd6ab7-2322-4c90-981b-7a0ae3030e52\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-06 05:39:04\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"6ccd6ab7-2322-4c90-981b-7a0ae3030e52\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-06 05:39:04\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"7d54e253-2e8d-4096-94bb-c196c59e3e48\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-07 05:39:28\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"7d54e253-2e8d-4096-94bb-c196c59e3e48\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-07 05:39:28\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"7d54e253-2e8d-4096-94bb-c196c59e3e48\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-07 05:39:28\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"7d54e253-2e8d-4096-94bb-c196c59e3e48\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-07 05:39:28\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"0cc53822-46c3-4675-988f-7688d106cf4f\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-08 05:39:34\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"0cc53822-46c3-4675-988f-7688d106cf4f\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-08 05:39:34\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"0cc53822-46c3-4675-988f-7688d106cf4f\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-08 05:39:34\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"0cc53822-46c3-4675-988f-7688d106cf4f\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-08 05:39:34\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-05-09 05:39:15\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-09 05:39:15\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-05-09 05:39:15\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-05-09 05:39:15\"}]", "name": "JinjaLogInfo", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:24.564061Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:24.566088Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:24.574731Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.9464278, "process_in_blocks": "0", "process_kernel_time": 0.247265, "process_mem_max_rss": "114060", "process_out_blocks": "3920", "process_user_time": 2.297471}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.9464278, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.247265, \"process_mem_max_rss\": \"114060\", \"process_out_blocks\": \"3920\", \"process_user_time\": 2.297471}", "name": "ResourceReport", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:24.575875Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:41:24.576612Z", "elapsed": 2.9474287, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:41:24.576612 after 2.95 seconds", "name": "CommandCompleted", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:24.576771Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:24.577372Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb93652b0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb933735ee0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9343f2580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb93652b0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb933735ee0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb9343f2580>]}", "name": "SendingEvent", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:24.577958Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:24.578563Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "48132a32-3be5-4577-8611-e5ddc30af539", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 124, "thread": "MainThread", "ts": "2025-05-09T05:41:24.775021Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc01296100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc0052d610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc0052d670>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc01296100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc0052d610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc0052d670>]}", "name": "SendingEvent", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:26.349260Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:26.353318Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'debug': 'False', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'log_format': 'json', 'introspect': 'True', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:26.354127Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:26.357960Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc0050ebe0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc0050ebe0>]}", "name": "SendingEvent", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:26.552449Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc00516d00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc00516d00>]}", "name": "SendingEvent", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:26.622167Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:26.623158Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:26.740277Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.026238Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.026860Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efbff3f9130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efbff3f9130>]}", "name": "SendingEvent", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.111340Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.347471Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.351622Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efbfe6f72b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efbfe6f72b0>]}", "name": "SendingEvent", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.364872Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.365625Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efbfef1d700>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efbfef1d700>]}", "name": "SendingEvent", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.366227Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.367040Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.367634Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.368209Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:27.368763Z"}}
{"data": {"elapsed": 1.0012357, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "SQL status: BEGIN in 1.001 seconds", "name": "SQLQueryStatus", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.370060Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.370960Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.371516Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.372102Z"}}
{"data": {"elapsed": 0.123812854, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "SQL status: COMMIT in 0.124 seconds", "name": "SQLQueryStatus", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.496495Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.515981Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.558518Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.559133Z"}}
{"data": {"elapsed": 0.123254046, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "SQL status: BEGIN in 0.123 seconds", "name": "SQLQueryStatus", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.682975Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.683801Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.684384Z"}}
{"data": {"elapsed": 0.12651184, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "SQL status: SELECT 30 in 0.127 seconds", "name": "SQLQueryStatus", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.811555Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, anomaly_threshold_sensitivity, metrics_anomaly_score, alerts_schema_changes, alerts_dbt_models, enriched_columns, alerts_dbt_source_freshness, monitors_runs, job_run_results, information_schema_columns, snapshot_run_results, dbt_artifacts_hashes, model_run_results, alerts_anomaly_detection, alerts_dbt_tests", "name": "ListRelations", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.819001Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.825861Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  ", "name": "SQLQuery", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.826481Z"}}
{"data": {"elapsed": 0.13371329, "query_id": "", "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "SQL status: SELECT 6 in 0.134 seconds", "name": "SQLQueryStatus", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.960867Z"}}
{"data": {"msg": "Elementary: [{\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}, {\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "info", "msg": "Elementary: [{\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}, {\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}]", "name": "JinjaLogInfo", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.969094Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:28.969813Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:29.098202Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:29.107112Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.826209, "process_in_blocks": "0", "process_kernel_time": 0.22303, "process_mem_max_rss": "114492", "process_out_blocks": "3848", "process_user_time": 2.318321}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.826209, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.22303, \"process_mem_max_rss\": \"114492\", \"process_out_blocks\": \"3848\", \"process_user_time\": 2.318321}", "name": "ResourceReport", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:29.108303Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:41:29.109088Z", "elapsed": 2.827244, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:41:29.109088 after 2.83 seconds", "name": "CommandCompleted", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:29.109215Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:29.109848Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc01296100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efbff3f95b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efbfe6f72b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efc01296100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efbff3f95b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7efbfe6f72b0>]}", "name": "SendingEvent", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:29.110418Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:29.111046Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "ed9b86f1-aaf2-46e0-a2c2-efcd29a931a4", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 127, "thread": "MainThread", "ts": "2025-05-09T05:41:29.298572Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4eeaf6100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4edd8d610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4edd8d670>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4eeaf6100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4edd8d610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4edd8d670>]}", "name": "SendingEvent", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:30.867280Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:30.871254Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'debug': 'False', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:30.872053Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:30.875952Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '44c6436d-b0d5-4cd6-8ada-f804a29e22ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4edd6bbe0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '44c6436d-b0d5-4cd6-8ada-f804a29e22ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4edd6bbe0>]}", "name": "SendingEvent", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.070036Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '44c6436d-b0d5-4cd6-8ada-f804a29e22ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4edd76d00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '44c6436d-b0d5-4cd6-8ada-f804a29e22ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4edd76d00>]}", "name": "SendingEvent", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.139959Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.140892Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.258843Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.544073Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.544687Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '44c6436d-b0d5-4cd6-8ada-f804a29e22ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4ec9f2130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '44c6436d-b0d5-4cd6-8ada-f804a29e22ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4ec9f2130>]}", "name": "SendingEvent", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.628914Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.863220Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.867248Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '44c6436d-b0d5-4cd6-8ada-f804a29e22ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4ebcf96a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '44c6436d-b0d5-4cd6-8ada-f804a29e22ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4ebcf96a0>]}", "name": "SendingEvent", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.880404Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.881160Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '44c6436d-b0d5-4cd6-8ada-f804a29e22ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4ec15a220>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '44c6436d-b0d5-4cd6-8ada-f804a29e22ba', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4ec15a220>]}", "name": "SendingEvent", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.881781Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.882556Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.883183Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.883767Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:31.884302Z"}}
{"data": {"elapsed": 0.9892472, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "SQL status: BEGIN in 0.989 seconds", "name": "SQLQueryStatus", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:32.873633Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:32.874482Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:32.875055Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:32.875590Z"}}
{"data": {"elapsed": 0.120645575, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "SQL status: COMMIT in 0.121 seconds", "name": "SQLQueryStatus", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:32.996839Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.017187Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.059901Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.060508Z"}}
{"data": {"elapsed": 0.120620035, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "SQL status: BEGIN in 0.121 seconds", "name": "SQLQueryStatus", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.181807Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.182632Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.183356Z"}}
{"data": {"elapsed": 0.12286557, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "SQL status: SELECT 30 in 0.123 seconds", "name": "SQLQueryStatus", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.306896Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, anomaly_threshold_sensitivity, metrics_anomaly_score, alerts_schema_changes, alerts_dbt_models, enriched_columns, alerts_dbt_source_freshness, monitors_runs, job_run_results, information_schema_columns, snapshot_run_results, dbt_artifacts_hashes, model_run_results, alerts_anomaly_detection, alerts_dbt_tests", "name": "ListRelations", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.314345Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.321559Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n    \n  ", "name": "SQLQuery", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.322205Z"}}
{"data": {"elapsed": 0.12246174, "query_id": "", "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "SQL status: SELECT 6 in 0.122 seconds", "name": "SQLQueryStatus", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.445341Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}]", "name": "JinjaLogInfo", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.453560Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.454309Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.575542Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.584495Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.7860072, "process_in_blocks": "0", "process_kernel_time": 0.241922, "process_mem_max_rss": "114420", "process_out_blocks": "3848", "process_user_time": 2.289269}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.7860072, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.241922, \"process_mem_max_rss\": \"114420\", \"process_out_blocks\": \"3848\", \"process_user_time\": 2.289269}", "name": "ResourceReport", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.585699Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:41:33.586446Z", "elapsed": 2.7870276, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:41:33.586446 after 2.79 seconds", "name": "CommandCompleted", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.586573Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.587200Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4eeaf6100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4ec9f25b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4ebcf96a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4eeaf6100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4ec9f25b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4ebcf96a0>]}", "name": "SendingEvent", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.587774Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.588362Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "44c6436d-b0d5-4cd6-8ada-f804a29e22ba", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 130, "thread": "MainThread", "ts": "2025-05-09T05:41:33.761992Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e91ccb0a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e90f5f550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e90f5f5b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e91ccb0a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e90f5f550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e90f5f5b0>]}", "name": "SendingEvent", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:35.320222Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:35.324271Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'log_format': 'json', 'static_parser': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:35.325077Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:35.328908Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '11cd83bc-799a-4a53-a8a5-74d31bd927f0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e903f9a60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '11cd83bc-799a-4a53-a8a5-74d31bd927f0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e903f9a60>]}", "name": "SendingEvent", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:35.523218Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '11cd83bc-799a-4a53-a8a5-74d31bd927f0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e9165f370>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '11cd83bc-799a-4a53-a8a5-74d31bd927f0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e9165f370>]}", "name": "SendingEvent", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:35.592321Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:35.593265Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:35.709619Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:35.993302Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:35.993929Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '11cd83bc-799a-4a53-a8a5-74d31bd927f0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e8fbf9130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '11cd83bc-799a-4a53-a8a5-74d31bd927f0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e8fbf9130>]}", "name": "SendingEvent", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:36.078137Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:36.315425Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:36.319478Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '11cd83bc-799a-4a53-a8a5-74d31bd927f0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e8fbf9ee0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '11cd83bc-799a-4a53-a8a5-74d31bd927f0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e8fbf9ee0>]}", "name": "SendingEvent", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:36.332723Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:36.333460Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '11cd83bc-799a-4a53-a8a5-74d31bd927f0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e928507f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '11cd83bc-799a-4a53-a8a5-74d31bd927f0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e928507f0>]}", "name": "SendingEvent", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:36.334071Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:36.334842Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:36.335432Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:36.335998Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:36.336518Z"}}
{"data": {"elapsed": 0.9776322, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "SQL status: BEGIN in 0.978 seconds", "name": "SQLQueryStatus", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.314211Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.314977Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.315528Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.316091Z"}}
{"data": {"elapsed": 0.12067639, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "SQL status: COMMIT in 0.121 seconds", "name": "SQLQueryStatus", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.437332Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.491013Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  ", "name": "SQLQuery", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.491701Z"}}
{"data": {"elapsed": 0.15075442, "query_id": "", "status": "SELECT 34"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "SQL status: SELECT 34 in 0.151 seconds", "name": "SQLQueryStatus", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.643101Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\"}]", "name": "JinjaLogInfo", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.652624Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.653525Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.662181Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.410175, "process_in_blocks": "0", "process_kernel_time": 0.225983, "process_mem_max_rss": "113904", "process_out_blocks": "3840", "process_user_time": 2.26883}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.410175, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.225983, \"process_mem_max_rss\": \"113904\", \"process_out_blocks\": \"3840\", \"process_user_time\": 2.26883}", "name": "ResourceReport", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.663337Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:41:37.664109Z", "elapsed": 2.4111888, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:41:37.664109 after 2.41 seconds", "name": "CommandCompleted", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.664235Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.664867Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e91ccb0a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e8f6de8e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e8fbf9ee0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e91ccb0a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e8f6de8e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0e8fbf9ee0>]}", "name": "SendingEvent", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.665429Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.666038Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "11cd83bc-799a-4a53-a8a5-74d31bd927f0", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 133, "thread": "MainThread", "ts": "2025-05-09T05:41:37.854166Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f19209a4070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191fc3b580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191fc3b5e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f19209a4070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191fc3b580>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191fc3b5e0>]}", "name": "SendingEvent", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:39.415162Z"}}
{"data": {"log_version": 3, "version": "=1.9.4"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "info", "msg": "Running with dbt=1.9.4", "name": "MainReportVersion", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:39.419301Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:39.420129Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:39.424097Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '21f661a1-cf8d-4926-a3e4-91f39eb9ae76', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f19202b4a30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '21f661a1-cf8d-4926-a3e4-91f39eb9ae76', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f19202b4a30>]}", "name": "SendingEvent", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:39.620887Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '21f661a1-cf8d-4926-a3e4-91f39eb9ae76', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191fc25eb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '21f661a1-cf8d-4926-a3e4-91f39eb9ae76', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191fc25eb0>]}", "name": "SendingEvent", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:39.690973Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:39.691925Z"}}
{"data": {"checksum": "b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c", "profile": "", "target": "", "vars": "{}", "version": "1.9.4"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "checksum: b5597158181700c50f5bc1c71fe28b37a6fb85633dc5323885263678b6bc782c, vars: {}, profile: , target: , version: 1.9.4", "name": "StateCheckVarsHash", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:39.811423Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.098491Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.099117Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '21f661a1-cf8d-4926-a3e4-91f39eb9ae76', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191ebfbfd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '21f661a1-cf8d-4926-a3e4-91f39eb9ae76', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191ebfbfd0>]}", "name": "SendingEvent", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.183619Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.420888Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.424940Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '21f661a1-cf8d-4926-a3e4-91f39eb9ae76', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191ebfb100>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '21f661a1-cf8d-4926-a3e4-91f39eb9ae76', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191ebfb100>]}", "name": "SendingEvent", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.438398Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.439176Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '21f661a1-cf8d-4926-a3e4-91f39eb9ae76', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191e3e5f40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '21f661a1-cf8d-4926-a3e4-91f39eb9ae76', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191e3e5f40>]}", "name": "SendingEvent", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.439806Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.440582Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.441205Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.441778Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:40.442316Z"}}
{"data": {"elapsed": 1.0239141, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "SQL status: BEGIN in 1.024 seconds", "name": "SQLQueryStatus", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.466292Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.467028Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.467578Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.468135Z"}}
{"data": {"elapsed": 0.12629688, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "SQL status: COMMIT in 0.126 seconds", "name": "SQLQueryStatus", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.595006Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.665801Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.666421Z"}}
{"data": {"elapsed": 0.12711321, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "SQL status: BEGIN in 0.127 seconds", "name": "SQLQueryStatus", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.794165Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.795044Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.795860Z"}}
{"data": {"elapsed": 0.13988055, "query_id": "", "status": "SELECT 35"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "SQL status: SELECT 35 in 0.140 seconds", "name": "SQLQueryStatus", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.936362Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.947228Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.4\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  ", "name": "SQLQuery", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:41.947884Z"}}
{"data": {"elapsed": 0.15010618, "query_id": "", "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "SQL status: SELECT 1 in 0.150 seconds", "name": "SQLQueryStatus", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:42.098656Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/14922202421\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"f3ce2965-3315-492b-a6cc-9ce1586a27c3\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/14922202421\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]", "name": "JinjaLogInfo", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:42.106764Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:42.107431Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:42.234276Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:42.243019Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.8971207, "process_in_blocks": "0", "process_kernel_time": 0.250035, "process_mem_max_rss": "114248", "process_out_blocks": "3840", "process_user_time": 2.296322}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.8971207, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.250035, \"process_mem_max_rss\": \"114248\", \"process_out_blocks\": \"3840\", \"process_user_time\": 2.296322}", "name": "ResourceReport", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:42.244189Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-05-09T05:41:42.244955Z", "elapsed": 2.8981302, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:41:42.244955 after 2.90 seconds", "name": "CommandCompleted", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:42.245083Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:42.245697Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f19209a4070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1920c4e1c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191ebe1820>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f19209a4070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1920c4e1c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f191ebe1820>]}", "name": "SendingEvent", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:42.246256Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:42.246860Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "21f661a1-cf8d-4926-a3e4-91f39eb9ae76", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 136, "thread": "MainThread", "ts": "2025-05-09T05:41:42.405748Z"}}
