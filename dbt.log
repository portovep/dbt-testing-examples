{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb54a2490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb5b9c7c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb5b9c400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb54a2490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb5b9c7c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb5b9c400>]}", "name": "SendingEvent", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:19.885416Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:19.889112Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'version_check': 'True', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'log_format': 'json', 'static_parser': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:19.889928Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'a80183b1-489a-4b97-be56-509f5e6373e2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb46e4730>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'a80183b1-489a-4b97-be56-509f5e6373e2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb46e4730>]}", "name": "SendingEvent", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:19.996279Z"}}
{"data": {"path": "/tmp/dbt-downloads-ola3o30b"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-ola3o30b'", "name": "DepsSetDownloadDirectory", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:19.997620Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M022", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Making package index registry request: GET https://hub.getdbt.com/api/v1/index.json", "name": "RegistryIndexProgressGETRequest", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:19.998372Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M023", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Response from registry index: GET https://hub.getdbt.com/api/v1/index.json 200", "name": "RegistryIndexProgressGETResponse", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.045861Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json", "name": "RegistryProgressGETRequest", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.047254Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json 200", "name": "RegistryProgressGETResponse", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.083984Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json", "name": "RegistryProgressGETRequest", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.090247Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json 200", "name": "RegistryProgressGETResponse", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.145963Z"}}
{"data": {"lock_filepath": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml"}, "info": {"category": "", "code": "M031", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "info", "msg": "Updating lock file in file path: /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml", "name": "DepsLockUpdating", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.169740Z"}}
{"data": {"path": "/tmp/dbt-downloads-5quebtf8"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-5quebtf8'", "name": "DepsSetDownloadDirectory", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.172403Z"}}
{"data": {"package_name": "dbt-labs/dbt_utils"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "info", "msg": "Installing dbt-labs/dbt_utils", "name": "DepsStartPackageInstall", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.182909Z"}}
{"data": {"version_name": "version 0.8.6"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "info", "msg": "Installed from version 0.8.6", "name": "DepsInstallInfo", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.697655Z"}}
{"data": {"version_latest": "1.1.1"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "info", "msg": "Updated version available: 1.1.1", "name": "DepsUpdateAvailable", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.698414Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': 'a80183b1-489a-4b97-be56-509f5e6373e2', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb3395a00>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb3395fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': 'a80183b1-489a-4b97-be56-509f5e6373e2', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb3395a00>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb3395fa0>]}", "name": "SendingEvent", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.699096Z"}}
{"data": {"package_name": "elementary-data/elementary"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "info", "msg": "Installing elementary-data/elementary", "name": "DepsStartPackageInstall", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:20.699751Z"}}
{"data": {"version_name": "version 0.13.0"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "info", "msg": "Installed from version 0.13.0", "name": "DepsInstallInfo", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:21.217058Z"}}
{"data": {"version_latest": "0.14.1"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "info", "msg": "Updated version available: 0.14.1", "name": "DepsUpdateAvailable", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:21.217859Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': 'a80183b1-489a-4b97-be56-509f5e6373e2', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb33a5400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb5b9c070>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': 'a80183b1-489a-4b97-be56-509f5e6373e2', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb33a5400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb5b9c070>]}", "name": "SendingEvent", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:21.218542Z"}}
{"data": {"msg": ""}, "info": {"category": "", "code": "Z017", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "info", "msg": "", "name": "Formatting", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:21.219239Z"}}
{"data": {"packages": ["dbt-labs/dbt_utils", "elementary-data/elementary"]}, "info": {"category": "", "code": "M019", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "info", "msg": "Updates available for packages: ['dbt-labs/dbt_utils', 'elementary-data/elementary']                 \nUpdate your versions in packages.yml, then run dbt deps", "name": "DepsNotifyUpdatesAvailable", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:21.219853Z"}}
{"data": {"command_name": "deps", "command_success": true, "command_wall_clock_time": 1.3878101, "process_in_blocks": "0", "process_kernel_time": 0.207754, "process_mem_max_rss": "95008", "process_out_blocks": "7056", "process_user_time": 2.47707}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Resource report: {\"command_name\": \"deps\", \"command_success\": true, \"command_wall_clock_time\": 1.3878101, \"process_user_time\": 2.47707, \"process_kernel_time\": 0.207754, \"process_mem_max_rss\": \"95008\", \"process_out_blocks\": \"7056\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:21.221469Z"}}
{"data": {"command": "dbt deps", "completed_at": "2024-04-03T05:37:21.222222Z", "elapsed": 1.3888112, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Command `dbt deps` succeeded at 05:37:21.222222 after 1.39 seconds", "name": "CommandCompleted", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:21.222424Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb54a2490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb3336040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb33a5400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb54a2490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb3336040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8bb33a5400>]}", "name": "SendingEvent", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:21.223116Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "a80183b1-489a-4b97-be56-509f5e6373e2", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 87, "thread": "MainThread", "ts": "2024-04-03T05:37:21.223750Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c03c02070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c04278fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c042788b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c03c02070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c04278fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c042788b0>]}", "name": "SendingEvent", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:23.860295Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:23.864010Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'static_parser': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:23.864835Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:23.868776Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0426c340>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0426c340>]}", "name": "SendingEvent", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:24.062993Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c014ff9a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c014ff9a0>]}", "name": "SendingEvent", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:24.164909Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:24.165888Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:24.183264Z"}}
{"data": {"reason": "saved manifest not found. Starting full parse."}, "info": {"category": "", "code": "I024", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "info", "msg": "Unable to do partial parsing because saved manifest not found. Starting full parse.", "name": "UnableToPartialParse", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:24.184268Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'partial_parser', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c01139580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c01139580>]}", "name": "SendingEvent", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:24.184937Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4bfedb80d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4bfedb80d0>]}", "name": "SendingEvent", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:29.265613Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c001d6790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c001d6790>]}", "name": "SendingEvent", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:29.298405Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:29.299141Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0090c610>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '24b2b919-c815-4c82-a768-f808be6905dc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c0090c610>]}", "name": "SendingEvent", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:29.299826Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:29.300826Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:29.301531Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:29.302139Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:29.302736Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:30.552778Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:30.553819Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:30.554436Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:30.555034Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:30.709275Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:30.779406Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:30.792434Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:30.793102Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:30.947503Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:30.948452Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:30.949180Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.106029Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, snapshot_run_results, anomaly_threshold_sensitivity, model_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.115776Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.123113Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  ", "name": "SQLQuery", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.123773Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "SQL status: SELECT 1 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.278882Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"8533751648\", \"run_started_at\": \"2024-04-03 05:35:36\", \"run_completed_at\": \"2024-04-03 05:36:03\", \"generated_at\": \"2024-04-03 05:36:03\", \"created_at\": \"2024-04-03T05:36:03.951181\", \"command\": \"run\", \"dbt_version\": \"1.6.3\", \"elementary_version\": \"0.13.0\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"37097870cb31838bb4d5faff06dac26367a466d0\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8533751648\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8533751648\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"8533751648\", \"run_started_at\": \"2024-04-03 05:35:36\", \"run_completed_at\": \"2024-04-03 05:36:03\", \"generated_at\": \"2024-04-03 05:36:03\", \"created_at\": \"2024-04-03T05:36:03.951181\", \"command\": \"run\", \"dbt_version\": \"1.6.3\", \"elementary_version\": \"0.13.0\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"37097870cb31838bb4d5faff06dac26367a466d0\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8533751648\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8533751648\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]", "name": "JinjaLogInfo", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.288455Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.289306Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.443655Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 7.6386642, "process_in_blocks": "0", "process_kernel_time": 0.183959, "process_mem_max_rss": "127704", "process_out_blocks": "7104", "process_user_time": 7.607351}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 7.6386642, \"process_user_time\": 7.607351, \"process_kernel_time\": 0.183959, \"process_mem_max_rss\": \"127704\", \"process_out_blocks\": \"7104\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.446529Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:37:31.447240Z", "elapsed": 7.6396184, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:31.447240 after 7.64 seconds", "name": "CommandCompleted", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.447433Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.448097Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c03c02070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4bffc7bdc0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c01ad9070>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c03c02070>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4bffc7bdc0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f4c01ad9070>]}", "name": "SendingEvent", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.448712Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "24b2b919-c815-4c82-a768-f808be6905dc", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 89, "thread": "MainThread", "ts": "2024-04-03T05:37:31.449402Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55bb15efa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55bb7e1910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55bb7e1bb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55bb15efa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55bb7e1910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55bb7e1bb0>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.112523Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.116338Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'debug': 'False', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.117196Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.121159Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'd00c6933-6809-4913-828c-10a5686a2e88', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55bb83e550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'd00c6933-6809-4913-828c-10a5686a2e88', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55bb83e550>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.317058Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'd00c6933-6809-4913-828c-10a5686a2e88', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b8736880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'd00c6933-6809-4913-828c-10a5686a2e88', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b8736880>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.420438Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.421450Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.438760Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.558253Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.558913Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'd00c6933-6809-4913-828c-10a5686a2e88', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b7fdbf40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'd00c6933-6809-4913-828c-10a5686a2e88', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b7fdbf40>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.569635Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'd00c6933-6809-4913-828c-10a5686a2e88', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b8722dc0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'd00c6933-6809-4913-828c-10a5686a2e88', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b8722dc0>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.646879Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.647683Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'd00c6933-6809-4913-828c-10a5686a2e88', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b83af3a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'd00c6933-6809-4913-828c-10a5686a2e88', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b83af3a0>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.648333Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.649393Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.650063Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.650676Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:34.651276Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:35.899821Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:35.900811Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:35.901482Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:35.902098Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:36.056691Z"}}
{"data": {"msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "info", "msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]", "name": "JinjaLogInfo", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:36.071165Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:36.071918Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.0144837, "process_in_blocks": "0", "process_kernel_time": 0.155379, "process_mem_max_rss": "110912", "process_out_blocks": "3648", "process_user_time": 2.625507}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.0144837, \"process_user_time\": 2.625507, \"process_kernel_time\": 0.155379, \"process_mem_max_rss\": \"110912\", \"process_out_blocks\": \"3648\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:36.074149Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:37:36.074876Z", "elapsed": 2.0154426, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:36.074876 after 2.02 seconds", "name": "CommandCompleted", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:36.075072Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:36.075727Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55bb15efa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b82ffd60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b8722fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55bb15efa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b82ffd60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55b8722fa0>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:36.076333Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "d00c6933-6809-4913-828c-10a5686a2e88", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 95, "thread": "MainThread", "ts": "2024-04-03T05:37:36.077009Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e9a6ffa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31ea0f1910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31ea0f1bb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e9a6ffa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31ea0f1910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31ea0f1bb0>]}", "name": "SendingEvent", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:38.727095Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:38.730801Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'version_check': 'True', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:38.731635Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:38.735563Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '96e556f3-6e65-4dba-badb-c807ab2b8953', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31ea14e550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '96e556f3-6e65-4dba-badb-c807ab2b8953', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31ea14e550>]}", "name": "SendingEvent", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:38.927753Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '96e556f3-6e65-4dba-badb-c807ab2b8953', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e6d36880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '96e556f3-6e65-4dba-badb-c807ab2b8953', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e6d36880>]}", "name": "SendingEvent", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.028743Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.029804Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.047134Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.166275Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.167003Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '96e556f3-6e65-4dba-badb-c807ab2b8953', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e65dbf40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '96e556f3-6e65-4dba-badb-c807ab2b8953', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e65dbf40>]}", "name": "SendingEvent", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.177935Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '96e556f3-6e65-4dba-badb-c807ab2b8953', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e6d22dc0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '96e556f3-6e65-4dba-badb-c807ab2b8953', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e6d22dc0>]}", "name": "SendingEvent", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.251303Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.252120Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '96e556f3-6e65-4dba-badb-c807ab2b8953', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e6caf3a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '96e556f3-6e65-4dba-badb-c807ab2b8953', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e6caf3a0>]}", "name": "SendingEvent", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.252773Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.253836Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.254487Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.255105Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:39.255705Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.508986Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.509857Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.510469Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.511084Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.666445Z"}}
{"data": {"msg": "Elementary: \"neondb.dbt_testing_example_elementary\""}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "info", "msg": "Elementary: \"neondb.dbt_testing_example_elementary\"", "name": "JinjaLogInfo", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.683208Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.683984Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.0110664, "process_in_blocks": "0", "process_kernel_time": 0.144097, "process_mem_max_rss": "111136", "process_out_blocks": "3648", "process_user_time": 2.620593}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.0110664, \"process_user_time\": 2.620593, \"process_kernel_time\": 0.144097, \"process_mem_max_rss\": \"111136\", \"process_out_blocks\": \"3648\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.686184Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:37:40.686905Z", "elapsed": 2.0120187, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:40.686905 after 2.01 seconds", "name": "CommandCompleted", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.687097Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.687748Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e9a6ffa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e699ad60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e6d22fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e9a6ffa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e699ad60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f31e6d22fa0>]}", "name": "SendingEvent", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.688355Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "96e556f3-6e65-4dba-badb-c807ab2b8953", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 98, "thread": "MainThread", "ts": "2024-04-03T05:37:40.689028Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff154d3a430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff1553bc4c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff1553bce80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff154d3a430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff1553bc4c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff1553bce80>]}", "name": "SendingEvent", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.325299Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.328955Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.329796Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.333682Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff1553ca0d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff1553ca0d0>]}", "name": "SendingEvent", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.527598Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff152bf4610>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff152bf4610>]}", "name": "SendingEvent", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.629639Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.630625Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.647979Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.766585Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.767239Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff151bd9f10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff151bd9f10>]}", "name": "SendingEvent", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.777808Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff151f3dc40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff151f3dc40>]}", "name": "SendingEvent", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.849849Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.850677Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff151f3d6d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff151f3d6d0>]}", "name": "SendingEvent", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.851333Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.852368Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.853030Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.853643Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:43.854243Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:45.101282Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:45.102207Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:45.102842Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:45.103448Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:45.257850Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:45.332040Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  ", "name": "SQLQuery", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:45.332934Z"}}
{"data": {"elapsed": 1.0, "status": "SELECT 162"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "SQL status: SELECT 162 in 1.0 seconds", "name": "SQLQueryStatus", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:46.120597Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:46.138862Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  ", "name": "SQLQuery", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:46.139556Z"}}
{"data": {"elapsed": 1.0, "status": "SELECT 456"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "SQL status: SELECT 456 in 1.0 seconds", "name": "SQLQueryStatus", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:46.959029Z"}}
{"data": {"msg": "Elementary: [{\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-01T20:49:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Database Error in test body_mass_indexes_component_test (tests/component/body_mass_indexes_component_test.sql)\\n  syntax error at or near \\\"current_timestamp\\\"\\n  LINE 154:         current_timestamp as processed_at\\n                    ^\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": null, \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"error\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": null, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-01T20:59:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-01T21:00:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"794d5382-8844-4458-864c-b19e7984abe9.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"794d5382-8844-4458-864c-b19e7984abe9\", \"test_execution_id\": \"794d5382-8844-4458-864c-b19e7984abe9.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"23b0d43e-fdeb-41b3-8768-0a56d46a149d.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"23b0d43e-fdeb-41b3-8768-0a56d46a149d\", \"test_execution_id\": \"23b0d43e-fdeb-41b3-8768-0a56d46a149d.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:49:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Database Error in test body_mass_indexes_unit_test (tests/unit/marts/body_mass_indexes_unit_test.sql)\\n  syntax error at or near \\\"current_timestamp\\\"\\n  LINE 43:         current_timestamp as processed_at\\n                   ^\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": null, \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"error\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": null, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:59:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:00:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f\", \"test_execution_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:04:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25\", \"test_execution_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T20:59:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T21:00:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T21:06:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T21:06:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T21:36:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T20:59:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T21:00:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T21:06:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T21:06:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T21:36:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T21:06:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T21:06:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T21:36:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T21:06:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T21:06:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T21:36:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T21:06:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T21:06:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-02T05:34:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T21:06:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T21:06:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T21:06:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T21:06:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T21:36:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-03T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T21:06:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T21:06:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T21:36:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-03T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8c31ac62a0b82d5f60e08a81d2d3f7c9\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-03-20 08:19:08.801254, 299.68 hours ago. Usually the table is updated within 149.68 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240401204909908542\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-03-20 08:19:08.801254\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"70941d18e4ff8f3f36137f6f39238356\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-01T20:59:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-03-20 08:19:08.801254, 299.68 hours ago. Usually the table is updated within 149.68 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240401205906025083\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-03-20 08:19:08.801254\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9d52f207a32cd1be9053461dcf2f4c55\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-01T21:00:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-03-20 08:19:08.801254, 299.68 hours ago. Usually the table is updated within 149.68 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240401210030979375\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-03-20 08:19:08.801254\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 6052.0, \"average\": 3037.0, \"min_value\": 0.0, \"max_value\": 15828.561671664644, \"start_time\": \"2024-03-20T08:00:00\", \"end_time\": \"2024-03-20T10:00:00\", \"id\": \"62ec551a93dafdce4a56cf73a3655682\", \"metric_id\": \"92c80134aef1c4a3ce0e06818df28d95\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 0.7071067811865476, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T08:00:00\", \"bucket_end\": \"2024-03-20T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 6052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 15828.561671664644, \"training_avg\": 3037.0, \"training_stddev\": 4263.853890554881, \"training_set_size\": 2.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 1.68 hours ago. Usually the table is updated within 0.84 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 13252.0, \"average\": 6442.0, \"min_value\": 0.0, \"max_value\": 26312.850510232318, \"start_time\": \"2024-03-20T10:00:00\", \"end_time\": \"2024-03-20T12:00:00\", \"id\": \"bca668dec0f7415690f68ff6beb90c8d\", \"metric_id\": \"a4f2f6173a226ddb2991246975d74641\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.0281391825417716, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T10:00:00\", \"bucket_end\": \"2024-03-20T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 13252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 26312.850510232318, \"training_avg\": 6442.0, \"training_stddev\": 6623.616836744106, \"training_set_size\": 3.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 3.68 hours ago. Usually the table is updated within 1.79 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 20452.0, \"average\": 9944.5, \"min_value\": 0.0, \"max_value\": 36493.77541384134, \"start_time\": \"2024-03-20T12:00:00\", \"end_time\": \"2024-03-20T14:00:00\", \"id\": \"c2e4e05f8dea6fd8fde8855b6a0a180f\", \"metric_id\": \"2471dd5c94e70da603bd91e84763ab55\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.1873205392101172, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T12:00:00\", \"bucket_end\": \"2024-03-20T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 20452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 36493.77541384134, \"training_avg\": 9944.5, \"training_stddev\": 8849.758471280446, \"training_set_size\": 4.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 5.68 hours ago. Usually the table is updated within 2.76 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 27652.0, \"average\": 13486.0, \"min_value\": 0.0, \"max_value\": 46547.27674485666, \"start_time\": \"2024-03-20T14:00:00\", \"end_time\": \"2024-03-20T16:00:00\", \"id\": \"98ea170137e92c6adc22b52503952df8\", \"metric_id\": \"5333c098b0f93693bae96bcb1dd6276a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.285431301639354, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T14:00:00\", \"bucket_end\": \"2024-03-20T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 27652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 46547.27674485666, \"training_avg\": 13486.0, \"training_stddev\": 11020.425581618887, \"training_set_size\": 5.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 7.68 hours ago. Usually the table is updated within 3.75 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 34852.0, \"average\": 17047.0, \"min_value\": 0.0, \"max_value\": 56533.673068264434, \"start_time\": \"2024-03-20T16:00:00\", \"end_time\": \"2024-03-20T18:00:00\", \"id\": \"b97bc2fcee1947e2a538d6c425f430cb\", \"metric_id\": \"57d66dbc74842ac20017b349b07f3c76\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.3527348811498077, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T16:00:00\", \"bucket_end\": \"2024-03-20T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 34852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 56533.673068264434, \"training_avg\": 17047.0, \"training_stddev\": 13162.224356088145, \"training_set_size\": 6.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 9.68 hours ago. Usually the table is updated within 4.74 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 42052.0, \"average\": 20619.14285714286, \"min_value\": 0.0, \"max_value\": 66480.06319554988, \"start_time\": \"2024-03-20T18:00:00\", \"end_time\": \"2024-03-20T20:00:00\", \"id\": \"1fd9392a50e27c88ad9fd2dc73068ef0\", \"metric_id\": \"99c89ce855be080a7ee7d87bf1f9d961\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4020340401830853, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T18:00:00\", \"bucket_end\": \"2024-03-20T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 42052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 66480.06319554988, \"training_avg\": 20619.14285714286, \"training_stddev\": 15286.973446135673, \"training_set_size\": 7.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 11.68 hours ago. Usually the table is updated within 5.73 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 49252.0, \"average\": 24198.25, \"min_value\": 0.0, \"max_value\": 76400.58723215849, \"start_time\": \"2024-03-20T20:00:00\", \"end_time\": \"2024-03-20T22:00:00\", \"id\": \"9f700b257cc9e174146503ebceb6e75b\", \"metric_id\": \"c710790acb367a3ba46d8895bdec9d7a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4398062229615651, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T20:00:00\", \"bucket_end\": \"2024-03-20T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 49252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 76400.58723215849, \"training_avg\": 24198.25, \"training_stddev\": 17400.779077386163, \"training_set_size\": 8.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 13.68 hours ago. Usually the table is updated within 6.72 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 56452.0, \"average\": 27782.0, \"min_value\": 0.0, \"max_value\": 86303.38839774737, \"start_time\": \"2024-03-20T22:00:00\", \"end_time\": \"2024-03-21T00:00:00\", \"id\": \"81fc3cd28581c7d896f8c820513404f7\", \"metric_id\": \"1bb274167422a35c60c12d0afebc06cf\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4697190609256074, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T22:00:00\", \"bucket_end\": \"2024-03-21T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 56452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 86303.38839774737, \"training_avg\": 27782.0, \"training_stddev\": 19507.12946591579, \"training_set_size\": 9.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 15.68 hours ago. Usually the table is updated within 7.72 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 63652.0, \"average\": 31369.0, \"min_value\": 0.0, \"max_value\": 96193.50161782966, \"start_time\": \"2024-03-21T00:00:00\", \"end_time\": \"2024-03-21T02:00:00\", \"id\": \"70944f337f310816ce853429e905f383\", \"metric_id\": \"1170b1e71a5f6a7d64b5f71e7082b83e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4940184279544413, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T00:00:00\", \"bucket_end\": \"2024-03-21T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 63652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 96193.50161782966, \"training_avg\": 31369.0, \"training_stddev\": 21608.16720594322, \"training_set_size\": 10.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 17.68 hours ago. Usually the table is updated within 8.71 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 70852.0, \"average\": 34958.36363636364, \"min_value\": 0.0, \"max_value\": 106074.21284799092, \"start_time\": \"2024-03-21T02:00:00\", \"end_time\": \"2024-03-21T04:00:00\", \"id\": \"7b27da3f8cbdeb3c50d3c32727028d16\", \"metric_id\": \"6d925fbc8aeb171c3195bbd47f3f5111\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.514161896182539, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T02:00:00\", \"bucket_end\": \"2024-03-21T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 70852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 106074.21284799092, \"training_avg\": 34958.36363636364, \"training_stddev\": 23705.283070542428, \"training_set_size\": 11.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 19.68 hours ago. Usually the table is updated within 9.71 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 78052.0, \"average\": 38549.5, \"min_value\": 0.0, \"max_value\": 115947.76015486395, \"start_time\": \"2024-03-21T04:00:00\", \"end_time\": \"2024-03-21T06:00:00\", \"id\": \"3f8da35430331f76b7f6bee1e7b25cc9\", \"metric_id\": \"2e85238cd6b769b21fa1184c6e693c57\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5311390690550635, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T04:00:00\", \"bucket_end\": \"2024-03-21T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 78052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 115947.76015486395, \"training_avg\": 38549.5, \"training_stddev\": 25799.420051621317, \"training_set_size\": 12.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 21.68 hours ago. Usually the table is updated within 10.71 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 85252.0, \"average\": 42142.0, \"min_value\": 0.0, \"max_value\": 125815.72168130206, \"start_time\": \"2024-03-21T06:00:00\", \"end_time\": \"2024-03-21T08:00:00\", \"id\": \"43dbcdd378cc6c52e3abf3c369c17fb7\", \"metric_id\": \"fe24db09c2c3a68c39b478e169fb6a9b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.545646559054638, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T06:00:00\", \"bucket_end\": \"2024-03-21T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 85252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 125815.72168130206, \"training_avg\": 42142.0, \"training_stddev\": 27891.240560434024, \"training_set_size\": 13.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 23.68 hours ago. Usually the table is updated within 11.71 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 92452.0, \"average\": 45735.57142857143, \"min_value\": 0.0, \"max_value\": 135679.2427297967, \"start_time\": \"2024-03-21T08:00:00\", \"end_time\": \"2024-03-21T10:00:00\", \"id\": \"2994a2e14b3f91a928bc137aaa80587a\", \"metric_id\": \"4310a99b461a4c312b545f030fb85ce9\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5581895166911703, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T08:00:00\", \"bucket_end\": \"2024-03-21T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 92452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 135679.2427297967, \"training_avg\": 45735.57142857143, \"training_stddev\": 29981.223767075095, \"training_set_size\": 14.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 25.68 hours ago. Usually the table is updated within 12.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 99652.0, \"average\": 49330.0, \"min_value\": 0.0, \"max_value\": 145539.17492630315, \"start_time\": \"2024-03-21T10:00:00\", \"end_time\": \"2024-03-21T12:00:00\", \"id\": \"68005be60d6893484dbc54c281f54811\", \"metric_id\": \"b087d7e5063f51b954ffa2532100ca8e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.569143484658723, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T10:00:00\", \"bucket_end\": \"2024-03-21T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 99652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 145539.17492630315, \"training_avg\": 49330.0, \"training_stddev\": 32069.724975434387, \"training_set_size\": 15.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 27.68 hours ago. Usually the table is updated within 13.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 106852.0, \"average\": 52925.125, \"min_value\": 0.0, \"max_value\": 155396.16484175235, \"start_time\": \"2024-03-21T12:00:00\", \"end_time\": \"2024-03-21T14:00:00\", \"id\": \"3ef5514a0f816721df6c4f5b5b1fc67c\", \"metric_id\": \"77c6707348aaa89688f59099c60c81e2\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5787936303744001, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T12:00:00\", \"bucket_end\": \"2024-03-21T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 106852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 155396.16484175235, \"training_avg\": 52925.125, \"training_stddev\": 34157.01328058412, \"training_set_size\": 16.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 29.68 hours ago. Usually the table is updated within 14.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 114052.0, \"average\": 56520.82352941176, \"min_value\": 0.0, \"max_value\": 165250.71229862142, \"start_time\": \"2024-03-21T14:00:00\", \"end_time\": \"2024-03-21T16:00:00\", \"id\": \"e69a763e092344db657676f70b854722\", \"metric_id\": \"524240210e0f9cd1e93c515b7b238623\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5873604890566215, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T14:00:00\", \"bucket_end\": \"2024-03-21T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 114052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 165250.71229862142, \"training_avg\": 56520.82352941176, \"training_stddev\": 36243.29625640322, \"training_set_size\": 17.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 31.68 hours ago. Usually the table is updated within 15.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 121252.0, \"average\": 60117.0, \"min_value\": 0.0, \"max_value\": 175103.20982535253, \"start_time\": \"2024-03-21T16:00:00\", \"end_time\": \"2024-03-21T18:00:00\", \"id\": \"c53e029dc5a20048582c7e554c5b919e\", \"metric_id\": \"8f6f32f91e3f1aba259abbd77201559d\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.595017352764003, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T16:00:00\", \"bucket_end\": \"2024-03-21T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 121252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 175103.20982535253, \"training_avg\": 60117.0, \"training_stddev\": 38328.73660845085, \"training_set_size\": 18.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 33.68 hours ago. Usually the table is updated within 16.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 128452.0, \"average\": 63713.57894736842, \"min_value\": 0.0, \"max_value\": 184953.9700153446, \"start_time\": \"2024-03-21T18:00:00\", \"end_time\": \"2024-03-21T20:00:00\", \"id\": \"e43711133e7aba7d5ceca99ec4eeb9c8\", \"metric_id\": \"697ebfdb4fbfaa179c21ee5187e4a236\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6019023152853704, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T18:00:00\", \"bucket_end\": \"2024-03-21T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 128452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 184953.9700153446, \"training_avg\": 63713.57894736842, \"training_stddev\": 40413.463689325385, \"training_set_size\": 19.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 35.68 hours ago. Usually the table is updated within 17.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 135652.0, \"average\": 67310.5, \"min_value\": 0.0, \"max_value\": 194803.24491123014, \"start_time\": \"2024-03-21T20:00:00\", \"end_time\": \"2024-03-21T22:00:00\", \"id\": \"f013e206a89917b8d2d086be5819bacb\", \"metric_id\": \"a40bf30350d6b0716c9b514505e2b2b0\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6081268008054355, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T20:00:00\", \"bucket_end\": \"2024-03-21T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 135652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 194803.24491123014, \"training_avg\": 67310.5, \"training_stddev\": 42497.58163707671, \"training_set_size\": 20.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 37.68 hours ago. Usually the table is updated within 18.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 142852.0, \"average\": 70907.71428571429, \"min_value\": 0.0, \"max_value\": 204651.24000351707, \"start_time\": \"2024-03-21T22:00:00\", \"end_time\": \"2024-03-22T00:00:00\", \"id\": \"70c6ff8b58d74c3525ad4e5cd14f19cb\", \"metric_id\": \"20dc16ba8d3252d62d6bf419350dbba6\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6137817212794423, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T22:00:00\", \"bucket_end\": \"2024-03-22T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 142852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 204651.24000351707, \"training_avg\": 70907.71428571429, \"training_stddev\": 44581.17523926759, \"training_set_size\": 21.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 39.68 hours ago. Usually the table is updated within 19.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 150052.0, \"average\": 74505.18181818182, \"min_value\": 0.0, \"max_value\": 214498.1245136815, \"start_time\": \"2024-03-22T00:00:00\", \"end_time\": \"2024-03-22T02:00:00\", \"id\": \"abc5c8f7f96add077abbb18053548cc6\", \"metric_id\": \"7efc401a86e1b883b59aa2dfc4cecc72\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6189419993722318, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T00:00:00\", \"bucket_end\": \"2024-03-22T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 150052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 214498.1245136815, \"training_avg\": 74505.18181818182, \"training_stddev\": 46664.314231833225, \"training_set_size\": 22.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 41.68 hours ago. Usually the table is updated within 20.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 157252.0, \"average\": 78102.86956521739, \"min_value\": 0.0, \"max_value\": 224344.0390645131, \"start_time\": \"2024-03-22T02:00:00\", \"end_time\": \"2024-03-22T04:00:00\", \"id\": \"7fc1a3e39165b51bb1d88795d46ae826\", \"metric_id\": \"44c00069c3b40ebffcea1af59aa607ad\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.623669942720824, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T02:00:00\", \"bucket_end\": \"2024-03-22T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 157252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 224344.0390645131, \"training_avg\": 78102.86956521739, \"training_stddev\": 48747.05649976524, \"training_set_size\": 23.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 43.68 hours ago. Usually the table is updated within 21.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 164452.0, \"average\": 81700.75, \"min_value\": 0.0, \"max_value\": 234189.10148135087, \"start_time\": \"2024-03-22T04:00:00\", \"end_time\": \"2024-03-22T06:00:00\", \"id\": \"fde216803a3602b9ca75c840bb53b277\", \"metric_id\": \"9f5c4e7632f726e7e11091c56c967a5b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.628017796692891, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T04:00:00\", \"bucket_end\": \"2024-03-22T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 164452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 234189.10148135087, \"training_avg\": 81700.75, \"training_stddev\": 50829.450493783625, \"training_set_size\": 24.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 45.68 hours ago. Usually the table is updated within 22.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 171652.0, \"average\": 85298.8, \"min_value\": 0.0, \"max_value\": 244033.41123523127, \"start_time\": \"2024-03-22T06:00:00\", \"end_time\": \"2024-03-22T08:00:00\", \"id\": \"c01b06ac5d9dd368de8b5694e08037d7\", \"metric_id\": \"8f52ab2c8c222faaf67729ece9fac07b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.63202970029073, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T06:00:00\", \"bucket_end\": \"2024-03-22T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 171652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 244033.41123523127, \"training_avg\": 85298.8, \"training_stddev\": 52911.537078410416, \"training_set_size\": 25.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 47.68 hours ago. Usually the table is updated within 23.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 178852.0, \"average\": 88897.0, \"min_value\": 0.0, \"max_value\": 253877.05288518974, \"start_time\": \"2024-03-22T08:00:00\", \"end_time\": \"2024-03-22T10:00:00\", \"id\": \"d184e9d681874f9721c41197ce7e4270\", \"metric_id\": \"7f79fb05f9e414118c04d38c6efcfb84\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6357432021663862, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T08:00:00\", \"bucket_end\": \"2024-03-22T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 178852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 253877.05288518974, \"training_avg\": 88897.0, \"training_stddev\": 54993.35096172991, \"training_set_size\": 26.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 49.68 hours ago. Usually the table is updated within 24.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 186052.0, \"average\": 92495.33333333333, \"min_value\": 0.0, \"max_value\": 263720.0987733829, \"start_time\": \"2024-03-22T10:00:00\", \"end_time\": \"2024-03-22T12:00:00\", \"id\": \"237120fbc090f17d9b461998f5c209aa\", \"metric_id\": \"354dfc9a47dd2816a7a18c88654b6b7c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6391904481730486, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T10:00:00\", \"bucket_end\": \"2024-03-22T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 186052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 263720.0987733829, \"training_avg\": 92495.33333333333, \"training_stddev\": 57074.921813349865, \"training_set_size\": 27.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 51.68 hours ago. Usually the table is updated within 25.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 193252.0, \"average\": 96093.78571428571, \"min_value\": 0.0, \"max_value\": 273562.6111557458, \"start_time\": \"2024-03-22T12:00:00\", \"end_time\": \"2024-03-22T14:00:00\", \"id\": \"22b7e1bc631e477f693e561cd37e4555\", \"metric_id\": \"ba9a2e51d49d5998a2a44d38ff68fe90\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6423991207024065, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T12:00:00\", \"bucket_end\": \"2024-03-22T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 193252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 273562.6111557458, \"training_avg\": 96093.78571428571, \"training_stddev\": 59156.275147153356, \"training_set_size\": 28.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 53.68 hours ago. Usually the table is updated within 26.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 200452.0, \"average\": 99692.3448275862, \"min_value\": 0.0, \"max_value\": 283404.6439015308, \"start_time\": \"2024-03-22T14:00:00\", \"end_time\": \"2024-03-22T16:00:00\", \"id\": \"c37d92e5baaac24ef151fd38478380f3\", \"metric_id\": \"66f650933d10472963830a48df820824\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6453931883764266, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T14:00:00\", \"bucket_end\": \"2024-03-22T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 200452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 283404.6439015308, \"training_avg\": 99692.3448275862, \"training_stddev\": 61237.43302464821, \"training_set_size\": 29.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 55.68 hours ago. Usually the table is updated within 27.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 207652.0, \"average\": 103291.0, \"min_value\": 0.0, \"max_value\": 293246.2438602315, \"start_time\": \"2024-03-22T16:00:00\", \"end_time\": \"2024-03-22T18:00:00\", \"id\": \"2f038dc53c5e312ec5ebda0f8e9b23c7\", \"metric_id\": \"1e1dd6a771c020b09cb20da10a22dc60\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.64819350936353, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T16:00:00\", \"bucket_end\": \"2024-03-22T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 207652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 293246.2438602315, \"training_avg\": 103291.0, \"training_stddev\": 63318.41462007715, \"training_set_size\": 30.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 57.68 hours ago. Usually the table is updated within 28.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 214852.0, \"average\": 106889.74193548386, \"min_value\": 0.0, \"max_value\": 303087.45196947135, \"start_time\": \"2024-03-22T18:00:00\", \"end_time\": \"2024-03-22T20:00:00\", \"id\": \"1d3c4bc56b1bf84c055660377f1eb2ed\", \"metric_id\": \"06470dbfd85ff3226e29897942ba0ff8\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6508183206493146, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T18:00:00\", \"bucket_end\": \"2024-03-22T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 214852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 303087.45196947135, \"training_avg\": 106889.74193548386, \"training_stddev\": 65399.23667799583, \"training_set_size\": 31.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 59.68 hours ago. Usually the table is updated within 29.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 222052.0, \"average\": 110488.5625, \"min_value\": 0.0, \"max_value\": 312928.3041594009, \"start_time\": \"2024-03-22T20:00:00\", \"end_time\": \"2024-03-22T22:00:00\", \"id\": \"44c13ef25e9dd44a4995b9129b2b5652\", \"metric_id\": \"bff93dba85899986157abb769ad88f11\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6532836376718305, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T20:00:00\", \"bucket_end\": \"2024-03-22T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 222052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 312928.3041594009, \"training_avg\": 110488.5625, \"training_stddev\": 67479.91388646698, \"training_set_size\": 32.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 61.68 hours ago. Usually the table is updated within 30.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 229252.0, \"average\": 114087.45454545454, \"min_value\": 0.0, \"max_value\": 322768.8320959289, \"start_time\": \"2024-03-22T22:00:00\", \"end_time\": \"2024-03-23T00:00:00\", \"id\": \"7500ea6be69820d371060633da3b8e14\", \"metric_id\": \"a3d8711a65e7a76f9498f7b33bfc9b6c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6556035829314515, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T22:00:00\", \"bucket_end\": \"2024-03-23T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 229252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 322768.8320959289, \"training_avg\": 114087.45454545454, \"training_stddev\": 69560.45918349146, \"training_set_size\": 33.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 63.68 hours ago. Usually the table is updated within 31.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 236452.0, \"average\": 117686.41176470589, \"min_value\": 0.0, \"max_value\": 332609.0637953431, \"start_time\": \"2024-03-23T00:00:00\", \"end_time\": \"2024-03-23T02:00:00\", \"id\": \"c5b263285f03b3d6e962ca91ae49b7ff\", \"metric_id\": \"f4dc94d59801a0135ccc8d6abb7be43d\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6577906578925534, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T00:00:00\", \"bucket_end\": \"2024-03-23T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 236452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 332609.0637953431, \"training_avg\": 117686.41176470589, \"training_stddev\": 71640.8840102124, \"training_set_size\": 34.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 65.68 hours ago. Usually the table is updated within 32.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 243652.0, \"average\": 121285.42857142857, \"min_value\": 0.0, \"max_value\": 342449.02413556556, \"start_time\": \"2024-03-23T02:00:00\", \"end_time\": \"2024-03-23T04:00:00\", \"id\": \"42e717350f5483566488c0d9336ff946\", \"metric_id\": \"e4b66fffe4ffdaf50df904429bd47aa9\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.659855969285217, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T02:00:00\", \"bucket_end\": \"2024-03-23T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 243652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 342449.02413556556, \"training_avg\": 121285.42857142857, \"training_stddev\": 73721.19852137899, \"training_set_size\": 35.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 67.68 hours ago. Usually the table is updated within 33.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 250852.0, \"average\": 124884.5, \"min_value\": 0.0, \"max_value\": 352288.7352837783, \"start_time\": \"2024-03-23T04:00:00\", \"end_time\": \"2024-03-23T06:00:00\", \"id\": \"99ccd9b35972e9326101b877794691d4\", \"metric_id\": \"91b4eaa8d3e75ac187dcf5cc273086e3\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6618094184939634, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T04:00:00\", \"bucket_end\": \"2024-03-23T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 250852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 352288.7352837783, \"training_avg\": 124884.5, \"training_stddev\": 75801.41176125943, \"training_set_size\": 36.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 69.68 hours ago. Usually the table is updated within 34.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 258052.0, \"average\": 128483.62162162163, \"min_value\": 0.0, \"max_value\": 362128.2170559601, \"start_time\": \"2024-03-23T06:00:00\", \"end_time\": \"2024-03-23T08:00:00\", \"id\": \"ae5dd46d3f26df71db802bb195d1ddd9\", \"metric_id\": \"d5e95764b66b09a0b732f32395f8d844\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6636598608777735, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T06:00:00\", \"bucket_end\": \"2024-03-23T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 258052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 362128.2170559601, \"training_avg\": 128483.62162162163, \"training_stddev\": 77881.53181144614, \"training_set_size\": 37.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 71.68 hours ago. Usually the table is updated within 35.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 265252.0, \"average\": 132082.7894736842, \"min_value\": 0.0, \"max_value\": 371967.4872206599, \"start_time\": \"2024-03-23T08:00:00\", \"end_time\": \"2024-03-23T10:00:00\", \"id\": \"b084d6eeec9064a756e2a86182ea7e7d\", \"metric_id\": \"ad361a6e9d83ef3482637c946c961c0c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6654152404516354, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T08:00:00\", \"bucket_end\": \"2024-03-23T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 265252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 371967.4872206599, \"training_avg\": 132082.7894736842, \"training_stddev\": 79961.56591565856, \"training_set_size\": 38.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 73.68 hours ago. Usually the table is updated within 36.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 272452.0, \"average\": 135682.0, \"min_value\": 0.0, \"max_value\": 381806.561756847, \"start_time\": \"2024-03-23T10:00:00\", \"end_time\": \"2024-03-23T12:00:00\", \"id\": \"fa06dc44590688169503457d0cf032c5\", \"metric_id\": \"fd76f291b832cee256c2554ade05769e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6670827042664524, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T10:00:00\", \"bucket_end\": \"2024-03-23T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 272452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 381806.561756847, \"training_avg\": 135682.0, \"training_stddev\": 82041.52058561567, \"training_set_size\": 39.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 75.68 hours ago. Usually the table is updated within 37.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 279652.0, \"average\": 139281.25, \"min_value\": 0.0, \"max_value\": 391645.45507373865, \"start_time\": \"2024-03-23T12:00:00\", \"end_time\": \"2024-03-23T14:00:00\", \"id\": \"d666c6ed99cb71f9e3f51ab66b8ea632\", \"metric_id\": \"a8ee5a49a5d73c0dda2fe2360f7da845\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6686686999725442, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T12:00:00\", \"bucket_end\": \"2024-03-23T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 279652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 391645.45507373865, \"training_avg\": 139281.25, \"training_stddev\": 84121.40169124621, \"training_set_size\": 40.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 77.68 hours ago. Usually the table is updated within 38.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 286852.0, \"average\": 142880.53658536586, \"min_value\": 0.0, \"max_value\": 401484.18019899307, \"start_time\": \"2024-03-23T14:00:00\", \"end_time\": \"2024-03-23T16:00:00\", \"id\": \"415096f5fe07a848e29b129157651944\", \"metric_id\": \"5bd3d55e49b2d7b38406ff654507a277\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.670179059384075, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T14:00:00\", \"bucket_end\": \"2024-03-23T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 286852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 401484.18019899307, \"training_avg\": 142880.53658536586, \"training_stddev\": 86201.21453787573, \"training_set_size\": 41.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 79.68 hours ago. Usually the table is updated within 39.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 294052.0, \"average\": 146479.85714285713, \"min_value\": 0.0, \"max_value\": 411322.74894045526, \"start_time\": \"2024-03-23T16:00:00\", \"end_time\": \"2024-03-23T18:00:00\", \"id\": \"6fd352d807947c4066039209142c9f5d\", \"metric_id\": \"d5bef06154f34663b96eb38be760ce85\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.671619070334602, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T16:00:00\", \"bucket_end\": \"2024-03-23T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 294052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 411322.74894045526, \"training_avg\": 146479.85714285713, \"training_stddev\": 88280.96393253272, \"training_set_size\": 42.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 81.68 hours ago. Usually the table is updated within 40.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 301252.0, \"average\": 150079.2093023256, \"min_value\": 0.0, \"max_value\": 421161.1720256937, \"start_time\": \"2024-03-23T18:00:00\", \"end_time\": \"2024-03-23T20:00:00\", \"id\": \"9617f70138560bc68a80bdbc1280db6a\", \"metric_id\": \"75a02e4b1115879fc3e4575f83bc794f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6729935386952568, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T18:00:00\", \"bucket_end\": \"2024-03-23T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 301252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 421161.1720256937, \"training_avg\": 150079.2093023256, \"training_stddev\": 90360.65424112268, \"training_set_size\": 43.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 83.68 hours ago. Usually the table is updated within 41.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 308452.0, \"average\": 153678.5909090909, \"min_value\": 0.0, \"max_value\": 430999.4592228057, \"start_time\": \"2024-03-23T20:00:00\", \"end_time\": \"2024-03-23T22:00:00\", \"id\": \"e5c86a87bad670e48210df54a029716c\", \"metric_id\": \"b4b7c5811176c58134ec3dde5dd12422\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6743068420926495, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T20:00:00\", \"bucket_end\": \"2024-03-23T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 308452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 430999.4592228057, \"training_avg\": 153678.5909090909, \"training_stddev\": 92440.28943790492, \"training_set_size\": 44.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 85.68 hours ago. Usually the table is updated within 42.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 315652.0, \"average\": 157278.0, \"min_value\": 0.0, \"max_value\": 440837.61944536463, \"start_time\": \"2024-03-23T22:00:00\", \"end_time\": \"2024-03-24T00:00:00\", \"id\": \"684589c54eaf52220c853fd7e397292f\", \"metric_id\": \"22c190e4f3fcde254c10b98e59453277\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6755629765949274, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T22:00:00\", \"bucket_end\": \"2024-03-24T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 315652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 440837.61944536463, \"training_avg\": 157278.0, \"training_stddev\": 94519.87314845488, \"training_set_size\": 45.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 87.68 hours ago. Usually the table is updated within 43.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 322852.0, \"average\": 160877.4347826087, \"min_value\": 0.0, \"max_value\": 450675.660843882, \"start_time\": \"2024-03-24T00:00:00\", \"end_time\": \"2024-03-24T02:00:00\", \"id\": \"974f5e67f5c00bf4c0943e51199c4f3d\", \"metric_id\": \"238095b788fae35a8d7ac7acf8ddea43\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6767655974175388, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T00:00:00\", \"bucket_end\": \"2024-03-24T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 322852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 450675.660843882, \"training_avg\": 160877.4347826087, \"training_stddev\": 96599.4086870911, \"training_set_size\": 46.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 89.68 hours ago. Usually the table is updated within 44.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 330052.0, \"average\": 164476.89361702127, \"min_value\": 0.0, \"max_value\": 460513.5908857674, \"start_time\": \"2024-03-24T02:00:00\", \"end_time\": \"2024-03-24T04:00:00\", \"id\": \"483e924820111ef98907d24ba8af826e\", \"metric_id\": \"48f572a6903aa470eba9e861fd775c6c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6779180545241734, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T02:00:00\", \"bucket_end\": \"2024-03-24T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 330052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 460513.5908857674, \"training_avg\": 164476.89361702127, \"training_stddev\": 98678.89908958205, \"training_set_size\": 47.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 91.68 hours ago. Usually the table is updated within 45.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 337252.0, \"average\": 168076.375, \"min_value\": 0.0, \"max_value\": 470351.41642543755, \"start_time\": \"2024-03-24T04:00:00\", \"end_time\": \"2024-03-24T06:00:00\", \"id\": \"f4f2aa39bd2cf007b5ee6f1af4e7703c\", \"metric_id\": \"bd0005fe8afafa97d44172062f84bb20\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.679023423854834, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T04:00:00\", \"bucket_end\": \"2024-03-24T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 337252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 470351.41642543755, \"training_avg\": 168076.375, \"training_stddev\": 100758.34714181253, \"training_set_size\": 48.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 93.68 hours ago. Usually the table is updated within 46.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 344452.0, \"average\": 171675.8775510204, \"min_value\": 0.0, \"max_value\": 480189.1437659634, \"start_time\": \"2024-03-24T06:00:00\", \"end_time\": \"2024-03-24T08:00:00\", \"id\": \"bea48e0851f2b94e2a337354ef6aa873\", \"metric_id\": \"effe43904ba7377627f1fa4466947a3f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.68008453479539, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T06:00:00\", \"bucket_end\": \"2024-03-24T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 344452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 480189.1437659634, \"training_avg\": 171675.8775510204, \"training_stddev\": 102837.75540498098, \"training_set_size\": 49.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 95.68 hours ago. Usually the table is updated within 47.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 351652.0, \"average\": 175275.4, \"min_value\": 0.0, \"max_value\": 490026.778713422, \"start_time\": \"2024-03-24T08:00:00\", \"end_time\": \"2024-03-24T10:00:00\", \"id\": \"0bf9743ecd82bc99fddacd2893eba9e8\", \"metric_id\": \"d0f15b785c90a092f0072b343bc51839\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6811039944062243, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T08:00:00\", \"bucket_end\": \"2024-03-24T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 351652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 490026.778713422, \"training_avg\": 175275.4, \"training_stddev\": 104917.12623780734, \"training_set_size\": 50.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 97.68 hours ago. Usually the table is updated within 48.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 358852.0, \"average\": 178874.9411764706, \"min_value\": 0.0, \"max_value\": 499864.3266249434, \"start_time\": \"2024-03-24T10:00:00\", \"end_time\": \"2024-03-24T12:00:00\", \"id\": \"0623beb8519c9cea493cf43ec49fe367\", \"metric_id\": \"d5e2deaeaa08ab90f37cbfae9add54a2\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6820842088476513, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T10:00:00\", \"bucket_end\": \"2024-03-24T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 358852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 499864.3266249434, \"training_avg\": 178874.9411764706, \"training_stddev\": 106996.4618161576, \"training_set_size\": 51.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 99.68 hours ago. Usually the table is updated within 49.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 366052.0, \"average\": 182474.5, \"min_value\": 0.0, \"max_value\": 509701.79245128686, \"start_time\": \"2024-03-24T12:00:00\", \"end_time\": \"2024-03-24T14:00:00\", \"id\": \"4276df7250a4eea51e28330e5328e43d\", \"metric_id\": \"f813c134058f2e11bf89d6d9e4d7c240\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.683027402373491, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T12:00:00\", \"bucket_end\": \"2024-03-24T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 366052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 509701.79245128686, \"training_avg\": 182474.5, \"training_stddev\": 109075.76415042895, \"training_set_size\": 52.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 101.68 hours ago. Usually the table is updated within 50.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 373252.0, \"average\": 186074.0754716981, \"min_value\": 0.0, \"max_value\": 519539.1807746623, \"start_time\": \"2024-03-24T14:00:00\", \"end_time\": \"2024-03-24T16:00:00\", \"id\": \"99463778a850e5c8b62968ebb39673c4\", \"metric_id\": \"5ae0ff5df53f08a7b2ff3f7a8eed5d53\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.683935634208963, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T14:00:00\", \"bucket_end\": \"2024-03-24T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 373252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 519539.1807746623, \"training_avg\": 186074.0754716981, \"training_stddev\": 111155.03510098807, \"training_set_size\": 53.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 103.68 hours ago. Usually the table is updated within 51.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 380452.0, \"average\": 189673.66666666666, \"min_value\": 0.0, \"max_value\": 529376.4958424037, \"start_time\": \"2024-03-24T16:00:00\", \"end_time\": \"2024-03-24T18:00:00\", \"id\": \"41711be65901e37ed88a8269777cc5ea\", \"metric_id\": \"e3cbb5289307db4faed1c1c63d211518\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6848108135829398, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T16:00:00\", \"bucket_end\": \"2024-03-24T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 380452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 529376.4958424037, \"training_avg\": 189673.66666666666, \"training_stddev\": 113234.27639191237, \"training_set_size\": 54.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 105.68 hours ago. Usually the table is updated within 52.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 387652.0, \"average\": 193273.27272727274, \"min_value\": 0.0, \"max_value\": 539213.7415970166, \"start_time\": \"2024-03-24T18:00:00\", \"end_time\": \"2024-03-24T20:00:00\", \"id\": \"4fecaf52e8b75e88b3c52b718030b9f6\", \"metric_id\": \"17c8edbe6793280062b83b1c35dd37a8\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6856547131458874, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T18:00:00\", \"bucket_end\": \"2024-03-24T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 387652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 539213.7415970166, \"training_avg\": 193273.27272727274, \"training_stddev\": 115313.48962324794, \"training_set_size\": 55.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 107.68 hours ago. Usually the table is updated within 53.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 394852.0, \"average\": 196872.89285714287, \"min_value\": 0.0, \"max_value\": 549050.921703046, \"start_time\": \"2024-03-24T20:00:00\", \"end_time\": \"2024-03-24T22:00:00\", \"id\": \"efad80889bfd225da377575b3600a3ed\", \"metric_id\": \"1e331e90cb3fcdda46d67eebb0e0cf8d\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.686468980972266, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T20:00:00\", \"bucket_end\": \"2024-03-24T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 394852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 549050.921703046, \"training_avg\": 196872.89285714287, \"training_stddev\": 117392.67628196768, \"training_set_size\": 56.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 109.68 hours ago. Usually the table is updated within 54.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 402052.0, \"average\": 200472.52631578947, \"min_value\": 0.0, \"max_value\": 558888.0395711524, \"start_time\": \"2024-03-24T22:00:00\", \"end_time\": \"2024-03-25T00:00:00\", \"id\": \"2762fc5caeaa564f941271aa1aac365d\", \"metric_id\": \"e45cd252f3ad48bc597eb94ae5d598a1\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.687255151318657, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T22:00:00\", \"bucket_end\": \"2024-03-25T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 402052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 558888.0395711524, \"training_avg\": 200472.52631578947, \"training_stddev\": 119471.83775178765, \"training_set_size\": 57.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 111.68 hours ago. Usually the table is updated within 55.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 409252.0, \"average\": 204072.1724137931, \"min_value\": 0.0, \"max_value\": 568725.0983797275, \"start_time\": \"2024-03-25T00:00:00\", \"end_time\": \"2024-03-25T02:00:00\", \"id\": \"977e32741e6566557e87a6e19e9917be\", \"metric_id\": \"8a2a9aa4374fa581fd31ea5cf231a402\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6880146542856038, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T00:00:00\", \"bucket_end\": \"2024-03-25T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 409252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 568725.0983797275, \"training_avg\": 204072.1724137931, \"training_stddev\": 121550.97532197814, \"training_set_size\": 58.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 113.68 hours ago. Usually the table is updated within 56.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 416452.0, \"average\": 207671.83050847458, \"min_value\": 0.0, \"max_value\": 578562.101094337, \"start_time\": \"2024-03-25T02:00:00\", \"end_time\": \"2024-03-25T04:00:00\", \"id\": \"3a3ef4abd6c12b4290b37ccd1922620b\", \"metric_id\": \"a6e601317f82e792d18b7d828ae93f36\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6887488245113624, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T02:00:00\", \"bucket_end\": \"2024-03-25T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 416452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 578562.101094337, \"training_avg\": 207671.83050847458, \"training_stddev\": 123630.09019528747, \"training_set_size\": 59.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 115.68 hours ago. Usually the table is updated within 57.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 423652.0, \"average\": 211271.5, \"min_value\": 0.0, \"max_value\": 588399.0504852437, \"start_time\": \"2024-03-25T04:00:00\", \"end_time\": \"2024-03-25T06:00:00\", \"id\": \"e8d8d13e6d17950d05c7992856ef097d\", \"metric_id\": \"e18cb74e8c9bc10432e43521b324b709\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6894589090089036, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T04:00:00\", \"bucket_end\": \"2024-03-25T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 423652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 588399.0504852437, \"training_avg\": 211271.5, \"training_stddev\": 125709.18349508122, \"training_set_size\": 60.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 117.68 hours ago. Usually the table is updated within 58.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 430852.0, \"average\": 214871.18032786885, \"min_value\": 0.0, \"max_value\": 598235.9491432263, \"start_time\": \"2024-03-25T06:00:00\", \"end_time\": \"2024-03-25T08:00:00\", \"id\": \"6fc098b7ef769907a5d369c8f9d3e270\", \"metric_id\": \"9b3867ead5dc6c86732be231da3e4bc9\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6901460742431091, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T06:00:00\", \"bucket_end\": \"2024-03-25T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 430852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 598235.9491432263, \"training_avg\": 214871.18032786885, \"training_stddev\": 127788.25627178581, \"training_set_size\": 61.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 119.68 hours ago. Usually the table is updated within 59.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 438052.0, \"average\": 218470.87096774194, \"min_value\": 0.0, \"max_value\": 608072.7994938856, \"start_time\": \"2024-03-25T08:00:00\", \"end_time\": \"2024-03-25T10:00:00\", \"id\": \"fccc5cbde66a1019bb5cb6afaf5d1fae\", \"metric_id\": \"80e33f0fc8719b4c33b9c596573697d7\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6908114125327547, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T08:00:00\", \"bucket_end\": \"2024-03-25T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 438052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 608072.7994938856, \"training_avg\": 218470.87096774194, \"training_stddev\": 129867.30950871453, \"training_set_size\": 62.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 121.68 hours ago. Usually the table is updated within 60.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 445252.0, \"average\": 222070.57142857142, \"min_value\": 0.0, \"max_value\": 617909.6038106028, \"start_time\": \"2024-03-25T10:00:00\", \"end_time\": \"2024-03-25T12:00:00\", \"id\": \"e0ccba2de022f9efe007c980fc7cfb72\", \"metric_id\": \"3962bd9c0a1e10911ad9c09b62daeb38\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6914559478512887, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T10:00:00\", \"bucket_end\": \"2024-03-25T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 445252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 617909.6038106028, \"training_avg\": 222070.57142857142, \"training_stddev\": 131946.34412734376, \"training_set_size\": 63.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 123.68 hours ago. Usually the table is updated within 61.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 452452.0, \"average\": 225670.28125, \"min_value\": 0.0, \"max_value\": 627746.3642262976, \"start_time\": \"2024-03-25T12:00:00\", \"end_time\": \"2024-03-25T14:00:00\", \"id\": \"2ace1cb90b59e484b0f7077522ff694f\", \"metric_id\": \"5d7fe3cdc6bf944daecc847df5520c73\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6920806410912694, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T12:00:00\", \"bucket_end\": \"2024-03-25T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 452452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 627746.3642262976, \"training_avg\": 225670.28125, \"training_stddev\": 134025.3609920992, \"training_set_size\": 64.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 125.68 hours ago. Usually the table is updated within 62.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 459652.0, \"average\": 229270.0, \"min_value\": 0.0, \"max_value\": 637583.082744112, \"start_time\": \"2024-03-25T14:00:00\", \"end_time\": \"2024-03-25T16:00:00\", \"id\": \"a0393489200ee0c836613e3a0a95f146\", \"metric_id\": \"b7d6b08f1e1661c4c88e71d1fd378589\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6926863948494597, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T14:00:00\", \"bucket_end\": \"2024-03-25T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 459652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 637583.082744112, \"training_avg\": 229270.0, \"training_stddev\": 136104.36091470398, \"training_set_size\": 65.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 127.68 hours ago. Usually the table is updated within 63.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 466852.0, \"average\": 232869.72727272726, \"min_value\": 0.0, \"max_value\": 647419.7612471341, \"start_time\": \"2024-03-25T16:00:00\", \"end_time\": \"2024-03-25T18:00:00\", \"id\": \"0f3ed34617749f1b79f063288a943f02\", \"metric_id\": \"e526279d87d1e79271a220305fa95899\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6932740577827443, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T16:00:00\", \"bucket_end\": \"2024-03-25T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 466852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 647419.7612471341, \"training_avg\": 232869.72727272726, \"training_stddev\": 138183.34465813558, \"training_set_size\": 66.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 129.68 hours ago. Usually the table is updated within 64.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 474052.0, \"average\": 236469.46268656716, \"min_value\": 0.0, \"max_value\": 657256.40150726, \"start_time\": \"2024-03-25T18:00:00\", \"end_time\": \"2024-03-25T20:00:00\", \"id\": \"6a57811e8ec9a4920e7eee338d503c8c\", \"metric_id\": \"13d11562e6fa59526b0e8eba7eff1965\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6938444285791314, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T18:00:00\", \"bucket_end\": \"2024-03-25T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 474052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 657256.40150726, \"training_avg\": 236469.46268656716, \"training_stddev\": 140262.31294023097, \"training_set_size\": 67.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 131.68 hours ago. Usually the table is updated within 65.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 481252.0, \"average\": 240069.20588235295, \"min_value\": 0.0, \"max_value\": 667093.0051932826, \"start_time\": \"2024-03-25T20:00:00\", \"end_time\": \"2024-03-25T22:00:00\", \"id\": \"ec92edb1f28a60df57e409c88141c69f\", \"metric_id\": \"5a0bf2cd2e1ae758677b6532a14e1089\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6943982595829568, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T20:00:00\", \"bucket_end\": \"2024-03-25T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 481252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 667093.0051932826, \"training_avg\": 240069.20588235295, \"training_stddev\": 142341.26643697658, \"training_set_size\": 68.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 133.68 hours ago. Usually the table is updated within 66.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 488452.0, \"average\": 243668.95652173914, \"min_value\": 0.0, \"max_value\": 676929.5738782835, \"start_time\": \"2024-03-25T22:00:00\", \"end_time\": \"2024-03-26T00:00:00\", \"id\": \"40c229d73c1dd10fe54f8e5e0b2beab8\", \"metric_id\": \"5d835a0565c6e468abab79bc2303757f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6949362601089188, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T22:00:00\", \"bucket_end\": \"2024-03-26T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 488452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 676929.5738782835, \"training_avg\": 243668.95652173914, \"training_stddev\": 144420.2057855148, \"training_set_size\": 69.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 135.68 hours ago. Usually the table is updated within 67.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 495652.0, \"average\": 247268.7142857143, \"min_value\": 0.0, \"max_value\": 686766.1090463983, \"start_time\": \"2024-03-26T00:00:00\", \"end_time\": \"2024-03-26T02:00:00\", \"id\": \"f32d6915eadd10851e07202b5ab4e462\", \"metric_id\": \"a89cc055451440cf81172628546ed582\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6954590994756806, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T00:00:00\", \"bucket_end\": \"2024-03-26T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 495652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 686766.1090463983, \"training_avg\": 247268.7142857143, \"training_stddev\": 146499.13158689468, \"training_set_size\": 70.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 137.68 hours ago. Usually the table is updated within 68.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 502852.0, \"average\": 250868.47887323942, \"min_value\": 0.0, \"max_value\": 696602.612099017, \"start_time\": \"2024-03-26T02:00:00\", \"end_time\": \"2024-03-26T04:00:00\", \"id\": \"eb3f663b34040ca7174cea10f986bc45\", \"metric_id\": \"b22ae41242fc26c491d3556badbb5f2b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6959674097863409, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T02:00:00\", \"bucket_end\": \"2024-03-26T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 502852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 696602.612099017, \"training_avg\": 250868.47887323942, \"training_stddev\": 148578.0444085925, \"training_set_size\": 71.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 139.68 hours ago. Usually the table is updated within 69.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 510052.0, \"average\": 254468.25, \"min_value\": 0.0, \"max_value\": 706439.0843604706, \"start_time\": \"2024-03-26T04:00:00\", \"end_time\": \"2024-03-26T06:00:00\", \"id\": \"cd0dce61e53c98babf82fc40046c8479\", \"metric_id\": \"b2dad3af13077616ef4e9a4af23f8be3\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6964617884800843, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T04:00:00\", \"bucket_end\": \"2024-03-26T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 510052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 706439.0843604706, \"training_avg\": 254468.25, \"training_stddev\": 150656.94478682356, \"training_set_size\": 72.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 141.68 hours ago. Usually the table is updated within 70.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 517252.0, \"average\": 258068.02739726027, \"min_value\": 0.0, \"max_value\": 716275.5270832576, \"start_time\": \"2024-03-26T06:00:00\", \"end_time\": \"2024-03-26T08:00:00\", \"id\": \"9cec9658adea37457c7765d5057ee16a\", \"metric_id\": \"c6185a84b9ce2bbf06c186f7a1088fc1\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6969428006766887, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T06:00:00\", \"bucket_end\": \"2024-03-26T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 517252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 716275.5270832576, \"training_avg\": 258068.02739726027, \"training_stddev\": 152735.83322866575, \"training_set_size\": 73.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 143.68 hours ago. Usually the table is updated within 71.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 524452.0, \"average\": 261667.8108108108, \"min_value\": 0.0, \"max_value\": 726111.9414528483, \"start_time\": \"2024-03-26T08:00:00\", \"end_time\": \"2024-03-26T10:00:00\", \"id\": \"902ccdc637eddddb8675d7e5d8b13115\", \"metric_id\": \"9c7d3b7bfe1d293669c4fa5da6019e49\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6974109813332474, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T08:00:00\", \"bucket_end\": \"2024-03-26T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 524452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 726111.9414528483, \"training_avg\": 261667.8108108108, \"training_stddev\": 154814.71021401248, \"training_set_size\": 74.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 145.68 hours ago. Usually the table is updated within 72.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 531652.0, \"average\": 265267.6, \"min_value\": 0.0, \"max_value\": 735948.3285921105, \"start_time\": \"2024-03-26T10:00:00\", \"end_time\": \"2024-03-26T12:00:00\", \"id\": \"da658c1caa66a3c1779514a42b28a1e1\", \"metric_id\": \"8675adccba2533f1710e62a8bf11b05a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6978668372304275, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T10:00:00\", \"bucket_end\": \"2024-03-26T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 531652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 735948.3285921105, \"training_avg\": 265267.6, \"training_stddev\": 156893.5761973702, \"training_set_size\": 75.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 147.68 hours ago. Usually the table is updated within 73.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 538852.0, \"average\": 268867.3947368421, \"min_value\": 0.0, \"max_value\": 745784.689565389, \"start_time\": \"2024-03-26T12:00:00\", \"end_time\": \"2024-03-26T14:00:00\", \"id\": \"3ab1d29f982c045d13c8421aef2ea538\", \"metric_id\": \"72a3eaa676401e11581ceaf05516c383\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.698310848803784, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T12:00:00\", \"bucket_end\": \"2024-03-26T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 538852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 745784.689565389, \"training_avg\": 268867.3947368421, \"training_stddev\": 158972.4316095156, \"training_set_size\": 76.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 149.68 hours ago. Usually the table is updated within 74.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 546052.0, \"average\": 272467.1948051948, \"min_value\": 0.0, \"max_value\": 755621.0253822675, \"start_time\": \"2024-03-26T14:00:00\", \"end_time\": \"2024-03-26T16:00:00\", \"id\": \"c6ab571a0b9f2a96a0aeb4ebb9e0f7e3\", \"metric_id\": \"77fe859ddcff40fd4416a2ceff33fe1d\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6987434718340468, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T14:00:00\", \"bucket_end\": \"2024-03-26T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 546052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 755621.0253822675, \"training_avg\": 272467.1948051948, \"training_stddev\": 161051.27685902428, \"training_set_size\": 77.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 151.68 hours ago. Usually the table is updated within 75.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 553252.0, \"average\": 276067.0, \"min_value\": 0.0, \"max_value\": 765457.3370010487, \"start_time\": \"2024-03-26T16:00:00\", \"end_time\": \"2024-03-26T18:00:00\", \"id\": \"1d6099b05f16818d8af35ca4a469c9ca\", \"metric_id\": \"f1c8f6917098042bc8c898e89904fcf7\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.699165139008901, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T16:00:00\", \"bucket_end\": \"2024-03-26T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 553252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 765457.3370010487, \"training_avg\": 276067.0, \"training_stddev\": 163130.11233368292, \"training_set_size\": 78.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 153.68 hours ago. Usually the table is updated within 76.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 560452.0, \"average\": 279666.8101265823, \"min_value\": 0.0, \"max_value\": 775293.6253319674, \"start_time\": \"2024-03-26T18:00:00\", \"end_time\": \"2024-03-26T20:00:00\", \"id\": \"a3e69622e4543bda9fc9f8d532778ea5\", \"metric_id\": \"dc53aa5d5b27f670c0f755eb58347601\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.699576261367508, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T18:00:00\", \"bucket_end\": \"2024-03-26T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 560452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 775293.6253319674, \"training_avg\": 279666.8101265823, \"training_stddev\": 165208.93840179502, \"training_set_size\": 79.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 155.68 hours ago. Usually the table is updated within 77.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 567652.0, \"average\": 283266.625, \"min_value\": 0.0, \"max_value\": 785129.8912401684, \"start_time\": \"2024-03-26T20:00:00\", \"end_time\": \"2024-03-26T22:00:00\", \"id\": \"3f688b4b0f5048cc50ca3f8f586ac1d8\", \"metric_id\": \"974ec20f168499bf018c8886b6bcd31e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6999772296379216, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T20:00:00\", \"bucket_end\": \"2024-03-26T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 567652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 785129.8912401684, \"training_avg\": 283266.625, \"training_stddev\": 167287.75541338944, \"training_set_size\": 80.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 157.68 hours ago. Usually the table is updated within 78.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 574852.0, \"average\": 286866.44444444444, \"min_value\": 0.0, \"max_value\": 794966.135548464, \"start_time\": \"2024-03-26T22:00:00\", \"end_time\": \"2024-03-27T00:00:00\", \"id\": \"276513355b77c3ce0f16f20eec3f5560\", \"metric_id\": \"88e0c06fbc30fb81e2a8fd8b708e569b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7003684154765508, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T22:00:00\", \"bucket_end\": \"2024-03-27T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 574852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 794966.135548464, \"training_avg\": 286866.44444444444, \"training_stddev\": 169366.56370133985, \"training_set_size\": 81.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 159.68 hours ago. Usually the table is updated within 79.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 582052.0, \"average\": 290466.26829268294, \"min_value\": 0.0, \"max_value\": 804802.3590398927, \"start_time\": \"2024-03-27T00:00:00\", \"end_time\": \"2024-03-27T02:00:00\", \"id\": \"db44574173c3fd48739f6f57521699af\", \"metric_id\": \"8223e1a3e544dada7ce4d59427e2aabf\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7007501726179355, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T00:00:00\", \"bucket_end\": \"2024-03-27T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 582052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 804802.3590398927, \"training_avg\": 290466.26829268294, \"training_stddev\": 171445.36358240325, \"training_set_size\": 82.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 161.68 hours ago. Usually the table is updated within 80.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 589252.0, \"average\": 294066.0963855422, \"min_value\": 0.0, \"max_value\": 814638.5624600934, \"start_time\": \"2024-03-27T02:00:00\", \"end_time\": \"2024-03-27T04:00:00\", \"id\": \"813d76656f087d10a8cff3be474b4008\", \"metric_id\": \"a45bca4667514044840c41fdcb6b0ec0\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7011228379423213, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T02:00:00\", \"bucket_end\": \"2024-03-27T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 589252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 814638.5624600934, \"training_avg\": 294066.0963855422, \"training_stddev\": 173524.15535818375, \"training_set_size\": 83.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 163.68 hours ago. Usually the table is updated within 81.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 596452.0, \"average\": 297665.9285714286, \"min_value\": 0.0, \"max_value\": 824474.7465195123, \"start_time\": \"2024-03-27T04:00:00\", \"end_time\": \"2024-03-27T06:00:00\", \"id\": \"8ae166c53addc17d5d28bb83c9a7a090\", \"metric_id\": \"21479547046039f305e59167b0ddfc37\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7014867324678098, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T04:00:00\", \"bucket_end\": \"2024-03-27T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 596452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 824474.7465195123, \"training_avg\": 297665.9285714286, \"training_stddev\": 175602.9393160279, \"training_set_size\": 84.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 165.68 hours ago. Usually the table is updated within 82.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 603652.0, \"average\": 301265.76470588235, \"min_value\": 0.0, \"max_value\": 834310.9118954549, \"start_time\": \"2024-03-27T06:00:00\", \"end_time\": \"2024-03-27T08:00:00\", \"id\": \"4d5d2c9c3fc861f8f61a201ffbcd8c6a\", \"metric_id\": \"7a7e0336c561ff423b05ee69670cdfca\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7018421622732276, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T06:00:00\", \"bucket_end\": \"2024-03-27T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 603652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 834310.9118954549, \"training_avg\": 301265.76470588235, \"training_stddev\": 177681.7157298575, \"training_set_size\": 85.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 167.68 hours ago. Usually the table is updated within 83.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 610852.0, \"average\": 304865.6046511628, \"min_value\": 0.0, \"max_value\": 844147.0592339963, \"start_time\": \"2024-03-27T08:00:00\", \"end_time\": \"2024-03-27T10:00:00\", \"id\": \"df6fedae8601d93f8bbe537fe9c0de02\", \"metric_id\": \"5f980af328caa06e70b45b2f2a77ac76\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7021894193572962, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T08:00:00\", \"bucket_end\": \"2024-03-27T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 610852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 844147.0592339963, \"training_avg\": 304865.6046511628, \"training_stddev\": 179760.48486094453, \"training_set_size\": 86.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 169.68 hours ago. Usually the table is updated within 84.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 618052.0, \"average\": 308465.4482758621, \"min_value\": 0.0, \"max_value\": 853983.1891517614, \"start_time\": \"2024-03-27T10:00:00\", \"end_time\": \"2024-03-27T12:00:00\", \"id\": \"cccd4949efb0a6d5cb668f271d18e967\", \"metric_id\": \"4eb36f31851e32a02f3d710fc3f98732\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7025287824391742, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T10:00:00\", \"bucket_end\": \"2024-03-27T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 618052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 853983.1891517614, \"training_avg\": 308465.4482758621, \"training_stddev\": 181839.2469586331, \"training_set_size\": 87.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 171.68 hours ago. Usually the table is updated within 85.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 625252.0, \"average\": 312065.29545454547, \"min_value\": 0.0, \"max_value\": 863819.3022375831, \"start_time\": \"2024-03-27T12:00:00\", \"end_time\": \"2024-03-27T14:00:00\", \"id\": \"ccecb0b113241774b871ba806c8b8af2\", \"metric_id\": \"45a2c94744d81047a34e5fc90a4fca28\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7028605177049854, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T12:00:00\", \"bucket_end\": \"2024-03-27T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 625252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 863819.3022375831, \"training_avg\": 312065.29545454547, \"training_stddev\": 183918.00226101256, \"training_set_size\": 88.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 173.68 hours ago. Usually the table is updated within 86.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 632452.0, \"average\": 315665.1460674157, \"min_value\": 0.0, \"max_value\": 873655.3990540515, \"start_time\": \"2024-03-27T14:00:00\", \"end_time\": \"2024-03-27T16:00:00\", \"id\": \"2aaf5e2a6f676c78a9176c2ec4d87f99\", \"metric_id\": \"dd1d0006b3efc1ef50b6d6a525cbf2b7\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7031848795045432, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T14:00:00\", \"bucket_end\": \"2024-03-27T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 632452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 873655.3990540515, \"training_avg\": 315665.1460674157, \"training_stddev\": 185996.75099554527, \"training_set_size\": 89.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 175.68 hours ago. Usually the table is updated within 87.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 639652.0, \"average\": 319265.0, \"min_value\": 0.0, \"max_value\": 883491.4801389598, \"start_time\": \"2024-03-27T16:00:00\", \"end_time\": \"2024-03-27T18:00:00\", \"id\": \"a28587549d16f978cfd11d36cdfb665e\", \"metric_id\": \"048dad20308e1ab8914e640e319aa7c5\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7035021110020958, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T16:00:00\", \"bucket_end\": \"2024-03-27T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 639652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 883491.4801389598, \"training_avg\": 319265.0, \"training_stddev\": 188075.49337965326, \"training_set_size\": 90.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 177.68 hours ago. Usually the table is updated within 88.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 646852.0, \"average\": 322864.85714285716, \"min_value\": 0.0, \"max_value\": 893327.5460066551, \"start_time\": \"2024-03-27T18:00:00\", \"end_time\": \"2024-03-27T20:00:00\", \"id\": \"3ed20b05a779847743c469e1544ed03c\", \"metric_id\": \"ccc42a56327b02cfc9e80fc3e079bafc\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7038124447846075, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T18:00:00\", \"bucket_end\": \"2024-03-27T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 646852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 893327.5460066551, \"training_avg\": 322864.85714285716, \"training_stddev\": 190154.229621266, \"training_set_size\": 91.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 179.68 hours ago. Usually the table is updated within 89.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 654052.0, \"average\": 326464.7173913043, \"min_value\": 0.0, \"max_value\": 903163.5971493028, \"start_time\": \"2024-03-27T20:00:00\", \"end_time\": \"2024-03-27T22:00:00\", \"id\": \"7abb71629ef6b99bf925f41202a2eac7\", \"metric_id\": \"284890a64de0885d13093d65eca8e379\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7041161034307637, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T20:00:00\", \"bucket_end\": \"2024-03-27T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 654052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 903163.5971493028, \"training_avg\": 326464.7173913043, \"training_stddev\": 192232.95991933285, \"training_set_size\": 92.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 181.68 hours ago. Usually the table is updated within 90.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 661252.0, \"average\": 330064.5806451613, \"min_value\": 0.0, \"max_value\": 912999.6340380702, \"start_time\": \"2024-03-27T22:00:00\", \"end_time\": \"2024-03-28T00:00:00\", \"id\": \"9647ef605a6e8f43322a6cf0edca6075\", \"metric_id\": \"14647f1ddf103d1feb90554333996afa\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7044133000436275, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T22:00:00\", \"bucket_end\": \"2024-03-28T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 661252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 912999.6340380702, \"training_avg\": 330064.5806451613, \"training_stddev\": 194311.684464303, \"training_set_size\": 93.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 183.68 hours ago. Usually the table is updated within 91.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 668452.0, \"average\": 333664.44680851063, \"min_value\": 0.0, \"max_value\": 922835.6571242334, \"start_time\": \"2024-03-28T00:00:00\", \"end_time\": \"2024-03-28T02:00:00\", \"id\": \"b1a02f35184aff236994c4f1e61649aa\", \"metric_id\": \"599b6f045d95b5c8b9f42eac913195fe\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7047042387496398, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T00:00:00\", \"bucket_end\": \"2024-03-28T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 668452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 922835.6571242334, \"training_avg\": 333664.44680851063, \"training_stddev\": 196390.40343857426, \"training_set_size\": 94.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 185.68 hours ago. Usually the table is updated within 92.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 675652.0, \"average\": 337264.3157894737, \"min_value\": 0.0, \"max_value\": 932671.6668402171, \"start_time\": \"2024-03-28T02:00:00\", \"end_time\": \"2024-03-28T04:00:00\", \"id\": \"bc61057f983ad283c474bc1694e3a1bd\", \"metric_id\": \"2b21e53b7a7182b1856ea55e809e8d8c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.704989115166403, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T02:00:00\", \"bucket_end\": \"2024-03-28T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 675652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 932671.6668402171, \"training_avg\": 337264.3157894737, \"training_stddev\": 198469.11701691448, \"training_set_size\": 95.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 187.68 hours ago. Usually the table is updated within 93.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 682852.0, \"average\": 340864.1875, \"min_value\": 0.0, \"max_value\": 942507.6636005683, \"start_time\": \"2024-03-28T04:00:00\", \"end_time\": \"2024-03-28T06:00:00\", \"id\": \"ea60c7f63ec1693b442a76f9928626fc\", \"metric_id\": \"5b7d25f5e4566863b143461f791226b5\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7052681168415165, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T04:00:00\", \"bucket_end\": \"2024-03-28T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 682852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 942507.6636005683, \"training_avg\": 340864.1875, \"training_stddev\": 200547.8253668561, \"training_set_size\": 96.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 189.68 hours ago. Usually the table is updated within 94.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 690052.0, \"average\": 344464.0618556701, \"min_value\": 0.0, \"max_value\": 952343.647802871, \"start_time\": \"2024-03-28T06:00:00\", \"end_time\": \"2024-03-28T08:00:00\", \"id\": \"e16d1d2597153faa5739ae54e779393c\", \"metric_id\": \"ecc55797c48ffb6bd1e8f75c3ef1ce70\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.705541423664523, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T06:00:00\", \"bucket_end\": \"2024-03-28T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 690052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 952343.647802871, \"training_avg\": 344464.0618556701, \"training_stddev\": 202626.52864906692, \"training_set_size\": 97.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 191.68 hours ago. Usually the table is updated within 95.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 697252.0, \"average\": 348063.9387755102, \"min_value\": 0.0, \"max_value\": 962179.6198286047, \"start_time\": \"2024-03-28T08:00:00\", \"end_time\": \"2024-03-28T10:00:00\", \"id\": \"46fcff78a6c134b4c3de4d437ef58cd5\", \"metric_id\": \"bc888a5f3bf660accaba3b47a21078a3\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7058092082538765, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T08:00:00\", \"bucket_end\": \"2024-03-28T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 697252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 962179.6198286047, \"training_avg\": 348063.9387755102, \"training_stddev\": 204705.2270176982, \"training_set_size\": 98.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 193.68 hours ago. Usually the table is updated within 96.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 704452.0, \"average\": 351663.8181818182, \"min_value\": 0.0, \"max_value\": 972015.5800439529, \"start_time\": \"2024-03-28T10:00:00\", \"end_time\": \"2024-03-28T12:00:00\", \"id\": \"b7a4e7222489e802523e4456e7e3a9b8\", \"metric_id\": \"12b808de3e6360c2bb4d15079474e162\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7060716363206745, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T10:00:00\", \"bucket_end\": \"2024-03-28T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 704452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 972015.5800439529, \"training_avg\": 351663.8181818182, \"training_stddev\": 206783.92062071155, \"training_set_size\": 99.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 195.68 hours ago. Usually the table is updated within 97.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 711652.0, \"average\": 355263.7, \"min_value\": 0.0, \"max_value\": 981851.5288005602, \"start_time\": \"2024-03-28T12:00:00\", \"end_time\": \"2024-03-28T14:00:00\", \"id\": \"d885c67a1b8dac6381984cdd54689701\", \"metric_id\": \"4eac7693ac942f4a7169bf810767da96\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7063288670107728, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T12:00:00\", \"bucket_end\": \"2024-03-28T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 711652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 981851.5288005602, \"training_avg\": 355263.7, \"training_stddev\": 208862.60960018673, \"training_set_size\": 100.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 197.68 hours ago. Usually the table is updated within 98.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 718852.0, \"average\": 358863.58415841585, \"min_value\": 0.0, \"max_value\": 991687.4664362485, \"start_time\": \"2024-03-28T14:00:00\", \"end_time\": \"2024-03-28T16:00:00\", \"id\": \"82ec750023d1c65d43e6cc30b0b16707\", \"metric_id\": \"d9acc8287804f9048eaa077eba7dc22f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7065810532267625, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T14:00:00\", \"bucket_end\": \"2024-03-28T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 718852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 991687.4664362485, \"training_avg\": 358863.58415841585, \"training_stddev\": 210941.2940926109, \"training_set_size\": 101.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 199.68 hours ago. Usually the table is updated within 99.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 726052.0, \"average\": 362463.4705882353, \"min_value\": 0.0, \"max_value\": 1001523.393275689, \"start_time\": \"2024-03-28T16:00:00\", \"end_time\": \"2024-03-28T18:00:00\", \"id\": \"3c365ff6430d2478740e0b0567dffd33\", \"metric_id\": \"b262d7bb69f3603615d7718650dd8b24\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7068283419311794, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T16:00:00\", \"bucket_end\": \"2024-03-28T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 726052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1001523.393275689, \"training_avg\": 362463.4705882353, \"training_stddev\": 213019.9742291512, \"training_set_size\": 102.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 201.68 hours ago. Usually the table is updated within 100.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 733252.0, \"average\": 366063.359223301, \"min_value\": 0.0, \"max_value\": 1011359.3096310354, \"start_time\": \"2024-03-28T18:00:00\", \"end_time\": \"2024-03-28T20:00:00\", \"id\": \"3077149547a198c1d84d41e60c53a9bb\", \"metric_id\": \"0769ae865343d293e66911895e841c15\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7070708744322125, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T18:00:00\", \"bucket_end\": \"2024-03-28T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 733252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1011359.3096310354, \"training_avg\": 366063.359223301, \"training_stddev\": 215098.6501359115, \"training_set_size\": 103.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 203.68 hours ago. Usually the table is updated within 101.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 740452.0, \"average\": 369663.25, \"min_value\": 0.0, \"max_value\": 1021195.2158025231, \"start_time\": \"2024-03-28T20:00:00\", \"end_time\": \"2024-03-28T22:00:00\", \"id\": \"794bee69ae449846c5e16bd77d5f9fea\", \"metric_id\": \"a1feabb433e2bbc79d05ba1c4c8c241f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7073087866530776, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T20:00:00\", \"bucket_end\": \"2024-03-28T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 740452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1021195.2158025231, \"training_avg\": 369663.25, \"training_stddev\": 217177.32193417434, \"training_set_size\": 104.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 205.68 hours ago. Usually the table is updated within 102.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 747652.0, \"average\": 373263.14285714284, \"min_value\": 0.0, \"max_value\": 1031031.1120790303, \"start_time\": \"2024-03-28T22:00:00\", \"end_time\": \"2024-03-29T00:00:00\", \"id\": \"205dd5ed3243b66a5c792eb476899c50\", \"metric_id\": \"34f60a97e0e8336292c6d6ea165eaa62\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.707542209386133, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T22:00:00\", \"bucket_end\": \"2024-03-29T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 747652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1031031.1120790303, \"training_avg\": 373263.14285714284, \"training_stddev\": 219255.98974062913, \"training_set_size\": 105.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 207.68 hours ago. Usually the table is updated within 103.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 754852.0, \"average\": 376863.03773584904, \"min_value\": 0.0, \"max_value\": 1040866.9987386118, \"start_time\": \"2024-03-29T00:00:00\", \"end_time\": \"2024-03-29T02:00:00\", \"id\": \"3b570b09612c25cf66cca8b193531001\", \"metric_id\": \"801997e365a24c8eda92ba59fc6cae1a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.707771268532741, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T00:00:00\", \"bucket_end\": \"2024-03-29T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 754852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1040866.9987386118, \"training_avg\": 376863.03773584904, \"training_stddev\": 221334.65366758758, \"training_set_size\": 106.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 209.68 hours ago. Usually the table is updated within 104.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 762052.0, \"average\": 380462.9345794392, \"min_value\": 0.0, \"max_value\": 1050702.876049001, \"start_time\": \"2024-03-29T02:00:00\", \"end_time\": \"2024-03-29T04:00:00\", \"id\": \"1cb07d2459e22e01187c681d804e4719\", \"metric_id\": \"7720e98491b1863d1ec5c562669d1560\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7079960853297949, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T02:00:00\", \"bucket_end\": \"2024-03-29T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 762052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1050702.876049001, \"training_avg\": 380462.9345794392, \"training_stddev\": 223413.31382318726, \"training_set_size\": 107.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 211.68 hours ago. Usually the table is updated within 105.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 769252.0, \"average\": 384062.8333333333, \"min_value\": 0.0, \"max_value\": 1060538.7442680835, \"start_time\": \"2024-03-29T04:00:00\", \"end_time\": \"2024-03-29T06:00:00\", \"id\": \"bd706a4458301207fb83a1b404b89a28\", \"metric_id\": \"e198601fa0d889c8228ed26757fe15ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7082167765637717, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T04:00:00\", \"bucket_end\": \"2024-03-29T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 769252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1060538.7442680835, \"training_avg\": 384062.8333333333, \"training_stddev\": 225491.9703115834, \"training_set_size\": 108.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 213.68 hours ago. Usually the table is updated within 106.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 776452.0, \"average\": 387662.7339449541, \"min_value\": 0.0, \"max_value\": 1070374.6036443468, \"start_time\": \"2024-03-29T06:00:00\", \"end_time\": \"2024-03-29T08:00:00\", \"id\": \"2d509dac940e3800e7f70f4791512440\", \"metric_id\": \"e3331a2038a4bc5d28783b9a46815074\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7084334547731026, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T06:00:00\", \"bucket_end\": \"2024-03-29T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 776452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1070374.6036443468, \"training_avg\": 387662.7339449541, \"training_stddev\": 227570.62323313087, \"training_set_size\": 109.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 215.68 hours ago. Usually the table is updated within 107.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 783652.0, \"average\": 391262.63636363635, \"min_value\": 0.0, \"max_value\": 1080210.4544173037, \"start_time\": \"2024-03-29T08:00:00\", \"end_time\": \"2024-03-29T10:00:00\", \"id\": \"a4e88e7715813e5271c296cd0a736641\", \"metric_id\": \"35389d069ad45734185f5a0ed51f56e3\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.708646228439601, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T08:00:00\", \"bucket_end\": \"2024-03-29T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 783652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1080210.4544173037, \"training_avg\": 391262.63636363635, \"training_stddev\": 229649.27268455576, \"training_set_size\": 110.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 217.68 hours ago. Usually the table is updated within 108.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 790852.0, \"average\": 394862.54054054053, \"min_value\": 0.0, \"max_value\": 1090046.2968178948, \"start_time\": \"2024-03-29T10:00:00\", \"end_time\": \"2024-03-29T12:00:00\", \"id\": \"6dc48cf6e6d5e0fc2c04b9bf89ce5393\", \"metric_id\": \"c350a2fc206539ee3f5aea94945f1a9f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7088552021696262, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T10:00:00\", \"bucket_end\": \"2024-03-29T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 790852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1090046.2968178948, \"training_avg\": 394862.54054054053, \"training_stddev\": 231727.9187591181, \"training_set_size\": 111.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 219.68 hours ago. Usually the table is updated within 109.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 798052.0, \"average\": 398462.4464285714, \"min_value\": 0.0, \"max_value\": 1099882.1310688679, \"start_time\": \"2024-03-29T12:00:00\", \"end_time\": \"2024-03-29T14:00:00\", \"id\": \"24526747b05154b66d07291f681eebe1\", \"metric_id\": \"c2d0ed2094b294863dd399d533be7578\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7090604768656312, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T12:00:00\", \"bucket_end\": \"2024-03-29T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 798052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1099882.1310688679, \"training_avg\": 398462.4464285714, \"training_stddev\": 233806.5615467655, \"training_set_size\": 112.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 221.68 hours ago. Usually the table is updated within 110.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 805252.0, \"average\": 402062.3539823009, \"min_value\": 0.0, \"max_value\": 1109717.9573851381, \"start_time\": \"2024-03-29T14:00:00\", \"end_time\": \"2024-03-29T16:00:00\", \"id\": \"64db15271a13bd763067389208bd7a0f\", \"metric_id\": \"e807e0136c3a291450e0f8b9b496206a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7092621498886695, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T14:00:00\", \"bucket_end\": \"2024-03-29T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 805252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1109717.9573851381, \"training_avg\": 402062.3539823009, \"training_stddev\": 235885.20113427908, \"training_set_size\": 113.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 223.68 hours ago. Usually the table is updated within 111.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 812452.0, \"average\": 405662.2631578947, \"min_value\": 0.0, \"max_value\": 1119553.7759741298, \"start_time\": \"2024-03-29T16:00:00\", \"end_time\": \"2024-03-29T18:00:00\", \"id\": \"41eef2325334527d27aff427e75c2549\", \"metric_id\": \"96c8874e1b93c529580e86eb6d634fc8\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7094603152124246, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T16:00:00\", \"bucket_end\": \"2024-03-29T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 812452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1119553.7759741298, \"training_avg\": 405662.2631578947, \"training_stddev\": 237963.83760541168, \"training_set_size\": 114.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 225.68 hours ago. Usually the table is updated within 112.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 819652.0, \"average\": 409262.17391304346, \"min_value\": 0.0, \"max_value\": 1129389.5870360993, \"start_time\": \"2024-03-29T18:00:00\", \"end_time\": \"2024-03-29T20:00:00\", \"id\": \"5c6127b9ccee4ae2b2caf2fd7aa54209\", \"metric_id\": \"b61fbe2c5d222c8cb45b08d2e5a13178\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7096550635692667, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T18:00:00\", \"bucket_end\": \"2024-03-29T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 819652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1129389.5870360993, \"training_avg\": 409262.17391304346, \"training_stddev\": 240042.4710410186, \"training_set_size\": 115.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 227.68 hours ago. Usually the table is updated within 113.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 826852.0, \"average\": 412862.0862068966, \"min_value\": 0.0, \"max_value\": 1139225.3907644427, \"start_time\": \"2024-03-29T20:00:00\", \"end_time\": \"2024-03-29T22:00:00\", \"id\": \"c101b721e81f6f016c610d62fc71d37c\", \"metric_id\": \"5d41db3e2978489948d6355ba623d06b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.709846482588817, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T20:00:00\", \"bucket_end\": \"2024-03-29T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 826852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1139225.3907644427, \"training_avg\": 412862.0862068966, \"training_stddev\": 242121.1015191821, \"training_set_size\": 116.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 229.68 hours ago. Usually the table is updated within 114.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 834052.0, \"average\": 416462.0, \"min_value\": 0.0, \"max_value\": 1149061.1873459867, \"start_time\": \"2024-03-29T22:00:00\", \"end_time\": \"2024-03-30T00:00:00\", \"id\": \"4965510f7274ac05abb10eeddadf1fdf\", \"metric_id\": \"fbb4c6bed96c455e4d87b42de51f5420\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.710034656929466, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T22:00:00\", \"bucket_end\": \"2024-03-30T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 834052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1149061.1873459867, \"training_avg\": 416462.0, \"training_stddev\": 244199.7291153289, \"training_set_size\": 117.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 231.68 hours ago. Usually the table is updated within 115.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 841252.0, \"average\": 420061.9152542373, \"min_value\": 0.0, \"max_value\": 1158896.9769612649, \"start_time\": \"2024-03-30T00:00:00\", \"end_time\": \"2024-03-30T02:00:00\", \"id\": \"ec9d0c1be5467429c3bdb6474120f71c\", \"metric_id\": \"01840e3c547f3b6d3ddb5bf348bbc74c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.710219668403251, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T00:00:00\", \"bucket_end\": \"2024-03-30T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 841252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1158896.9769612649, \"training_avg\": 420061.9152542373, \"training_stddev\": 246278.35390234253, \"training_set_size\": 118.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 233.68 hours ago. Usually the table is updated within 116.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 848452.0, \"average\": 423661.8319327731, \"min_value\": 0.0, \"max_value\": 1168732.7597847811, \"start_time\": \"2024-03-30T02:00:00\", \"end_time\": \"2024-03-30T04:00:00\", \"id\": \"1df650aac60837051cc3cd6dab353f55\", \"metric_id\": \"7569cb5dce8c3df6e85e333e89c5fbb7\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7104015960944947, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T02:00:00\", \"bucket_end\": \"2024-03-30T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 848452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1168732.7597847811, \"training_avg\": 423661.8319327731, \"training_stddev\": 248356.97595066935, \"training_set_size\": 119.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 235.68 hours ago. Usually the table is updated within 117.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 855652.0, \"average\": 427261.75, \"min_value\": 0.0, \"max_value\": 1178568.5359852593, \"start_time\": \"2024-03-30T04:00:00\", \"end_time\": \"2024-03-30T06:00:00\", \"id\": \"fef1e9953552ba238dfd076727efd3c2\", \"metric_id\": \"e047a91304f89bcfb62e2651437b85a2\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.710580516472555, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T04:00:00\", \"bucket_end\": \"2024-03-30T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 855652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1178568.5359852593, \"training_avg\": 427261.75, \"training_stddev\": 250435.59532841973, \"training_set_size\": 120.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 237.68 hours ago. Usually the table is updated within 118.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 862852.0, \"average\": 430861.6694214876, \"min_value\": 0.0, \"max_value\": 1188404.3057258795, \"start_time\": \"2024-03-30T06:00:00\", \"end_time\": \"2024-03-30T08:00:00\", \"id\": \"fbc2c62c401c04afccfc07acbcfedeb9\", \"metric_id\": \"af17d504fdab25c7ed08332f0c389b29\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7107565034990277, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T06:00:00\", \"bucket_end\": \"2024-03-30T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 862852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1188404.3057258795, \"training_avg\": 430861.6694214876, \"training_stddev\": 252514.21210146399, \"training_set_size\": 121.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 239.68 hours ago. Usually the table is updated within 119.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 870052.0, \"average\": 434461.59016393445, \"min_value\": 0.0, \"max_value\": 1198240.069164506, \"start_time\": \"2024-03-30T08:00:00\", \"end_time\": \"2024-03-30T10:00:00\", \"id\": \"3d34411042220fef87f6d1828f0c4f05\", \"metric_id\": \"10dd94d3c2659d3029e4f8b8e04c41bd\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7109296287297184, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T08:00:00\", \"bucket_end\": \"2024-03-30T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 870052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1198240.069164506, \"training_avg\": 434461.59016393445, \"training_stddev\": 254592.8263335238, \"training_set_size\": 122.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 241.68 hours ago. Usually the table is updated within 120.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 877252.0, \"average\": 438061.51219512196, \"min_value\": 0.0, \"max_value\": 1208075.826453899, \"start_time\": \"2024-03-30T10:00:00\", \"end_time\": \"2024-03-30T12:00:00\", \"id\": \"628548d847eaecc2701daea49de7b867\", \"metric_id\": \"11dc8625b46c4e534e439842c7a6980b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7110999614116793, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T10:00:00\", \"bucket_end\": \"2024-03-30T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 877252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1208075.826453899, \"training_avg\": 438061.51219512196, \"training_stddev\": 256671.438086259, \"training_set_size\": 123.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 243.68 hours ago. Usually the table is updated within 121.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 884452.0, \"average\": 441661.43548387097, \"min_value\": 0.0, \"max_value\": 1217911.5777419226, \"start_time\": \"2024-03-30T12:00:00\", \"end_time\": \"2024-03-30T14:00:00\", \"id\": \"0a8b67424df9cae3208f3efca3c2bb63\", \"metric_id\": \"e7c3f5e7579cb6ce0bf0d43731139417\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.711267568575584, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T12:00:00\", \"bucket_end\": \"2024-03-30T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 884452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1217911.5777419226, \"training_avg\": 441661.43548387097, \"training_stddev\": 258750.0474193505, \"training_set_size\": 124.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 245.68 hours ago. Usually the table is updated within 122.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 891652.0, \"average\": 445261.36, \"min_value\": 0.0, \"max_value\": 1227747.3231717362, \"start_time\": \"2024-03-30T14:00:00\", \"end_time\": \"2024-03-30T16:00:00\", \"id\": \"191681c420131a1ff40b4348e5625178\", \"metric_id\": \"9d09184bf3fca6c5d74259b715cdbad7\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7114325151237055, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T14:00:00\", \"bucket_end\": \"2024-03-30T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 891652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1227747.3231717362, \"training_avg\": 445261.36, \"training_stddev\": 260828.6543905788, \"training_set_size\": 125.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 247.68 hours ago. Usually the table is updated within 123.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 898852.0, \"average\": 448861.28571428574, \"min_value\": 0.0, \"max_value\": 1237583.0628819836, \"start_time\": \"2024-03-30T16:00:00\", \"end_time\": \"2024-03-30T18:00:00\", \"id\": \"96be90c85b4e71fc2996147143d3bfb1\", \"metric_id\": \"f0c0b16b2d3c53159c66cd318e447c73\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7115948639137322, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T16:00:00\", \"bucket_end\": \"2024-03-30T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 898852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1237583.0628819836, \"training_avg\": 448861.28571428574, \"training_stddev\": 262907.2590558993, \"training_set_size\": 126.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 249.68 hours ago. Usually the table is updated within 124.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 906052.0, \"average\": 452461.2125984252, \"min_value\": 0.0, \"max_value\": 1247418.7970069656, \"start_time\": \"2024-03-30T18:00:00\", \"end_time\": \"2024-03-30T20:00:00\", \"id\": \"a86e7176f22e86271399d07fe3a6986b\", \"metric_id\": \"cc29d2a0188b07ac18b52056bcd52029\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.711754675838659, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T18:00:00\", \"bucket_end\": \"2024-03-30T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 906052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1247418.7970069656, \"training_avg\": 452461.2125984252, \"training_stddev\": 264985.86146951345, \"training_set_size\": 127.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 251.68 hours ago. Usually the table is updated within 125.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 913252.0, \"average\": 456061.140625, \"min_value\": 0.0, \"max_value\": 1257254.525676812, \"start_time\": \"2024-03-30T20:00:00\", \"end_time\": \"2024-03-30T22:00:00\", \"id\": \"a95036e57cfe3792d46da3d314b54686\", \"metric_id\": \"4f3192a4ec2b2f225aab4f6a2bb4eeaf\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7119120099029554, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T20:00:00\", \"bucket_end\": \"2024-03-30T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 913252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1257254.525676812, \"training_avg\": 456061.140625, \"training_stddev\": 267064.46168393735, \"training_set_size\": 128.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 253.68 hours ago. Usually the table is updated within 126.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 920452.0, \"average\": 459661.06976744183, \"min_value\": 0.0, \"max_value\": 1267090.2490176416, \"start_time\": \"2024-03-30T22:00:00\", \"end_time\": \"2024-03-31T00:00:00\", \"id\": \"181703344bfe280414c4f37bcdf74ccf\", \"metric_id\": \"28aa8e2acc041ceaa7931e17ada8c1f4\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7120669232952204, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T22:00:00\", \"bucket_end\": \"2024-03-31T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 920452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1267090.2490176416, \"training_avg\": 459661.06976744183, \"training_stddev\": 269143.0597500666, \"training_set_size\": 129.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 255.68 hours ago. Usually the table is updated within 127.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 927652.0, \"average\": 463261.0, \"min_value\": 0.0, \"max_value\": 1276925.967151714, \"start_time\": \"2024-03-31T00:00:00\", \"end_time\": \"2024-03-31T02:00:00\", \"id\": \"650703c2df18f34c9ca0f2cc136e5590\", \"metric_id\": \"073214bf1b4924086171da658a87aa74\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7122194714575099, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T00:00:00\", \"bucket_end\": \"2024-03-31T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 927652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1276925.967151714, \"training_avg\": 463261.0, \"training_stddev\": 271221.655717238, \"training_set_size\": 130.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 257.68 hours ago. Usually the table is updated within 128.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 934852.0, \"average\": 466860.93129770993, \"min_value\": 0.0, \"max_value\": 1286761.6801975782, \"start_time\": \"2024-03-31T02:00:00\", \"end_time\": \"2024-03-31T04:00:00\", \"id\": \"ede23ac102a5c930aa6cd694749eef31\", \"metric_id\": \"ac65d7233fea58e5ba487b3f3c5fface\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.712369708151508, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T02:00:00\", \"bucket_end\": \"2024-03-31T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 934852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1286761.6801975782, \"training_avg\": 466860.93129770993, \"training_stddev\": 273300.2496332894, \"training_set_size\": 131.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 259.68 hours ago. Usually the table is updated within 129.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 942052.0, \"average\": 470460.86363636365, \"min_value\": 0.0, \"max_value\": 1296597.3882702107, \"start_time\": \"2024-03-31T04:00:00\", \"end_time\": \"2024-03-31T06:00:00\", \"id\": \"fcf2d42bac553a0e6aa8a621971ce659\", \"metric_id\": \"c235ccd3b7a9af23f38c3c7f35d2f6e1\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.712517685521715, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T04:00:00\", \"bucket_end\": \"2024-03-31T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 942052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1296597.3882702107, \"training_avg\": 470460.86363636365, \"training_stddev\": 275378.8415446157, \"training_set_size\": 132.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 261.68 hours ago. Usually the table is updated within 130.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 949252.0, \"average\": 474060.7969924812, \"min_value\": 0.0, \"max_value\": 1306433.0914811497, \"start_time\": \"2024-03-31T06:00:00\", \"end_time\": \"2024-03-31T08:00:00\", \"id\": \"56d4126b8c5ae755e064c19fa9df3c95\", \"metric_id\": \"7dcaf04ea5de5720fe123c7e297e4485\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7126634541558055, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T06:00:00\", \"bucket_end\": \"2024-03-31T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 949252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1306433.0914811497, \"training_avg\": 474060.7969924812, \"training_stddev\": 277457.43149622285, \"training_set_size\": 133.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 263.68 hours ago. Usually the table is updated within 131.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 956452.0, \"average\": 477660.7313432836, \"min_value\": 0.0, \"max_value\": 1316268.7899386233, \"start_time\": \"2024-03-31T08:00:00\", \"end_time\": \"2024-03-31T10:00:00\", \"id\": \"710038b3db0f5c5fe7216cad499d01ab\", \"metric_id\": \"d5983c913d785724828f121f380cf341\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7128070631422994, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T08:00:00\", \"bucket_end\": \"2024-03-31T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 956452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1316268.7899386233, \"training_avg\": 477660.7313432836, \"training_stddev\": 279536.0195317799, \"training_set_size\": 134.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 265.68 hours ago. Usually the table is updated within 132.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 963652.0, \"average\": 481260.6666666667, \"min_value\": 0.0, \"max_value\": 1326104.4837476702, \"start_time\": \"2024-03-31T10:00:00\", \"end_time\": \"2024-03-31T12:00:00\", \"id\": \"8d07abfb2962ce87db04d25913a8935e\", \"metric_id\": \"46dd93accc42b43a6a32a33f1d2bc7ff\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7129485601256937, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T10:00:00\", \"bucket_end\": \"2024-03-31T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 963652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1326104.4837476702, \"training_avg\": 481260.6666666667, \"training_stddev\": 281614.60569366784, \"training_set_size\": 135.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 267.68 hours ago. Usually the table is updated within 133.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 970852.0, \"average\": 484860.60294117645, \"min_value\": 0.0, \"max_value\": 1335940.1730102568, \"start_time\": \"2024-03-31T12:00:00\", \"end_time\": \"2024-03-31T14:00:00\", \"id\": \"89893a454d36a251adc70930e5561228\", \"metric_id\": \"d9d60c1fcac8212c41bac8112428b37d\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7130879913591746, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T12:00:00\", \"bucket_end\": \"2024-03-31T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 970852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1335940.1730102568, \"training_avg\": 484860.60294117645, \"training_stddev\": 283693.1900230268, \"training_set_size\": 136.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 269.68 hours ago. Usually the table is updated within 134.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 978052.0, \"average\": 488460.5401459854, \"min_value\": 0.0, \"max_value\": 1345775.8578253891, \"start_time\": \"2024-03-31T14:00:00\", \"end_time\": \"2024-03-31T16:00:00\", \"id\": \"cf44f977de5baef6fff4129f0c87883e\", \"metric_id\": \"bb1e9d1fa5c926408720bb4cfa4f0d56\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.713225401755037, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T14:00:00\", \"bucket_end\": \"2024-03-31T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 978052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1345775.8578253891, \"training_avg\": 488460.5401459854, \"training_stddev\": 285771.7725598013, \"training_set_size\": 137.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 271.68 hours ago. Usually the table is updated within 135.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 985252.0, \"average\": 492060.47826086957, \"min_value\": 0.0, \"max_value\": 1355611.5382892196, \"start_time\": \"2024-03-31T16:00:00\", \"end_time\": \"2024-03-31T18:00:00\", \"id\": \"d5b05f52b77a1e0d6cc6366b11e39621\", \"metric_id\": \"e3be39f72b99da51582a3c619fdbf344\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7133608349329308, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T16:00:00\", \"bucket_end\": \"2024-03-31T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 985252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1355611.5382892196, \"training_avg\": 492060.47826086957, \"training_stddev\": 287850.35334278335, \"training_set_size\": 138.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 273.68 hours ago. Usually the table is updated within 136.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 992452.0, \"average\": 495660.417266187, \"min_value\": 0.0, \"max_value\": 1365447.2144951476, \"start_time\": \"2024-03-31T18:00:00\", \"end_time\": \"2024-03-31T20:00:00\", \"id\": \"7a5d2e1fbec56b1c646d2df2747076fa\", \"metric_id\": \"061c37a98f79bdea3e3c02fe2723b09c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7134943332660362, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T18:00:00\", \"bucket_end\": \"2024-03-31T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 992452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1365447.2144951476, \"training_avg\": 495660.417266187, \"training_stddev\": 289928.93240965356, \"training_set_size\": 139.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 275.68 hours ago. Usually the table is updated within 137.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 999652.0, \"average\": 499260.35714285716, \"min_value\": 0.0, \"max_value\": 1375282.8865339193, \"start_time\": \"2024-03-31T20:00:00\", \"end_time\": \"2024-03-31T22:00:00\", \"id\": \"a02abef25943df537ca9d2a76f886831\", \"metric_id\": \"e21ef52c18441f48d9b9489d579b6c87\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7136259379252727, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T20:00:00\", \"bucket_end\": \"2024-03-31T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 999652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1375282.8865339193, \"training_avg\": 499260.35714285716, \"training_stddev\": 292007.5097970207, \"training_set_size\": 140.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 277.68 hours ago. Usually the table is updated within 138.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1006852.0, \"average\": 502860.2978723404, \"min_value\": 0.0, \"max_value\": 1385118.5544937197, \"start_time\": \"2024-03-31T22:00:00\", \"end_time\": \"2024-04-01T00:00:00\", \"id\": \"a3eec10672f73578314fc65adad5220f\", \"metric_id\": \"7114c4fb4afac06396f80596b484409a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7137556889216419, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T22:00:00\", \"bucket_end\": \"2024-04-01T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1006852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1385118.5544937197, \"training_avg\": 502860.2978723404, \"training_stddev\": 294086.0855404598, \"training_set_size\": 141.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 279.68 hours ago. Usually the table is updated within 139.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1014052.0, \"average\": 506460.23943661974, \"min_value\": 0.0, \"max_value\": 1394954.2184602637, \"start_time\": \"2024-04-01T00:00:00\", \"end_time\": \"2024-04-01T02:00:00\", \"id\": \"6d0ebb2ca4aaeb2d6d5187bc833b23e2\", \"metric_id\": \"72be6ce9ab1dd92da3bd77eab09d682f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.713883625146792, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T00:00:00\", \"bucket_end\": \"2024-04-01T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1014052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1394954.2184602637, \"training_avg\": 506460.23943661974, \"training_stddev\": 296164.659674548, \"training_set_size\": 142.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 281.68 hours ago. Usually the table is updated within 140.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1021252.0, \"average\": 510060.1818181818, \"min_value\": 0.0, \"max_value\": 1404789.8785168806, \"start_time\": \"2024-04-01T02:00:00\", \"end_time\": \"2024-04-01T04:00:00\", \"id\": \"046896f6228458c52fd99a6b167af34d\", \"metric_id\": \"dbd3ad9b3b069b500e9bb075b9bce206\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7140097844118924, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T02:00:00\", \"bucket_end\": \"2024-04-01T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1021252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1404789.8785168806, \"training_avg\": 510060.1818181818, \"training_stddev\": 298243.2322328996, \"training_set_size\": 143.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 283.68 hours ago. Usually the table is updated within 141.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1028452.0, \"average\": 513660.125, \"min_value\": 0.0, \"max_value\": 1414625.534744597, \"start_time\": \"2024-04-01T04:00:00\", \"end_time\": \"2024-04-01T06:00:00\", \"id\": \"875c29695aa6696f488484439af4276d\", \"metric_id\": \"269e15f52c4f4e24947d251e068b99d4\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7141342034848983, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T04:00:00\", \"bucket_end\": \"2024-04-01T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1028452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1414625.534744597, \"training_avg\": 513660.125, \"training_stddev\": 300321.80324819905, \"training_set_size\": 144.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 285.68 hours ago. Usually the table is updated within 142.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1035652.0, \"average\": 517260.0689655172, \"min_value\": 0.0, \"max_value\": 1424461.1872222172, \"start_time\": \"2024-04-01T06:00:00\", \"end_time\": \"2024-04-01T08:00:00\", \"id\": \"8adfe10065a528ccf4630d26020c69f3\", \"metric_id\": \"02dddc74a4a641516a339110fc7f848e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7142569181262834, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T06:00:00\", \"bucket_end\": \"2024-04-01T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1035652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1424461.1872222172, \"training_avg\": 517260.0689655172, \"training_stddev\": 302400.3727522333, \"training_set_size\": 145.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 287.68 hours ago. Usually the table is updated within 143.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1042852.0, \"average\": 520860.01369863015, \"min_value\": 0.0, \"max_value\": 1434296.8360263961, \"start_time\": \"2024-04-01T08:00:00\", \"end_time\": \"2024-04-01T10:00:00\", \"id\": \"44be222f49c4bfba3c92222fb8a1f2cd\", \"metric_id\": \"fa555822124f561ebf1c812e9589ce77\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7143779631233158, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T08:00:00\", \"bucket_end\": \"2024-04-01T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1042852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1434296.8360263961, \"training_avg\": 520860.01369863015, \"training_stddev\": 304478.940775922, \"training_set_size\": 146.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 289.68 hours ago. Usually the table is updated within 144.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1050052.0, \"average\": 524459.9591836735, \"min_value\": 0.0, \"max_value\": 1444132.4812317141, \"start_time\": \"2024-04-01T10:00:00\", \"end_time\": \"2024-04-01T12:00:00\", \"id\": \"863c898760a4fdea22212dc964ef27d3\", \"metric_id\": \"96480178f7a4914272be7e6d3dbc0b10\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7144973723229426, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T10:00:00\", \"bucket_end\": \"2024-04-01T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1050052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1444132.4812317141, \"training_avg\": 524459.9591836735, \"training_stddev\": 306557.50734934694, \"training_set_size\": 147.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 291.68 hours ago. Usually the table is updated within 145.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1057252.0, \"average\": 528059.9054054054, \"min_value\": 0.0, \"max_value\": 1453968.122910747, \"start_time\": \"2024-04-01T12:00:00\", \"end_time\": \"2024-04-01T14:00:00\", \"id\": \"a0583d655e4802ca8537c7c00987f986\", \"metric_id\": \"2d0e4f97f0b8742980e040fca8a869a2\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7146151786633483, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T12:00:00\", \"bucket_end\": \"2024-04-01T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1057252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1453968.122910747, \"training_avg\": 528059.9054054054, \"training_stddev\": 308636.0725017805, \"training_set_size\": 148.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 293.68 hours ago. Usually the table is updated within 146.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1064452.0, \"average\": 531659.8523489933, \"min_value\": 0.0, \"max_value\": 1463803.7611341309, \"start_time\": \"2024-04-01T14:00:00\", \"end_time\": \"2024-04-01T16:00:00\", \"id\": \"4b78dc92af54c0fc565016eca4791289\", \"metric_id\": \"315b998f944084f34e256ccfb1da48f3\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.714731414204254, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T14:00:00\", \"bucket_end\": \"2024-04-01T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1064452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1463803.7611341309, \"training_avg\": 531659.8523489933, \"training_stddev\": 310714.6362617125, \"training_set_size\": 149.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 295.68 hours ago. Usually the table is updated within 147.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1071652.0, \"average\": 535259.8, \"min_value\": 0.0, \"max_value\": 1473639.3959706286, \"start_time\": \"2024-04-01T16:00:00\", \"end_time\": \"2024-04-01T18:00:00\", \"id\": \"6a526420d8798e9e4ca18aa3a8742b55\", \"metric_id\": \"f49d4913f0fc1b783887fdfe4b653ca5\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7148461101560093, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T16:00:00\", \"bucket_end\": \"2024-04-01T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1071652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1473639.3959706286, \"training_avg\": 535259.8, \"training_stddev\": 312793.19865687616, \"training_set_size\": 150.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 297.68 hours ago. Usually the table is updated within 148.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1078852.0, \"average\": 538859.7483443709, \"min_value\": 0.0, \"max_value\": 1483475.02748719, \"start_time\": \"2024-04-01T18:00:00\", \"end_time\": \"2024-04-01T20:00:00\", \"id\": \"9d52f207a32cd1be9053461dcf2f4c55\", \"metric_id\": \"9e6b67c05d00770987a9219227505252\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7149592969075387, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T18:00:00\", \"bucket_end\": \"2024-04-01T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1078852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1483475.02748719, \"training_avg\": 538859.7483443709, \"training_stddev\": 314871.75971427304, \"training_set_size\": 151.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 299.68 hours ago. Usually the table is updated within 149.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}]}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-01T20:49:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240401204910096562\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-01T20:59:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240401205905994495\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-01T21:00:37\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240401210030929379\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"34dfacbe38a12f9de5651c5767e99a9e\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240401204910106844\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"974b9d7b73f343e3902b7da01f36bc4c\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-01T20:59:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240401205906280739\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9cefcf6e8cff7839ca187f0a15e6f22a\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-01T21:00:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240401210031217025\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-01T20:49:03\", \"id\": \"935bcf166f70eaacfed75b7ff7d10ebc\", \"metric_id\": \"087ede81bb081f440e325475e49c3a50\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-01T21:00:31.315645\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-01T20:49:03\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 2.0, \"training_start\": \"2024-03-19T08:00:24\", \"training_end\": \"2024-04-01T20:49:03\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-01T21:00:24\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-01T20:58:55\", \"id\": \"87bbfe0527a6970faebe783955f0983d\", \"metric_id\": \"f9fb50e3e2f23f987651be20732d3b6e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-01T21:00:31.315645\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-01T20:58:55\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 3.0, \"training_start\": \"2024-03-19T08:00:24\", \"training_end\": \"2024-04-01T20:58:55\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-01T21:00:24\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-01T21:00:24\", \"id\": \"9cefcf6e8cff7839ca187f0a15e6f22a\", \"metric_id\": \"8e64f1bb19810a5b1c09bb9189e1e479\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-01T21:00:31.315645\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-01T21:00:24\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 4.0, \"training_start\": \"2024-03-19T08:00:24\", \"training_end\": \"2024-04-01T21:00:24\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-01T21:00:24\", \"is_anomalous\": false}]}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:59:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:00:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f\", \"test_execution_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:04:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25\", \"test_execution_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T20:59:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T21:00:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T21:06:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T21:06:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-03T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T21:06:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T21:06:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-03T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T20:49:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T21:06:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T21:06:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T21:36:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T20:49:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T21:36:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T20:49:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T21:36:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T20:49:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T21:00:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T21:06:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T21:06:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T21:36:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:49:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:59:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:00:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f\", \"test_execution_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:04:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25\", \"test_execution_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:49:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:59:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:00:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f\", \"test_execution_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:04:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25\", \"test_execution_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "info", "msg": "Elementary: [{\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-01T20:49:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Database Error in test body_mass_indexes_component_test (tests/component/body_mass_indexes_component_test.sql)\\n  syntax error at or near \\\"current_timestamp\\\"\\n  LINE 154:         current_timestamp as processed_at\\n                    ^\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": null, \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"error\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": null, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-01T20:59:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-01T21:00:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"794d5382-8844-4458-864c-b19e7984abe9.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"794d5382-8844-4458-864c-b19e7984abe9\", \"test_execution_id\": \"794d5382-8844-4458-864c-b19e7984abe9.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"23b0d43e-fdeb-41b3-8768-0a56d46a149d.test.dbt_testing_example.body_mass_indexes_component_test\", \"invocation_id\": \"23b0d43e-fdeb-41b3-8768-0a56d46a149d\", \"test_execution_id\": \"23b0d43e-fdeb-41b3-8768-0a56d46a149d.test.dbt_testing_example.body_mass_indexes_component_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_component_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:20\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"component-test\\\", \\\"unit-test\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_component_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:49:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Database Error in test body_mass_indexes_unit_test (tests/unit/marts/body_mass_indexes_unit_test.sql)\\n  syntax error at or near \\\"current_timestamp\\\"\\n  LINE 43:         current_timestamp as processed_at\\n                   ^\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": null, \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"error\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": null, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:59:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:00:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f\", \"test_execution_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:04:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.body_mass_indexes_unit_test\", \"invocation_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25\", \"test_execution_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.body_mass_indexes_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.body_mass_indexes_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"body_mass_indexes_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T20:59:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T21:00:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T21:06:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T21:06:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-01T21:36:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T20:59:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T21:00:28\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T21:06:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T21:06:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-01T21:36:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T21:06:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T21:06:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-01T21:36:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T21:06:38\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T21:06:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-01T21:36:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2024-04-03T05:34:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T21:06:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T21:06:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-02T05:34:46\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T21:06:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T21:06:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T21:06:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T21:06:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-01T21:36:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2024-04-03T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T20:49:08\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T20:59:04\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T21:00:29\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T21:06:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T21:06:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-01T21:36:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-02T05:34:45\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2024-04-03T05:34:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8c31ac62a0b82d5f60e08a81d2d3f7c9\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-03-20 08:19:08.801254, 299.68 hours ago. Usually the table is updated within 149.68 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240401204909908542\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-03-20 08:19:08.801254\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"70941d18e4ff8f3f36137f6f39238356\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-01T20:59:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-03-20 08:19:08.801254, 299.68 hours ago. Usually the table is updated within 149.68 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240401205906025083\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-03-20 08:19:08.801254\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9d52f207a32cd1be9053461dcf2f4c55\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299.None.freshness\", \"detected_at\": \"2024-04-01T21:00:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"freshness\", \"test_results_description\": \"\\n      \\n          Last update was at 2024-03-20 08:19:08.801254, 299.68 hours ago. Usually the table is updated within 149.68 hours.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the freshness of your table over time, as the expected time between data updates.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_e39d6b3299_eleme__anomaly_scores__tmp_20240401210030979375\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('freshness' as varchar(4096))\", \"other\": \"2024-03-20 08:19:08.801254\", \"test_name\": \"freshness_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"processed_at\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 2}, \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 6052.0, \"average\": 3037.0, \"min_value\": 0.0, \"max_value\": 15828.561671664644, \"start_time\": \"2024-03-20T08:00:00\", \"end_time\": \"2024-03-20T10:00:00\", \"id\": \"62ec551a93dafdce4a56cf73a3655682\", \"metric_id\": \"92c80134aef1c4a3ce0e06818df28d95\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 0.7071067811865476, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T08:00:00\", \"bucket_end\": \"2024-03-20T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 6052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 15828.561671664644, \"training_avg\": 3037.0, \"training_stddev\": 4263.853890554881, \"training_set_size\": 2.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 1.68 hours ago. Usually the table is updated within 0.84 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 13252.0, \"average\": 6442.0, \"min_value\": 0.0, \"max_value\": 26312.850510232318, \"start_time\": \"2024-03-20T10:00:00\", \"end_time\": \"2024-03-20T12:00:00\", \"id\": \"bca668dec0f7415690f68ff6beb90c8d\", \"metric_id\": \"a4f2f6173a226ddb2991246975d74641\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.0281391825417716, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T10:00:00\", \"bucket_end\": \"2024-03-20T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 13252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 26312.850510232318, \"training_avg\": 6442.0, \"training_stddev\": 6623.616836744106, \"training_set_size\": 3.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 3.68 hours ago. Usually the table is updated within 1.79 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 20452.0, \"average\": 9944.5, \"min_value\": 0.0, \"max_value\": 36493.77541384134, \"start_time\": \"2024-03-20T12:00:00\", \"end_time\": \"2024-03-20T14:00:00\", \"id\": \"c2e4e05f8dea6fd8fde8855b6a0a180f\", \"metric_id\": \"2471dd5c94e70da603bd91e84763ab55\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.1873205392101172, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T12:00:00\", \"bucket_end\": \"2024-03-20T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 20452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 36493.77541384134, \"training_avg\": 9944.5, \"training_stddev\": 8849.758471280446, \"training_set_size\": 4.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 5.68 hours ago. Usually the table is updated within 2.76 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 27652.0, \"average\": 13486.0, \"min_value\": 0.0, \"max_value\": 46547.27674485666, \"start_time\": \"2024-03-20T14:00:00\", \"end_time\": \"2024-03-20T16:00:00\", \"id\": \"98ea170137e92c6adc22b52503952df8\", \"metric_id\": \"5333c098b0f93693bae96bcb1dd6276a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.285431301639354, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T14:00:00\", \"bucket_end\": \"2024-03-20T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 27652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 46547.27674485666, \"training_avg\": 13486.0, \"training_stddev\": 11020.425581618887, \"training_set_size\": 5.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 7.68 hours ago. Usually the table is updated within 3.75 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 34852.0, \"average\": 17047.0, \"min_value\": 0.0, \"max_value\": 56533.673068264434, \"start_time\": \"2024-03-20T16:00:00\", \"end_time\": \"2024-03-20T18:00:00\", \"id\": \"b97bc2fcee1947e2a538d6c425f430cb\", \"metric_id\": \"57d66dbc74842ac20017b349b07f3c76\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.3527348811498077, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T16:00:00\", \"bucket_end\": \"2024-03-20T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 34852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 56533.673068264434, \"training_avg\": 17047.0, \"training_stddev\": 13162.224356088145, \"training_set_size\": 6.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 9.68 hours ago. Usually the table is updated within 4.74 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 42052.0, \"average\": 20619.14285714286, \"min_value\": 0.0, \"max_value\": 66480.06319554988, \"start_time\": \"2024-03-20T18:00:00\", \"end_time\": \"2024-03-20T20:00:00\", \"id\": \"1fd9392a50e27c88ad9fd2dc73068ef0\", \"metric_id\": \"99c89ce855be080a7ee7d87bf1f9d961\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4020340401830853, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T18:00:00\", \"bucket_end\": \"2024-03-20T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 42052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 66480.06319554988, \"training_avg\": 20619.14285714286, \"training_stddev\": 15286.973446135673, \"training_set_size\": 7.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 11.68 hours ago. Usually the table is updated within 5.73 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 49252.0, \"average\": 24198.25, \"min_value\": 0.0, \"max_value\": 76400.58723215849, \"start_time\": \"2024-03-20T20:00:00\", \"end_time\": \"2024-03-20T22:00:00\", \"id\": \"9f700b257cc9e174146503ebceb6e75b\", \"metric_id\": \"c710790acb367a3ba46d8895bdec9d7a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4398062229615651, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T20:00:00\", \"bucket_end\": \"2024-03-20T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 49252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 76400.58723215849, \"training_avg\": 24198.25, \"training_stddev\": 17400.779077386163, \"training_set_size\": 8.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-20T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 13.68 hours ago. Usually the table is updated within 6.72 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 56452.0, \"average\": 27782.0, \"min_value\": 0.0, \"max_value\": 86303.38839774737, \"start_time\": \"2024-03-20T22:00:00\", \"end_time\": \"2024-03-21T00:00:00\", \"id\": \"81fc3cd28581c7d896f8c820513404f7\", \"metric_id\": \"1bb274167422a35c60c12d0afebc06cf\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4697190609256074, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-20T22:00:00\", \"bucket_end\": \"2024-03-21T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 56452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 86303.38839774737, \"training_avg\": 27782.0, \"training_stddev\": 19507.12946591579, \"training_set_size\": 9.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 15.68 hours ago. Usually the table is updated within 7.72 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 63652.0, \"average\": 31369.0, \"min_value\": 0.0, \"max_value\": 96193.50161782966, \"start_time\": \"2024-03-21T00:00:00\", \"end_time\": \"2024-03-21T02:00:00\", \"id\": \"70944f337f310816ce853429e905f383\", \"metric_id\": \"1170b1e71a5f6a7d64b5f71e7082b83e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.4940184279544413, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T00:00:00\", \"bucket_end\": \"2024-03-21T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 63652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 96193.50161782966, \"training_avg\": 31369.0, \"training_stddev\": 21608.16720594322, \"training_set_size\": 10.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 17.68 hours ago. Usually the table is updated within 8.71 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 70852.0, \"average\": 34958.36363636364, \"min_value\": 0.0, \"max_value\": 106074.21284799092, \"start_time\": \"2024-03-21T02:00:00\", \"end_time\": \"2024-03-21T04:00:00\", \"id\": \"7b27da3f8cbdeb3c50d3c32727028d16\", \"metric_id\": \"6d925fbc8aeb171c3195bbd47f3f5111\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.514161896182539, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T02:00:00\", \"bucket_end\": \"2024-03-21T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 70852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 106074.21284799092, \"training_avg\": 34958.36363636364, \"training_stddev\": 23705.283070542428, \"training_set_size\": 11.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 19.68 hours ago. Usually the table is updated within 9.71 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 78052.0, \"average\": 38549.5, \"min_value\": 0.0, \"max_value\": 115947.76015486395, \"start_time\": \"2024-03-21T04:00:00\", \"end_time\": \"2024-03-21T06:00:00\", \"id\": \"3f8da35430331f76b7f6bee1e7b25cc9\", \"metric_id\": \"2e85238cd6b769b21fa1184c6e693c57\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5311390690550635, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T04:00:00\", \"bucket_end\": \"2024-03-21T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 78052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 115947.76015486395, \"training_avg\": 38549.5, \"training_stddev\": 25799.420051621317, \"training_set_size\": 12.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 21.68 hours ago. Usually the table is updated within 10.71 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 85252.0, \"average\": 42142.0, \"min_value\": 0.0, \"max_value\": 125815.72168130206, \"start_time\": \"2024-03-21T06:00:00\", \"end_time\": \"2024-03-21T08:00:00\", \"id\": \"43dbcdd378cc6c52e3abf3c369c17fb7\", \"metric_id\": \"fe24db09c2c3a68c39b478e169fb6a9b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.545646559054638, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T06:00:00\", \"bucket_end\": \"2024-03-21T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 85252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 125815.72168130206, \"training_avg\": 42142.0, \"training_stddev\": 27891.240560434024, \"training_set_size\": 13.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 23.68 hours ago. Usually the table is updated within 11.71 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 92452.0, \"average\": 45735.57142857143, \"min_value\": 0.0, \"max_value\": 135679.2427297967, \"start_time\": \"2024-03-21T08:00:00\", \"end_time\": \"2024-03-21T10:00:00\", \"id\": \"2994a2e14b3f91a928bc137aaa80587a\", \"metric_id\": \"4310a99b461a4c312b545f030fb85ce9\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5581895166911703, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T08:00:00\", \"bucket_end\": \"2024-03-21T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 92452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 135679.2427297967, \"training_avg\": 45735.57142857143, \"training_stddev\": 29981.223767075095, \"training_set_size\": 14.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 25.68 hours ago. Usually the table is updated within 12.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 99652.0, \"average\": 49330.0, \"min_value\": 0.0, \"max_value\": 145539.17492630315, \"start_time\": \"2024-03-21T10:00:00\", \"end_time\": \"2024-03-21T12:00:00\", \"id\": \"68005be60d6893484dbc54c281f54811\", \"metric_id\": \"b087d7e5063f51b954ffa2532100ca8e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.569143484658723, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T10:00:00\", \"bucket_end\": \"2024-03-21T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 99652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 145539.17492630315, \"training_avg\": 49330.0, \"training_stddev\": 32069.724975434387, \"training_set_size\": 15.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 27.68 hours ago. Usually the table is updated within 13.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 106852.0, \"average\": 52925.125, \"min_value\": 0.0, \"max_value\": 155396.16484175235, \"start_time\": \"2024-03-21T12:00:00\", \"end_time\": \"2024-03-21T14:00:00\", \"id\": \"3ef5514a0f816721df6c4f5b5b1fc67c\", \"metric_id\": \"77c6707348aaa89688f59099c60c81e2\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5787936303744001, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T12:00:00\", \"bucket_end\": \"2024-03-21T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 106852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 155396.16484175235, \"training_avg\": 52925.125, \"training_stddev\": 34157.01328058412, \"training_set_size\": 16.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 29.68 hours ago. Usually the table is updated within 14.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 114052.0, \"average\": 56520.82352941176, \"min_value\": 0.0, \"max_value\": 165250.71229862142, \"start_time\": \"2024-03-21T14:00:00\", \"end_time\": \"2024-03-21T16:00:00\", \"id\": \"e69a763e092344db657676f70b854722\", \"metric_id\": \"524240210e0f9cd1e93c515b7b238623\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.5873604890566215, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T14:00:00\", \"bucket_end\": \"2024-03-21T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 114052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 165250.71229862142, \"training_avg\": 56520.82352941176, \"training_stddev\": 36243.29625640322, \"training_set_size\": 17.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 31.68 hours ago. Usually the table is updated within 15.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 121252.0, \"average\": 60117.0, \"min_value\": 0.0, \"max_value\": 175103.20982535253, \"start_time\": \"2024-03-21T16:00:00\", \"end_time\": \"2024-03-21T18:00:00\", \"id\": \"c53e029dc5a20048582c7e554c5b919e\", \"metric_id\": \"8f6f32f91e3f1aba259abbd77201559d\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.595017352764003, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T16:00:00\", \"bucket_end\": \"2024-03-21T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 121252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 175103.20982535253, \"training_avg\": 60117.0, \"training_stddev\": 38328.73660845085, \"training_set_size\": 18.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 33.68 hours ago. Usually the table is updated within 16.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 128452.0, \"average\": 63713.57894736842, \"min_value\": 0.0, \"max_value\": 184953.9700153446, \"start_time\": \"2024-03-21T18:00:00\", \"end_time\": \"2024-03-21T20:00:00\", \"id\": \"e43711133e7aba7d5ceca99ec4eeb9c8\", \"metric_id\": \"697ebfdb4fbfaa179c21ee5187e4a236\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6019023152853704, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T18:00:00\", \"bucket_end\": \"2024-03-21T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 128452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 184953.9700153446, \"training_avg\": 63713.57894736842, \"training_stddev\": 40413.463689325385, \"training_set_size\": 19.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 35.68 hours ago. Usually the table is updated within 17.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 135652.0, \"average\": 67310.5, \"min_value\": 0.0, \"max_value\": 194803.24491123014, \"start_time\": \"2024-03-21T20:00:00\", \"end_time\": \"2024-03-21T22:00:00\", \"id\": \"f013e206a89917b8d2d086be5819bacb\", \"metric_id\": \"a40bf30350d6b0716c9b514505e2b2b0\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6081268008054355, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T20:00:00\", \"bucket_end\": \"2024-03-21T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 135652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 194803.24491123014, \"training_avg\": 67310.5, \"training_stddev\": 42497.58163707671, \"training_set_size\": 20.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-21T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 37.68 hours ago. Usually the table is updated within 18.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 142852.0, \"average\": 70907.71428571429, \"min_value\": 0.0, \"max_value\": 204651.24000351707, \"start_time\": \"2024-03-21T22:00:00\", \"end_time\": \"2024-03-22T00:00:00\", \"id\": \"70c6ff8b58d74c3525ad4e5cd14f19cb\", \"metric_id\": \"20dc16ba8d3252d62d6bf419350dbba6\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6137817212794423, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-21T22:00:00\", \"bucket_end\": \"2024-03-22T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 142852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 204651.24000351707, \"training_avg\": 70907.71428571429, \"training_stddev\": 44581.17523926759, \"training_set_size\": 21.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 39.68 hours ago. Usually the table is updated within 19.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 150052.0, \"average\": 74505.18181818182, \"min_value\": 0.0, \"max_value\": 214498.1245136815, \"start_time\": \"2024-03-22T00:00:00\", \"end_time\": \"2024-03-22T02:00:00\", \"id\": \"abc5c8f7f96add077abbb18053548cc6\", \"metric_id\": \"7efc401a86e1b883b59aa2dfc4cecc72\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6189419993722318, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T00:00:00\", \"bucket_end\": \"2024-03-22T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 150052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 214498.1245136815, \"training_avg\": 74505.18181818182, \"training_stddev\": 46664.314231833225, \"training_set_size\": 22.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 41.68 hours ago. Usually the table is updated within 20.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 157252.0, \"average\": 78102.86956521739, \"min_value\": 0.0, \"max_value\": 224344.0390645131, \"start_time\": \"2024-03-22T02:00:00\", \"end_time\": \"2024-03-22T04:00:00\", \"id\": \"7fc1a3e39165b51bb1d88795d46ae826\", \"metric_id\": \"44c00069c3b40ebffcea1af59aa607ad\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.623669942720824, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T02:00:00\", \"bucket_end\": \"2024-03-22T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 157252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 224344.0390645131, \"training_avg\": 78102.86956521739, \"training_stddev\": 48747.05649976524, \"training_set_size\": 23.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 43.68 hours ago. Usually the table is updated within 21.70 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 164452.0, \"average\": 81700.75, \"min_value\": 0.0, \"max_value\": 234189.10148135087, \"start_time\": \"2024-03-22T04:00:00\", \"end_time\": \"2024-03-22T06:00:00\", \"id\": \"fde216803a3602b9ca75c840bb53b277\", \"metric_id\": \"9f5c4e7632f726e7e11091c56c967a5b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.628017796692891, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T04:00:00\", \"bucket_end\": \"2024-03-22T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 164452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 234189.10148135087, \"training_avg\": 81700.75, \"training_stddev\": 50829.450493783625, \"training_set_size\": 24.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 45.68 hours ago. Usually the table is updated within 22.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 171652.0, \"average\": 85298.8, \"min_value\": 0.0, \"max_value\": 244033.41123523127, \"start_time\": \"2024-03-22T06:00:00\", \"end_time\": \"2024-03-22T08:00:00\", \"id\": \"c01b06ac5d9dd368de8b5694e08037d7\", \"metric_id\": \"8f52ab2c8c222faaf67729ece9fac07b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.63202970029073, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T06:00:00\", \"bucket_end\": \"2024-03-22T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 171652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 244033.41123523127, \"training_avg\": 85298.8, \"training_stddev\": 52911.537078410416, \"training_set_size\": 25.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 47.68 hours ago. Usually the table is updated within 23.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 178852.0, \"average\": 88897.0, \"min_value\": 0.0, \"max_value\": 253877.05288518974, \"start_time\": \"2024-03-22T08:00:00\", \"end_time\": \"2024-03-22T10:00:00\", \"id\": \"d184e9d681874f9721c41197ce7e4270\", \"metric_id\": \"7f79fb05f9e414118c04d38c6efcfb84\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6357432021663862, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T08:00:00\", \"bucket_end\": \"2024-03-22T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 178852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 253877.05288518974, \"training_avg\": 88897.0, \"training_stddev\": 54993.35096172991, \"training_set_size\": 26.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 49.68 hours ago. Usually the table is updated within 24.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 186052.0, \"average\": 92495.33333333333, \"min_value\": 0.0, \"max_value\": 263720.0987733829, \"start_time\": \"2024-03-22T10:00:00\", \"end_time\": \"2024-03-22T12:00:00\", \"id\": \"237120fbc090f17d9b461998f5c209aa\", \"metric_id\": \"354dfc9a47dd2816a7a18c88654b6b7c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6391904481730486, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T10:00:00\", \"bucket_end\": \"2024-03-22T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 186052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 263720.0987733829, \"training_avg\": 92495.33333333333, \"training_stddev\": 57074.921813349865, \"training_set_size\": 27.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 51.68 hours ago. Usually the table is updated within 25.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 193252.0, \"average\": 96093.78571428571, \"min_value\": 0.0, \"max_value\": 273562.6111557458, \"start_time\": \"2024-03-22T12:00:00\", \"end_time\": \"2024-03-22T14:00:00\", \"id\": \"22b7e1bc631e477f693e561cd37e4555\", \"metric_id\": \"ba9a2e51d49d5998a2a44d38ff68fe90\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6423991207024065, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T12:00:00\", \"bucket_end\": \"2024-03-22T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 193252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 273562.6111557458, \"training_avg\": 96093.78571428571, \"training_stddev\": 59156.275147153356, \"training_set_size\": 28.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 53.68 hours ago. Usually the table is updated within 26.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 200452.0, \"average\": 99692.3448275862, \"min_value\": 0.0, \"max_value\": 283404.6439015308, \"start_time\": \"2024-03-22T14:00:00\", \"end_time\": \"2024-03-22T16:00:00\", \"id\": \"c37d92e5baaac24ef151fd38478380f3\", \"metric_id\": \"66f650933d10472963830a48df820824\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6453931883764266, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T14:00:00\", \"bucket_end\": \"2024-03-22T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 200452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 283404.6439015308, \"training_avg\": 99692.3448275862, \"training_stddev\": 61237.43302464821, \"training_set_size\": 29.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 55.68 hours ago. Usually the table is updated within 27.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 207652.0, \"average\": 103291.0, \"min_value\": 0.0, \"max_value\": 293246.2438602315, \"start_time\": \"2024-03-22T16:00:00\", \"end_time\": \"2024-03-22T18:00:00\", \"id\": \"2f038dc53c5e312ec5ebda0f8e9b23c7\", \"metric_id\": \"1e1dd6a771c020b09cb20da10a22dc60\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.64819350936353, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T16:00:00\", \"bucket_end\": \"2024-03-22T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 207652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 293246.2438602315, \"training_avg\": 103291.0, \"training_stddev\": 63318.41462007715, \"training_set_size\": 30.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 57.68 hours ago. Usually the table is updated within 28.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 214852.0, \"average\": 106889.74193548386, \"min_value\": 0.0, \"max_value\": 303087.45196947135, \"start_time\": \"2024-03-22T18:00:00\", \"end_time\": \"2024-03-22T20:00:00\", \"id\": \"1d3c4bc56b1bf84c055660377f1eb2ed\", \"metric_id\": \"06470dbfd85ff3226e29897942ba0ff8\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6508183206493146, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T18:00:00\", \"bucket_end\": \"2024-03-22T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 214852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 303087.45196947135, \"training_avg\": 106889.74193548386, \"training_stddev\": 65399.23667799583, \"training_set_size\": 31.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 59.68 hours ago. Usually the table is updated within 29.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 222052.0, \"average\": 110488.5625, \"min_value\": 0.0, \"max_value\": 312928.3041594009, \"start_time\": \"2024-03-22T20:00:00\", \"end_time\": \"2024-03-22T22:00:00\", \"id\": \"44c13ef25e9dd44a4995b9129b2b5652\", \"metric_id\": \"bff93dba85899986157abb769ad88f11\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6532836376718305, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T20:00:00\", \"bucket_end\": \"2024-03-22T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 222052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 312928.3041594009, \"training_avg\": 110488.5625, \"training_stddev\": 67479.91388646698, \"training_set_size\": 32.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-22T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 61.68 hours ago. Usually the table is updated within 30.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 229252.0, \"average\": 114087.45454545454, \"min_value\": 0.0, \"max_value\": 322768.8320959289, \"start_time\": \"2024-03-22T22:00:00\", \"end_time\": \"2024-03-23T00:00:00\", \"id\": \"7500ea6be69820d371060633da3b8e14\", \"metric_id\": \"a3d8711a65e7a76f9498f7b33bfc9b6c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6556035829314515, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-22T22:00:00\", \"bucket_end\": \"2024-03-23T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 229252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 322768.8320959289, \"training_avg\": 114087.45454545454, \"training_stddev\": 69560.45918349146, \"training_set_size\": 33.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 63.68 hours ago. Usually the table is updated within 31.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 236452.0, \"average\": 117686.41176470589, \"min_value\": 0.0, \"max_value\": 332609.0637953431, \"start_time\": \"2024-03-23T00:00:00\", \"end_time\": \"2024-03-23T02:00:00\", \"id\": \"c5b263285f03b3d6e962ca91ae49b7ff\", \"metric_id\": \"f4dc94d59801a0135ccc8d6abb7be43d\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6577906578925534, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T00:00:00\", \"bucket_end\": \"2024-03-23T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 236452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 332609.0637953431, \"training_avg\": 117686.41176470589, \"training_stddev\": 71640.8840102124, \"training_set_size\": 34.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 65.68 hours ago. Usually the table is updated within 32.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 243652.0, \"average\": 121285.42857142857, \"min_value\": 0.0, \"max_value\": 342449.02413556556, \"start_time\": \"2024-03-23T02:00:00\", \"end_time\": \"2024-03-23T04:00:00\", \"id\": \"42e717350f5483566488c0d9336ff946\", \"metric_id\": \"e4b66fffe4ffdaf50df904429bd47aa9\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.659855969285217, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T02:00:00\", \"bucket_end\": \"2024-03-23T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 243652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 342449.02413556556, \"training_avg\": 121285.42857142857, \"training_stddev\": 73721.19852137899, \"training_set_size\": 35.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 67.68 hours ago. Usually the table is updated within 33.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 250852.0, \"average\": 124884.5, \"min_value\": 0.0, \"max_value\": 352288.7352837783, \"start_time\": \"2024-03-23T04:00:00\", \"end_time\": \"2024-03-23T06:00:00\", \"id\": \"99ccd9b35972e9326101b877794691d4\", \"metric_id\": \"91b4eaa8d3e75ac187dcf5cc273086e3\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6618094184939634, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T04:00:00\", \"bucket_end\": \"2024-03-23T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 250852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 352288.7352837783, \"training_avg\": 124884.5, \"training_stddev\": 75801.41176125943, \"training_set_size\": 36.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 69.68 hours ago. Usually the table is updated within 34.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 258052.0, \"average\": 128483.62162162163, \"min_value\": 0.0, \"max_value\": 362128.2170559601, \"start_time\": \"2024-03-23T06:00:00\", \"end_time\": \"2024-03-23T08:00:00\", \"id\": \"ae5dd46d3f26df71db802bb195d1ddd9\", \"metric_id\": \"d5e95764b66b09a0b732f32395f8d844\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6636598608777735, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T06:00:00\", \"bucket_end\": \"2024-03-23T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 258052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 362128.2170559601, \"training_avg\": 128483.62162162163, \"training_stddev\": 77881.53181144614, \"training_set_size\": 37.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 71.68 hours ago. Usually the table is updated within 35.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 265252.0, \"average\": 132082.7894736842, \"min_value\": 0.0, \"max_value\": 371967.4872206599, \"start_time\": \"2024-03-23T08:00:00\", \"end_time\": \"2024-03-23T10:00:00\", \"id\": \"b084d6eeec9064a756e2a86182ea7e7d\", \"metric_id\": \"ad361a6e9d83ef3482637c946c961c0c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6654152404516354, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T08:00:00\", \"bucket_end\": \"2024-03-23T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 265252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 371967.4872206599, \"training_avg\": 132082.7894736842, \"training_stddev\": 79961.56591565856, \"training_set_size\": 38.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 73.68 hours ago. Usually the table is updated within 36.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 272452.0, \"average\": 135682.0, \"min_value\": 0.0, \"max_value\": 381806.561756847, \"start_time\": \"2024-03-23T10:00:00\", \"end_time\": \"2024-03-23T12:00:00\", \"id\": \"fa06dc44590688169503457d0cf032c5\", \"metric_id\": \"fd76f291b832cee256c2554ade05769e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6670827042664524, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T10:00:00\", \"bucket_end\": \"2024-03-23T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 272452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 381806.561756847, \"training_avg\": 135682.0, \"training_stddev\": 82041.52058561567, \"training_set_size\": 39.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 75.68 hours ago. Usually the table is updated within 37.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 279652.0, \"average\": 139281.25, \"min_value\": 0.0, \"max_value\": 391645.45507373865, \"start_time\": \"2024-03-23T12:00:00\", \"end_time\": \"2024-03-23T14:00:00\", \"id\": \"d666c6ed99cb71f9e3f51ab66b8ea632\", \"metric_id\": \"a8ee5a49a5d73c0dda2fe2360f7da845\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6686686999725442, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T12:00:00\", \"bucket_end\": \"2024-03-23T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 279652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 391645.45507373865, \"training_avg\": 139281.25, \"training_stddev\": 84121.40169124621, \"training_set_size\": 40.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 77.68 hours ago. Usually the table is updated within 38.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 286852.0, \"average\": 142880.53658536586, \"min_value\": 0.0, \"max_value\": 401484.18019899307, \"start_time\": \"2024-03-23T14:00:00\", \"end_time\": \"2024-03-23T16:00:00\", \"id\": \"415096f5fe07a848e29b129157651944\", \"metric_id\": \"5bd3d55e49b2d7b38406ff654507a277\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.670179059384075, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T14:00:00\", \"bucket_end\": \"2024-03-23T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 286852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 401484.18019899307, \"training_avg\": 142880.53658536586, \"training_stddev\": 86201.21453787573, \"training_set_size\": 41.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 79.68 hours ago. Usually the table is updated within 39.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 294052.0, \"average\": 146479.85714285713, \"min_value\": 0.0, \"max_value\": 411322.74894045526, \"start_time\": \"2024-03-23T16:00:00\", \"end_time\": \"2024-03-23T18:00:00\", \"id\": \"6fd352d807947c4066039209142c9f5d\", \"metric_id\": \"d5bef06154f34663b96eb38be760ce85\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.671619070334602, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T16:00:00\", \"bucket_end\": \"2024-03-23T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 294052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 411322.74894045526, \"training_avg\": 146479.85714285713, \"training_stddev\": 88280.96393253272, \"training_set_size\": 42.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 81.68 hours ago. Usually the table is updated within 40.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 301252.0, \"average\": 150079.2093023256, \"min_value\": 0.0, \"max_value\": 421161.1720256937, \"start_time\": \"2024-03-23T18:00:00\", \"end_time\": \"2024-03-23T20:00:00\", \"id\": \"9617f70138560bc68a80bdbc1280db6a\", \"metric_id\": \"75a02e4b1115879fc3e4575f83bc794f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6729935386952568, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T18:00:00\", \"bucket_end\": \"2024-03-23T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 301252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 421161.1720256937, \"training_avg\": 150079.2093023256, \"training_stddev\": 90360.65424112268, \"training_set_size\": 43.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 83.68 hours ago. Usually the table is updated within 41.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 308452.0, \"average\": 153678.5909090909, \"min_value\": 0.0, \"max_value\": 430999.4592228057, \"start_time\": \"2024-03-23T20:00:00\", \"end_time\": \"2024-03-23T22:00:00\", \"id\": \"e5c86a87bad670e48210df54a029716c\", \"metric_id\": \"b4b7c5811176c58134ec3dde5dd12422\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6743068420926495, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T20:00:00\", \"bucket_end\": \"2024-03-23T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 308452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 430999.4592228057, \"training_avg\": 153678.5909090909, \"training_stddev\": 92440.28943790492, \"training_set_size\": 44.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-23T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 85.68 hours ago. Usually the table is updated within 42.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 315652.0, \"average\": 157278.0, \"min_value\": 0.0, \"max_value\": 440837.61944536463, \"start_time\": \"2024-03-23T22:00:00\", \"end_time\": \"2024-03-24T00:00:00\", \"id\": \"684589c54eaf52220c853fd7e397292f\", \"metric_id\": \"22c190e4f3fcde254c10b98e59453277\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6755629765949274, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-23T22:00:00\", \"bucket_end\": \"2024-03-24T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 315652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 440837.61944536463, \"training_avg\": 157278.0, \"training_stddev\": 94519.87314845488, \"training_set_size\": 45.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 87.68 hours ago. Usually the table is updated within 43.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 322852.0, \"average\": 160877.4347826087, \"min_value\": 0.0, \"max_value\": 450675.660843882, \"start_time\": \"2024-03-24T00:00:00\", \"end_time\": \"2024-03-24T02:00:00\", \"id\": \"974f5e67f5c00bf4c0943e51199c4f3d\", \"metric_id\": \"238095b788fae35a8d7ac7acf8ddea43\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6767655974175388, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T00:00:00\", \"bucket_end\": \"2024-03-24T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 322852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 450675.660843882, \"training_avg\": 160877.4347826087, \"training_stddev\": 96599.4086870911, \"training_set_size\": 46.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 89.68 hours ago. Usually the table is updated within 44.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 330052.0, \"average\": 164476.89361702127, \"min_value\": 0.0, \"max_value\": 460513.5908857674, \"start_time\": \"2024-03-24T02:00:00\", \"end_time\": \"2024-03-24T04:00:00\", \"id\": \"483e924820111ef98907d24ba8af826e\", \"metric_id\": \"48f572a6903aa470eba9e861fd775c6c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6779180545241734, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T02:00:00\", \"bucket_end\": \"2024-03-24T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 330052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 460513.5908857674, \"training_avg\": 164476.89361702127, \"training_stddev\": 98678.89908958205, \"training_set_size\": 47.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 91.68 hours ago. Usually the table is updated within 45.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 337252.0, \"average\": 168076.375, \"min_value\": 0.0, \"max_value\": 470351.41642543755, \"start_time\": \"2024-03-24T04:00:00\", \"end_time\": \"2024-03-24T06:00:00\", \"id\": \"f4f2aa39bd2cf007b5ee6f1af4e7703c\", \"metric_id\": \"bd0005fe8afafa97d44172062f84bb20\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.679023423854834, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T04:00:00\", \"bucket_end\": \"2024-03-24T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 337252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 470351.41642543755, \"training_avg\": 168076.375, \"training_stddev\": 100758.34714181253, \"training_set_size\": 48.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 93.68 hours ago. Usually the table is updated within 46.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 344452.0, \"average\": 171675.8775510204, \"min_value\": 0.0, \"max_value\": 480189.1437659634, \"start_time\": \"2024-03-24T06:00:00\", \"end_time\": \"2024-03-24T08:00:00\", \"id\": \"bea48e0851f2b94e2a337354ef6aa873\", \"metric_id\": \"effe43904ba7377627f1fa4466947a3f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.68008453479539, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T06:00:00\", \"bucket_end\": \"2024-03-24T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 344452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 480189.1437659634, \"training_avg\": 171675.8775510204, \"training_stddev\": 102837.75540498098, \"training_set_size\": 49.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 95.68 hours ago. Usually the table is updated within 47.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 351652.0, \"average\": 175275.4, \"min_value\": 0.0, \"max_value\": 490026.778713422, \"start_time\": \"2024-03-24T08:00:00\", \"end_time\": \"2024-03-24T10:00:00\", \"id\": \"0bf9743ecd82bc99fddacd2893eba9e8\", \"metric_id\": \"d0f15b785c90a092f0072b343bc51839\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6811039944062243, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T08:00:00\", \"bucket_end\": \"2024-03-24T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 351652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 490026.778713422, \"training_avg\": 175275.4, \"training_stddev\": 104917.12623780734, \"training_set_size\": 50.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 97.68 hours ago. Usually the table is updated within 48.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 358852.0, \"average\": 178874.9411764706, \"min_value\": 0.0, \"max_value\": 499864.3266249434, \"start_time\": \"2024-03-24T10:00:00\", \"end_time\": \"2024-03-24T12:00:00\", \"id\": \"0623beb8519c9cea493cf43ec49fe367\", \"metric_id\": \"d5e2deaeaa08ab90f37cbfae9add54a2\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6820842088476513, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T10:00:00\", \"bucket_end\": \"2024-03-24T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 358852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 499864.3266249434, \"training_avg\": 178874.9411764706, \"training_stddev\": 106996.4618161576, \"training_set_size\": 51.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 99.68 hours ago. Usually the table is updated within 49.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 366052.0, \"average\": 182474.5, \"min_value\": 0.0, \"max_value\": 509701.79245128686, \"start_time\": \"2024-03-24T12:00:00\", \"end_time\": \"2024-03-24T14:00:00\", \"id\": \"4276df7250a4eea51e28330e5328e43d\", \"metric_id\": \"f813c134058f2e11bf89d6d9e4d7c240\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.683027402373491, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T12:00:00\", \"bucket_end\": \"2024-03-24T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 366052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 509701.79245128686, \"training_avg\": 182474.5, \"training_stddev\": 109075.76415042895, \"training_set_size\": 52.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 101.68 hours ago. Usually the table is updated within 50.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 373252.0, \"average\": 186074.0754716981, \"min_value\": 0.0, \"max_value\": 519539.1807746623, \"start_time\": \"2024-03-24T14:00:00\", \"end_time\": \"2024-03-24T16:00:00\", \"id\": \"99463778a850e5c8b62968ebb39673c4\", \"metric_id\": \"5ae0ff5df53f08a7b2ff3f7a8eed5d53\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.683935634208963, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T14:00:00\", \"bucket_end\": \"2024-03-24T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 373252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 519539.1807746623, \"training_avg\": 186074.0754716981, \"training_stddev\": 111155.03510098807, \"training_set_size\": 53.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 103.68 hours ago. Usually the table is updated within 51.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 380452.0, \"average\": 189673.66666666666, \"min_value\": 0.0, \"max_value\": 529376.4958424037, \"start_time\": \"2024-03-24T16:00:00\", \"end_time\": \"2024-03-24T18:00:00\", \"id\": \"41711be65901e37ed88a8269777cc5ea\", \"metric_id\": \"e3cbb5289307db4faed1c1c63d211518\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6848108135829398, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T16:00:00\", \"bucket_end\": \"2024-03-24T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 380452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 529376.4958424037, \"training_avg\": 189673.66666666666, \"training_stddev\": 113234.27639191237, \"training_set_size\": 54.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 105.68 hours ago. Usually the table is updated within 52.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 387652.0, \"average\": 193273.27272727274, \"min_value\": 0.0, \"max_value\": 539213.7415970166, \"start_time\": \"2024-03-24T18:00:00\", \"end_time\": \"2024-03-24T20:00:00\", \"id\": \"4fecaf52e8b75e88b3c52b718030b9f6\", \"metric_id\": \"17c8edbe6793280062b83b1c35dd37a8\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6856547131458874, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T18:00:00\", \"bucket_end\": \"2024-03-24T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 387652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 539213.7415970166, \"training_avg\": 193273.27272727274, \"training_stddev\": 115313.48962324794, \"training_set_size\": 55.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 107.68 hours ago. Usually the table is updated within 53.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 394852.0, \"average\": 196872.89285714287, \"min_value\": 0.0, \"max_value\": 549050.921703046, \"start_time\": \"2024-03-24T20:00:00\", \"end_time\": \"2024-03-24T22:00:00\", \"id\": \"efad80889bfd225da377575b3600a3ed\", \"metric_id\": \"1e331e90cb3fcdda46d67eebb0e0cf8d\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.686468980972266, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T20:00:00\", \"bucket_end\": \"2024-03-24T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 394852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 549050.921703046, \"training_avg\": 196872.89285714287, \"training_stddev\": 117392.67628196768, \"training_set_size\": 56.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-24T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 109.68 hours ago. Usually the table is updated within 54.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 402052.0, \"average\": 200472.52631578947, \"min_value\": 0.0, \"max_value\": 558888.0395711524, \"start_time\": \"2024-03-24T22:00:00\", \"end_time\": \"2024-03-25T00:00:00\", \"id\": \"2762fc5caeaa564f941271aa1aac365d\", \"metric_id\": \"e45cd252f3ad48bc597eb94ae5d598a1\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.687255151318657, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-24T22:00:00\", \"bucket_end\": \"2024-03-25T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 402052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 558888.0395711524, \"training_avg\": 200472.52631578947, \"training_stddev\": 119471.83775178765, \"training_set_size\": 57.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 111.68 hours ago. Usually the table is updated within 55.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 409252.0, \"average\": 204072.1724137931, \"min_value\": 0.0, \"max_value\": 568725.0983797275, \"start_time\": \"2024-03-25T00:00:00\", \"end_time\": \"2024-03-25T02:00:00\", \"id\": \"977e32741e6566557e87a6e19e9917be\", \"metric_id\": \"8a2a9aa4374fa581fd31ea5cf231a402\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6880146542856038, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T00:00:00\", \"bucket_end\": \"2024-03-25T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 409252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 568725.0983797275, \"training_avg\": 204072.1724137931, \"training_stddev\": 121550.97532197814, \"training_set_size\": 58.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 113.68 hours ago. Usually the table is updated within 56.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 416452.0, \"average\": 207671.83050847458, \"min_value\": 0.0, \"max_value\": 578562.101094337, \"start_time\": \"2024-03-25T02:00:00\", \"end_time\": \"2024-03-25T04:00:00\", \"id\": \"3a3ef4abd6c12b4290b37ccd1922620b\", \"metric_id\": \"a6e601317f82e792d18b7d828ae93f36\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6887488245113624, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T02:00:00\", \"bucket_end\": \"2024-03-25T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 416452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 578562.101094337, \"training_avg\": 207671.83050847458, \"training_stddev\": 123630.09019528747, \"training_set_size\": 59.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 115.68 hours ago. Usually the table is updated within 57.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 423652.0, \"average\": 211271.5, \"min_value\": 0.0, \"max_value\": 588399.0504852437, \"start_time\": \"2024-03-25T04:00:00\", \"end_time\": \"2024-03-25T06:00:00\", \"id\": \"e8d8d13e6d17950d05c7992856ef097d\", \"metric_id\": \"e18cb74e8c9bc10432e43521b324b709\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6894589090089036, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T04:00:00\", \"bucket_end\": \"2024-03-25T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 423652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 588399.0504852437, \"training_avg\": 211271.5, \"training_stddev\": 125709.18349508122, \"training_set_size\": 60.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 117.68 hours ago. Usually the table is updated within 58.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 430852.0, \"average\": 214871.18032786885, \"min_value\": 0.0, \"max_value\": 598235.9491432263, \"start_time\": \"2024-03-25T06:00:00\", \"end_time\": \"2024-03-25T08:00:00\", \"id\": \"6fc098b7ef769907a5d369c8f9d3e270\", \"metric_id\": \"9b3867ead5dc6c86732be231da3e4bc9\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6901460742431091, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T06:00:00\", \"bucket_end\": \"2024-03-25T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 430852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 598235.9491432263, \"training_avg\": 214871.18032786885, \"training_stddev\": 127788.25627178581, \"training_set_size\": 61.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 119.68 hours ago. Usually the table is updated within 59.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 438052.0, \"average\": 218470.87096774194, \"min_value\": 0.0, \"max_value\": 608072.7994938856, \"start_time\": \"2024-03-25T08:00:00\", \"end_time\": \"2024-03-25T10:00:00\", \"id\": \"fccc5cbde66a1019bb5cb6afaf5d1fae\", \"metric_id\": \"80e33f0fc8719b4c33b9c596573697d7\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6908114125327547, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T08:00:00\", \"bucket_end\": \"2024-03-25T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 438052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 608072.7994938856, \"training_avg\": 218470.87096774194, \"training_stddev\": 129867.30950871453, \"training_set_size\": 62.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 121.68 hours ago. Usually the table is updated within 60.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 445252.0, \"average\": 222070.57142857142, \"min_value\": 0.0, \"max_value\": 617909.6038106028, \"start_time\": \"2024-03-25T10:00:00\", \"end_time\": \"2024-03-25T12:00:00\", \"id\": \"e0ccba2de022f9efe007c980fc7cfb72\", \"metric_id\": \"3962bd9c0a1e10911ad9c09b62daeb38\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6914559478512887, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T10:00:00\", \"bucket_end\": \"2024-03-25T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 445252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 617909.6038106028, \"training_avg\": 222070.57142857142, \"training_stddev\": 131946.34412734376, \"training_set_size\": 63.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 123.68 hours ago. Usually the table is updated within 61.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 452452.0, \"average\": 225670.28125, \"min_value\": 0.0, \"max_value\": 627746.3642262976, \"start_time\": \"2024-03-25T12:00:00\", \"end_time\": \"2024-03-25T14:00:00\", \"id\": \"2ace1cb90b59e484b0f7077522ff694f\", \"metric_id\": \"5d7fe3cdc6bf944daecc847df5520c73\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6920806410912694, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T12:00:00\", \"bucket_end\": \"2024-03-25T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 452452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 627746.3642262976, \"training_avg\": 225670.28125, \"training_stddev\": 134025.3609920992, \"training_set_size\": 64.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 125.68 hours ago. Usually the table is updated within 62.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 459652.0, \"average\": 229270.0, \"min_value\": 0.0, \"max_value\": 637583.082744112, \"start_time\": \"2024-03-25T14:00:00\", \"end_time\": \"2024-03-25T16:00:00\", \"id\": \"a0393489200ee0c836613e3a0a95f146\", \"metric_id\": \"b7d6b08f1e1661c4c88e71d1fd378589\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6926863948494597, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T14:00:00\", \"bucket_end\": \"2024-03-25T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 459652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 637583.082744112, \"training_avg\": 229270.0, \"training_stddev\": 136104.36091470398, \"training_set_size\": 65.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 127.68 hours ago. Usually the table is updated within 63.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 466852.0, \"average\": 232869.72727272726, \"min_value\": 0.0, \"max_value\": 647419.7612471341, \"start_time\": \"2024-03-25T16:00:00\", \"end_time\": \"2024-03-25T18:00:00\", \"id\": \"0f3ed34617749f1b79f063288a943f02\", \"metric_id\": \"e526279d87d1e79271a220305fa95899\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6932740577827443, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T16:00:00\", \"bucket_end\": \"2024-03-25T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 466852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 647419.7612471341, \"training_avg\": 232869.72727272726, \"training_stddev\": 138183.34465813558, \"training_set_size\": 66.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 129.68 hours ago. Usually the table is updated within 64.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 474052.0, \"average\": 236469.46268656716, \"min_value\": 0.0, \"max_value\": 657256.40150726, \"start_time\": \"2024-03-25T18:00:00\", \"end_time\": \"2024-03-25T20:00:00\", \"id\": \"6a57811e8ec9a4920e7eee338d503c8c\", \"metric_id\": \"13d11562e6fa59526b0e8eba7eff1965\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6938444285791314, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T18:00:00\", \"bucket_end\": \"2024-03-25T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 474052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 657256.40150726, \"training_avg\": 236469.46268656716, \"training_stddev\": 140262.31294023097, \"training_set_size\": 67.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 131.68 hours ago. Usually the table is updated within 65.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 481252.0, \"average\": 240069.20588235295, \"min_value\": 0.0, \"max_value\": 667093.0051932826, \"start_time\": \"2024-03-25T20:00:00\", \"end_time\": \"2024-03-25T22:00:00\", \"id\": \"ec92edb1f28a60df57e409c88141c69f\", \"metric_id\": \"5a0bf2cd2e1ae758677b6532a14e1089\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6943982595829568, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T20:00:00\", \"bucket_end\": \"2024-03-25T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 481252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 667093.0051932826, \"training_avg\": 240069.20588235295, \"training_stddev\": 142341.26643697658, \"training_set_size\": 68.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-25T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 133.68 hours ago. Usually the table is updated within 66.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 488452.0, \"average\": 243668.95652173914, \"min_value\": 0.0, \"max_value\": 676929.5738782835, \"start_time\": \"2024-03-25T22:00:00\", \"end_time\": \"2024-03-26T00:00:00\", \"id\": \"40c229d73c1dd10fe54f8e5e0b2beab8\", \"metric_id\": \"5d835a0565c6e468abab79bc2303757f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6949362601089188, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-25T22:00:00\", \"bucket_end\": \"2024-03-26T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 488452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 676929.5738782835, \"training_avg\": 243668.95652173914, \"training_stddev\": 144420.2057855148, \"training_set_size\": 69.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 135.68 hours ago. Usually the table is updated within 67.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 495652.0, \"average\": 247268.7142857143, \"min_value\": 0.0, \"max_value\": 686766.1090463983, \"start_time\": \"2024-03-26T00:00:00\", \"end_time\": \"2024-03-26T02:00:00\", \"id\": \"f32d6915eadd10851e07202b5ab4e462\", \"metric_id\": \"a89cc055451440cf81172628546ed582\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6954590994756806, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T00:00:00\", \"bucket_end\": \"2024-03-26T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 495652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 686766.1090463983, \"training_avg\": 247268.7142857143, \"training_stddev\": 146499.13158689468, \"training_set_size\": 70.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 137.68 hours ago. Usually the table is updated within 68.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 502852.0, \"average\": 250868.47887323942, \"min_value\": 0.0, \"max_value\": 696602.612099017, \"start_time\": \"2024-03-26T02:00:00\", \"end_time\": \"2024-03-26T04:00:00\", \"id\": \"eb3f663b34040ca7174cea10f986bc45\", \"metric_id\": \"b22ae41242fc26c491d3556badbb5f2b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6959674097863409, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T02:00:00\", \"bucket_end\": \"2024-03-26T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 502852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 696602.612099017, \"training_avg\": 250868.47887323942, \"training_stddev\": 148578.0444085925, \"training_set_size\": 71.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 139.68 hours ago. Usually the table is updated within 69.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 510052.0, \"average\": 254468.25, \"min_value\": 0.0, \"max_value\": 706439.0843604706, \"start_time\": \"2024-03-26T04:00:00\", \"end_time\": \"2024-03-26T06:00:00\", \"id\": \"cd0dce61e53c98babf82fc40046c8479\", \"metric_id\": \"b2dad3af13077616ef4e9a4af23f8be3\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6964617884800843, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T04:00:00\", \"bucket_end\": \"2024-03-26T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 510052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 706439.0843604706, \"training_avg\": 254468.25, \"training_stddev\": 150656.94478682356, \"training_set_size\": 72.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 141.68 hours ago. Usually the table is updated within 70.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 517252.0, \"average\": 258068.02739726027, \"min_value\": 0.0, \"max_value\": 716275.5270832576, \"start_time\": \"2024-03-26T06:00:00\", \"end_time\": \"2024-03-26T08:00:00\", \"id\": \"9cec9658adea37457c7765d5057ee16a\", \"metric_id\": \"c6185a84b9ce2bbf06c186f7a1088fc1\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6969428006766887, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T06:00:00\", \"bucket_end\": \"2024-03-26T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 517252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 716275.5270832576, \"training_avg\": 258068.02739726027, \"training_stddev\": 152735.83322866575, \"training_set_size\": 73.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 143.68 hours ago. Usually the table is updated within 71.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 524452.0, \"average\": 261667.8108108108, \"min_value\": 0.0, \"max_value\": 726111.9414528483, \"start_time\": \"2024-03-26T08:00:00\", \"end_time\": \"2024-03-26T10:00:00\", \"id\": \"902ccdc637eddddb8675d7e5d8b13115\", \"metric_id\": \"9c7d3b7bfe1d293669c4fa5da6019e49\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6974109813332474, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T08:00:00\", \"bucket_end\": \"2024-03-26T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 524452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 726111.9414528483, \"training_avg\": 261667.8108108108, \"training_stddev\": 154814.71021401248, \"training_set_size\": 74.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 145.68 hours ago. Usually the table is updated within 72.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 531652.0, \"average\": 265267.6, \"min_value\": 0.0, \"max_value\": 735948.3285921105, \"start_time\": \"2024-03-26T10:00:00\", \"end_time\": \"2024-03-26T12:00:00\", \"id\": \"da658c1caa66a3c1779514a42b28a1e1\", \"metric_id\": \"8675adccba2533f1710e62a8bf11b05a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6978668372304275, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T10:00:00\", \"bucket_end\": \"2024-03-26T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 531652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 735948.3285921105, \"training_avg\": 265267.6, \"training_stddev\": 156893.5761973702, \"training_set_size\": 75.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 147.68 hours ago. Usually the table is updated within 73.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 538852.0, \"average\": 268867.3947368421, \"min_value\": 0.0, \"max_value\": 745784.689565389, \"start_time\": \"2024-03-26T12:00:00\", \"end_time\": \"2024-03-26T14:00:00\", \"id\": \"3ab1d29f982c045d13c8421aef2ea538\", \"metric_id\": \"72a3eaa676401e11581ceaf05516c383\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.698310848803784, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T12:00:00\", \"bucket_end\": \"2024-03-26T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 538852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 745784.689565389, \"training_avg\": 268867.3947368421, \"training_stddev\": 158972.4316095156, \"training_set_size\": 76.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 149.68 hours ago. Usually the table is updated within 74.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 546052.0, \"average\": 272467.1948051948, \"min_value\": 0.0, \"max_value\": 755621.0253822675, \"start_time\": \"2024-03-26T14:00:00\", \"end_time\": \"2024-03-26T16:00:00\", \"id\": \"c6ab571a0b9f2a96a0aeb4ebb9e0f7e3\", \"metric_id\": \"77fe859ddcff40fd4416a2ceff33fe1d\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6987434718340468, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T14:00:00\", \"bucket_end\": \"2024-03-26T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 546052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 755621.0253822675, \"training_avg\": 272467.1948051948, \"training_stddev\": 161051.27685902428, \"training_set_size\": 77.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 151.68 hours ago. Usually the table is updated within 75.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 553252.0, \"average\": 276067.0, \"min_value\": 0.0, \"max_value\": 765457.3370010487, \"start_time\": \"2024-03-26T16:00:00\", \"end_time\": \"2024-03-26T18:00:00\", \"id\": \"1d6099b05f16818d8af35ca4a469c9ca\", \"metric_id\": \"f1c8f6917098042bc8c898e89904fcf7\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.699165139008901, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T16:00:00\", \"bucket_end\": \"2024-03-26T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 553252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 765457.3370010487, \"training_avg\": 276067.0, \"training_stddev\": 163130.11233368292, \"training_set_size\": 78.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 153.68 hours ago. Usually the table is updated within 76.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 560452.0, \"average\": 279666.8101265823, \"min_value\": 0.0, \"max_value\": 775293.6253319674, \"start_time\": \"2024-03-26T18:00:00\", \"end_time\": \"2024-03-26T20:00:00\", \"id\": \"a3e69622e4543bda9fc9f8d532778ea5\", \"metric_id\": \"dc53aa5d5b27f670c0f755eb58347601\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.699576261367508, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T18:00:00\", \"bucket_end\": \"2024-03-26T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 560452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 775293.6253319674, \"training_avg\": 279666.8101265823, \"training_stddev\": 165208.93840179502, \"training_set_size\": 79.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 155.68 hours ago. Usually the table is updated within 77.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 567652.0, \"average\": 283266.625, \"min_value\": 0.0, \"max_value\": 785129.8912401684, \"start_time\": \"2024-03-26T20:00:00\", \"end_time\": \"2024-03-26T22:00:00\", \"id\": \"3f688b4b0f5048cc50ca3f8f586ac1d8\", \"metric_id\": \"974ec20f168499bf018c8886b6bcd31e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.6999772296379216, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T20:00:00\", \"bucket_end\": \"2024-03-26T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 567652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 785129.8912401684, \"training_avg\": 283266.625, \"training_stddev\": 167287.75541338944, \"training_set_size\": 80.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-26T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 157.68 hours ago. Usually the table is updated within 78.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 574852.0, \"average\": 286866.44444444444, \"min_value\": 0.0, \"max_value\": 794966.135548464, \"start_time\": \"2024-03-26T22:00:00\", \"end_time\": \"2024-03-27T00:00:00\", \"id\": \"276513355b77c3ce0f16f20eec3f5560\", \"metric_id\": \"88e0c06fbc30fb81e2a8fd8b708e569b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7003684154765508, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-26T22:00:00\", \"bucket_end\": \"2024-03-27T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 574852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 794966.135548464, \"training_avg\": 286866.44444444444, \"training_stddev\": 169366.56370133985, \"training_set_size\": 81.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 159.68 hours ago. Usually the table is updated within 79.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 582052.0, \"average\": 290466.26829268294, \"min_value\": 0.0, \"max_value\": 804802.3590398927, \"start_time\": \"2024-03-27T00:00:00\", \"end_time\": \"2024-03-27T02:00:00\", \"id\": \"db44574173c3fd48739f6f57521699af\", \"metric_id\": \"8223e1a3e544dada7ce4d59427e2aabf\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7007501726179355, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T00:00:00\", \"bucket_end\": \"2024-03-27T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 582052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 804802.3590398927, \"training_avg\": 290466.26829268294, \"training_stddev\": 171445.36358240325, \"training_set_size\": 82.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 161.68 hours ago. Usually the table is updated within 80.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 589252.0, \"average\": 294066.0963855422, \"min_value\": 0.0, \"max_value\": 814638.5624600934, \"start_time\": \"2024-03-27T02:00:00\", \"end_time\": \"2024-03-27T04:00:00\", \"id\": \"813d76656f087d10a8cff3be474b4008\", \"metric_id\": \"a45bca4667514044840c41fdcb6b0ec0\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7011228379423213, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T02:00:00\", \"bucket_end\": \"2024-03-27T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 589252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 814638.5624600934, \"training_avg\": 294066.0963855422, \"training_stddev\": 173524.15535818375, \"training_set_size\": 83.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 163.68 hours ago. Usually the table is updated within 81.69 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 596452.0, \"average\": 297665.9285714286, \"min_value\": 0.0, \"max_value\": 824474.7465195123, \"start_time\": \"2024-03-27T04:00:00\", \"end_time\": \"2024-03-27T06:00:00\", \"id\": \"8ae166c53addc17d5d28bb83c9a7a090\", \"metric_id\": \"21479547046039f305e59167b0ddfc37\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7014867324678098, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T04:00:00\", \"bucket_end\": \"2024-03-27T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 596452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 824474.7465195123, \"training_avg\": 297665.9285714286, \"training_stddev\": 175602.9393160279, \"training_set_size\": 84.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 165.68 hours ago. Usually the table is updated within 82.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 603652.0, \"average\": 301265.76470588235, \"min_value\": 0.0, \"max_value\": 834310.9118954549, \"start_time\": \"2024-03-27T06:00:00\", \"end_time\": \"2024-03-27T08:00:00\", \"id\": \"4d5d2c9c3fc861f8f61a201ffbcd8c6a\", \"metric_id\": \"7a7e0336c561ff423b05ee69670cdfca\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7018421622732276, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T06:00:00\", \"bucket_end\": \"2024-03-27T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 603652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 834310.9118954549, \"training_avg\": 301265.76470588235, \"training_stddev\": 177681.7157298575, \"training_set_size\": 85.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 167.68 hours ago. Usually the table is updated within 83.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 610852.0, \"average\": 304865.6046511628, \"min_value\": 0.0, \"max_value\": 844147.0592339963, \"start_time\": \"2024-03-27T08:00:00\", \"end_time\": \"2024-03-27T10:00:00\", \"id\": \"df6fedae8601d93f8bbe537fe9c0de02\", \"metric_id\": \"5f980af328caa06e70b45b2f2a77ac76\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7021894193572962, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T08:00:00\", \"bucket_end\": \"2024-03-27T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 610852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 844147.0592339963, \"training_avg\": 304865.6046511628, \"training_stddev\": 179760.48486094453, \"training_set_size\": 86.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 169.68 hours ago. Usually the table is updated within 84.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 618052.0, \"average\": 308465.4482758621, \"min_value\": 0.0, \"max_value\": 853983.1891517614, \"start_time\": \"2024-03-27T10:00:00\", \"end_time\": \"2024-03-27T12:00:00\", \"id\": \"cccd4949efb0a6d5cb668f271d18e967\", \"metric_id\": \"4eb36f31851e32a02f3d710fc3f98732\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7025287824391742, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T10:00:00\", \"bucket_end\": \"2024-03-27T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 618052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 853983.1891517614, \"training_avg\": 308465.4482758621, \"training_stddev\": 181839.2469586331, \"training_set_size\": 87.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 171.68 hours ago. Usually the table is updated within 85.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 625252.0, \"average\": 312065.29545454547, \"min_value\": 0.0, \"max_value\": 863819.3022375831, \"start_time\": \"2024-03-27T12:00:00\", \"end_time\": \"2024-03-27T14:00:00\", \"id\": \"ccecb0b113241774b871ba806c8b8af2\", \"metric_id\": \"45a2c94744d81047a34e5fc90a4fca28\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7028605177049854, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T12:00:00\", \"bucket_end\": \"2024-03-27T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 625252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 863819.3022375831, \"training_avg\": 312065.29545454547, \"training_stddev\": 183918.00226101256, \"training_set_size\": 88.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 173.68 hours ago. Usually the table is updated within 86.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 632452.0, \"average\": 315665.1460674157, \"min_value\": 0.0, \"max_value\": 873655.3990540515, \"start_time\": \"2024-03-27T14:00:00\", \"end_time\": \"2024-03-27T16:00:00\", \"id\": \"2aaf5e2a6f676c78a9176c2ec4d87f99\", \"metric_id\": \"dd1d0006b3efc1ef50b6d6a525cbf2b7\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7031848795045432, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T14:00:00\", \"bucket_end\": \"2024-03-27T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 632452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 873655.3990540515, \"training_avg\": 315665.1460674157, \"training_stddev\": 185996.75099554527, \"training_set_size\": 89.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 175.68 hours ago. Usually the table is updated within 87.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 639652.0, \"average\": 319265.0, \"min_value\": 0.0, \"max_value\": 883491.4801389598, \"start_time\": \"2024-03-27T16:00:00\", \"end_time\": \"2024-03-27T18:00:00\", \"id\": \"a28587549d16f978cfd11d36cdfb665e\", \"metric_id\": \"048dad20308e1ab8914e640e319aa7c5\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7035021110020958, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T16:00:00\", \"bucket_end\": \"2024-03-27T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 639652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 883491.4801389598, \"training_avg\": 319265.0, \"training_stddev\": 188075.49337965326, \"training_set_size\": 90.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 177.68 hours ago. Usually the table is updated within 88.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 646852.0, \"average\": 322864.85714285716, \"min_value\": 0.0, \"max_value\": 893327.5460066551, \"start_time\": \"2024-03-27T18:00:00\", \"end_time\": \"2024-03-27T20:00:00\", \"id\": \"3ed20b05a779847743c469e1544ed03c\", \"metric_id\": \"ccc42a56327b02cfc9e80fc3e079bafc\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7038124447846075, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T18:00:00\", \"bucket_end\": \"2024-03-27T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 646852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 893327.5460066551, \"training_avg\": 322864.85714285716, \"training_stddev\": 190154.229621266, \"training_set_size\": 91.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 179.68 hours ago. Usually the table is updated within 89.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 654052.0, \"average\": 326464.7173913043, \"min_value\": 0.0, \"max_value\": 903163.5971493028, \"start_time\": \"2024-03-27T20:00:00\", \"end_time\": \"2024-03-27T22:00:00\", \"id\": \"7abb71629ef6b99bf925f41202a2eac7\", \"metric_id\": \"284890a64de0885d13093d65eca8e379\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7041161034307637, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T20:00:00\", \"bucket_end\": \"2024-03-27T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 654052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 903163.5971493028, \"training_avg\": 326464.7173913043, \"training_stddev\": 192232.95991933285, \"training_set_size\": 92.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-27T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 181.68 hours ago. Usually the table is updated within 90.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 661252.0, \"average\": 330064.5806451613, \"min_value\": 0.0, \"max_value\": 912999.6340380702, \"start_time\": \"2024-03-27T22:00:00\", \"end_time\": \"2024-03-28T00:00:00\", \"id\": \"9647ef605a6e8f43322a6cf0edca6075\", \"metric_id\": \"14647f1ddf103d1feb90554333996afa\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7044133000436275, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-27T22:00:00\", \"bucket_end\": \"2024-03-28T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 661252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 912999.6340380702, \"training_avg\": 330064.5806451613, \"training_stddev\": 194311.684464303, \"training_set_size\": 93.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 183.68 hours ago. Usually the table is updated within 91.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 668452.0, \"average\": 333664.44680851063, \"min_value\": 0.0, \"max_value\": 922835.6571242334, \"start_time\": \"2024-03-28T00:00:00\", \"end_time\": \"2024-03-28T02:00:00\", \"id\": \"b1a02f35184aff236994c4f1e61649aa\", \"metric_id\": \"599b6f045d95b5c8b9f42eac913195fe\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7047042387496398, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T00:00:00\", \"bucket_end\": \"2024-03-28T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 668452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 922835.6571242334, \"training_avg\": 333664.44680851063, \"training_stddev\": 196390.40343857426, \"training_set_size\": 94.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 185.68 hours ago. Usually the table is updated within 92.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 675652.0, \"average\": 337264.3157894737, \"min_value\": 0.0, \"max_value\": 932671.6668402171, \"start_time\": \"2024-03-28T02:00:00\", \"end_time\": \"2024-03-28T04:00:00\", \"id\": \"bc61057f983ad283c474bc1694e3a1bd\", \"metric_id\": \"2b21e53b7a7182b1856ea55e809e8d8c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.704989115166403, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T02:00:00\", \"bucket_end\": \"2024-03-28T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 675652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 932671.6668402171, \"training_avg\": 337264.3157894737, \"training_stddev\": 198469.11701691448, \"training_set_size\": 95.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 187.68 hours ago. Usually the table is updated within 93.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 682852.0, \"average\": 340864.1875, \"min_value\": 0.0, \"max_value\": 942507.6636005683, \"start_time\": \"2024-03-28T04:00:00\", \"end_time\": \"2024-03-28T06:00:00\", \"id\": \"ea60c7f63ec1693b442a76f9928626fc\", \"metric_id\": \"5b7d25f5e4566863b143461f791226b5\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7052681168415165, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T04:00:00\", \"bucket_end\": \"2024-03-28T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 682852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 942507.6636005683, \"training_avg\": 340864.1875, \"training_stddev\": 200547.8253668561, \"training_set_size\": 96.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 189.68 hours ago. Usually the table is updated within 94.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 690052.0, \"average\": 344464.0618556701, \"min_value\": 0.0, \"max_value\": 952343.647802871, \"start_time\": \"2024-03-28T06:00:00\", \"end_time\": \"2024-03-28T08:00:00\", \"id\": \"e16d1d2597153faa5739ae54e779393c\", \"metric_id\": \"ecc55797c48ffb6bd1e8f75c3ef1ce70\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.705541423664523, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T06:00:00\", \"bucket_end\": \"2024-03-28T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 690052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 952343.647802871, \"training_avg\": 344464.0618556701, \"training_stddev\": 202626.52864906692, \"training_set_size\": 97.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 191.68 hours ago. Usually the table is updated within 95.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 697252.0, \"average\": 348063.9387755102, \"min_value\": 0.0, \"max_value\": 962179.6198286047, \"start_time\": \"2024-03-28T08:00:00\", \"end_time\": \"2024-03-28T10:00:00\", \"id\": \"46fcff78a6c134b4c3de4d437ef58cd5\", \"metric_id\": \"bc888a5f3bf660accaba3b47a21078a3\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7058092082538765, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T08:00:00\", \"bucket_end\": \"2024-03-28T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 697252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 962179.6198286047, \"training_avg\": 348063.9387755102, \"training_stddev\": 204705.2270176982, \"training_set_size\": 98.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 193.68 hours ago. Usually the table is updated within 96.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 704452.0, \"average\": 351663.8181818182, \"min_value\": 0.0, \"max_value\": 972015.5800439529, \"start_time\": \"2024-03-28T10:00:00\", \"end_time\": \"2024-03-28T12:00:00\", \"id\": \"b7a4e7222489e802523e4456e7e3a9b8\", \"metric_id\": \"12b808de3e6360c2bb4d15079474e162\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7060716363206745, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T10:00:00\", \"bucket_end\": \"2024-03-28T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 704452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 972015.5800439529, \"training_avg\": 351663.8181818182, \"training_stddev\": 206783.92062071155, \"training_set_size\": 99.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 195.68 hours ago. Usually the table is updated within 97.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 711652.0, \"average\": 355263.7, \"min_value\": 0.0, \"max_value\": 981851.5288005602, \"start_time\": \"2024-03-28T12:00:00\", \"end_time\": \"2024-03-28T14:00:00\", \"id\": \"d885c67a1b8dac6381984cdd54689701\", \"metric_id\": \"4eac7693ac942f4a7169bf810767da96\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7063288670107728, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T12:00:00\", \"bucket_end\": \"2024-03-28T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 711652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 981851.5288005602, \"training_avg\": 355263.7, \"training_stddev\": 208862.60960018673, \"training_set_size\": 100.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 197.68 hours ago. Usually the table is updated within 98.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 718852.0, \"average\": 358863.58415841585, \"min_value\": 0.0, \"max_value\": 991687.4664362485, \"start_time\": \"2024-03-28T14:00:00\", \"end_time\": \"2024-03-28T16:00:00\", \"id\": \"82ec750023d1c65d43e6cc30b0b16707\", \"metric_id\": \"d9acc8287804f9048eaa077eba7dc22f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7065810532267625, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T14:00:00\", \"bucket_end\": \"2024-03-28T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 718852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 991687.4664362485, \"training_avg\": 358863.58415841585, \"training_stddev\": 210941.2940926109, \"training_set_size\": 101.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 199.68 hours ago. Usually the table is updated within 99.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 726052.0, \"average\": 362463.4705882353, \"min_value\": 0.0, \"max_value\": 1001523.393275689, \"start_time\": \"2024-03-28T16:00:00\", \"end_time\": \"2024-03-28T18:00:00\", \"id\": \"3c365ff6430d2478740e0b0567dffd33\", \"metric_id\": \"b262d7bb69f3603615d7718650dd8b24\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7068283419311794, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T16:00:00\", \"bucket_end\": \"2024-03-28T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 726052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1001523.393275689, \"training_avg\": 362463.4705882353, \"training_stddev\": 213019.9742291512, \"training_set_size\": 102.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 201.68 hours ago. Usually the table is updated within 100.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 733252.0, \"average\": 366063.359223301, \"min_value\": 0.0, \"max_value\": 1011359.3096310354, \"start_time\": \"2024-03-28T18:00:00\", \"end_time\": \"2024-03-28T20:00:00\", \"id\": \"3077149547a198c1d84d41e60c53a9bb\", \"metric_id\": \"0769ae865343d293e66911895e841c15\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7070708744322125, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T18:00:00\", \"bucket_end\": \"2024-03-28T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 733252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1011359.3096310354, \"training_avg\": 366063.359223301, \"training_stddev\": 215098.6501359115, \"training_set_size\": 103.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 203.68 hours ago. Usually the table is updated within 101.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 740452.0, \"average\": 369663.25, \"min_value\": 0.0, \"max_value\": 1021195.2158025231, \"start_time\": \"2024-03-28T20:00:00\", \"end_time\": \"2024-03-28T22:00:00\", \"id\": \"794bee69ae449846c5e16bd77d5f9fea\", \"metric_id\": \"a1feabb433e2bbc79d05ba1c4c8c241f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7073087866530776, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T20:00:00\", \"bucket_end\": \"2024-03-28T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 740452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1021195.2158025231, \"training_avg\": 369663.25, \"training_stddev\": 217177.32193417434, \"training_set_size\": 104.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-28T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 205.68 hours ago. Usually the table is updated within 102.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 747652.0, \"average\": 373263.14285714284, \"min_value\": 0.0, \"max_value\": 1031031.1120790303, \"start_time\": \"2024-03-28T22:00:00\", \"end_time\": \"2024-03-29T00:00:00\", \"id\": \"205dd5ed3243b66a5c792eb476899c50\", \"metric_id\": \"34f60a97e0e8336292c6d6ea165eaa62\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.707542209386133, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-28T22:00:00\", \"bucket_end\": \"2024-03-29T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 747652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1031031.1120790303, \"training_avg\": 373263.14285714284, \"training_stddev\": 219255.98974062913, \"training_set_size\": 105.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 207.68 hours ago. Usually the table is updated within 103.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 754852.0, \"average\": 376863.03773584904, \"min_value\": 0.0, \"max_value\": 1040866.9987386118, \"start_time\": \"2024-03-29T00:00:00\", \"end_time\": \"2024-03-29T02:00:00\", \"id\": \"3b570b09612c25cf66cca8b193531001\", \"metric_id\": \"801997e365a24c8eda92ba59fc6cae1a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.707771268532741, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T00:00:00\", \"bucket_end\": \"2024-03-29T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 754852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1040866.9987386118, \"training_avg\": 376863.03773584904, \"training_stddev\": 221334.65366758758, \"training_set_size\": 106.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 209.68 hours ago. Usually the table is updated within 104.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 762052.0, \"average\": 380462.9345794392, \"min_value\": 0.0, \"max_value\": 1050702.876049001, \"start_time\": \"2024-03-29T02:00:00\", \"end_time\": \"2024-03-29T04:00:00\", \"id\": \"1cb07d2459e22e01187c681d804e4719\", \"metric_id\": \"7720e98491b1863d1ec5c562669d1560\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7079960853297949, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T02:00:00\", \"bucket_end\": \"2024-03-29T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 762052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1050702.876049001, \"training_avg\": 380462.9345794392, \"training_stddev\": 223413.31382318726, \"training_set_size\": 107.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 211.68 hours ago. Usually the table is updated within 105.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 769252.0, \"average\": 384062.8333333333, \"min_value\": 0.0, \"max_value\": 1060538.7442680835, \"start_time\": \"2024-03-29T04:00:00\", \"end_time\": \"2024-03-29T06:00:00\", \"id\": \"bd706a4458301207fb83a1b404b89a28\", \"metric_id\": \"e198601fa0d889c8228ed26757fe15ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7082167765637717, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T04:00:00\", \"bucket_end\": \"2024-03-29T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 769252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1060538.7442680835, \"training_avg\": 384062.8333333333, \"training_stddev\": 225491.9703115834, \"training_set_size\": 108.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 213.68 hours ago. Usually the table is updated within 106.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 776452.0, \"average\": 387662.7339449541, \"min_value\": 0.0, \"max_value\": 1070374.6036443468, \"start_time\": \"2024-03-29T06:00:00\", \"end_time\": \"2024-03-29T08:00:00\", \"id\": \"2d509dac940e3800e7f70f4791512440\", \"metric_id\": \"e3331a2038a4bc5d28783b9a46815074\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7084334547731026, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T06:00:00\", \"bucket_end\": \"2024-03-29T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 776452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1070374.6036443468, \"training_avg\": 387662.7339449541, \"training_stddev\": 227570.62323313087, \"training_set_size\": 109.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 215.68 hours ago. Usually the table is updated within 107.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 783652.0, \"average\": 391262.63636363635, \"min_value\": 0.0, \"max_value\": 1080210.4544173037, \"start_time\": \"2024-03-29T08:00:00\", \"end_time\": \"2024-03-29T10:00:00\", \"id\": \"a4e88e7715813e5271c296cd0a736641\", \"metric_id\": \"35389d069ad45734185f5a0ed51f56e3\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.708646228439601, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T08:00:00\", \"bucket_end\": \"2024-03-29T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 783652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1080210.4544173037, \"training_avg\": 391262.63636363635, \"training_stddev\": 229649.27268455576, \"training_set_size\": 110.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 217.68 hours ago. Usually the table is updated within 108.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 790852.0, \"average\": 394862.54054054053, \"min_value\": 0.0, \"max_value\": 1090046.2968178948, \"start_time\": \"2024-03-29T10:00:00\", \"end_time\": \"2024-03-29T12:00:00\", \"id\": \"6dc48cf6e6d5e0fc2c04b9bf89ce5393\", \"metric_id\": \"c350a2fc206539ee3f5aea94945f1a9f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7088552021696262, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T10:00:00\", \"bucket_end\": \"2024-03-29T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 790852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1090046.2968178948, \"training_avg\": 394862.54054054053, \"training_stddev\": 231727.9187591181, \"training_set_size\": 111.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 219.68 hours ago. Usually the table is updated within 109.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 798052.0, \"average\": 398462.4464285714, \"min_value\": 0.0, \"max_value\": 1099882.1310688679, \"start_time\": \"2024-03-29T12:00:00\", \"end_time\": \"2024-03-29T14:00:00\", \"id\": \"24526747b05154b66d07291f681eebe1\", \"metric_id\": \"c2d0ed2094b294863dd399d533be7578\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7090604768656312, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T12:00:00\", \"bucket_end\": \"2024-03-29T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 798052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1099882.1310688679, \"training_avg\": 398462.4464285714, \"training_stddev\": 233806.5615467655, \"training_set_size\": 112.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 221.68 hours ago. Usually the table is updated within 110.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 805252.0, \"average\": 402062.3539823009, \"min_value\": 0.0, \"max_value\": 1109717.9573851381, \"start_time\": \"2024-03-29T14:00:00\", \"end_time\": \"2024-03-29T16:00:00\", \"id\": \"64db15271a13bd763067389208bd7a0f\", \"metric_id\": \"e807e0136c3a291450e0f8b9b496206a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7092621498886695, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T14:00:00\", \"bucket_end\": \"2024-03-29T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 805252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1109717.9573851381, \"training_avg\": 402062.3539823009, \"training_stddev\": 235885.20113427908, \"training_set_size\": 113.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 223.68 hours ago. Usually the table is updated within 111.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 812452.0, \"average\": 405662.2631578947, \"min_value\": 0.0, \"max_value\": 1119553.7759741298, \"start_time\": \"2024-03-29T16:00:00\", \"end_time\": \"2024-03-29T18:00:00\", \"id\": \"41eef2325334527d27aff427e75c2549\", \"metric_id\": \"96c8874e1b93c529580e86eb6d634fc8\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7094603152124246, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T16:00:00\", \"bucket_end\": \"2024-03-29T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 812452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1119553.7759741298, \"training_avg\": 405662.2631578947, \"training_stddev\": 237963.83760541168, \"training_set_size\": 114.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 225.68 hours ago. Usually the table is updated within 112.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 819652.0, \"average\": 409262.17391304346, \"min_value\": 0.0, \"max_value\": 1129389.5870360993, \"start_time\": \"2024-03-29T18:00:00\", \"end_time\": \"2024-03-29T20:00:00\", \"id\": \"5c6127b9ccee4ae2b2caf2fd7aa54209\", \"metric_id\": \"b61fbe2c5d222c8cb45b08d2e5a13178\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7096550635692667, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T18:00:00\", \"bucket_end\": \"2024-03-29T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 819652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1129389.5870360993, \"training_avg\": 409262.17391304346, \"training_stddev\": 240042.4710410186, \"training_set_size\": 115.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 227.68 hours ago. Usually the table is updated within 113.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 826852.0, \"average\": 412862.0862068966, \"min_value\": 0.0, \"max_value\": 1139225.3907644427, \"start_time\": \"2024-03-29T20:00:00\", \"end_time\": \"2024-03-29T22:00:00\", \"id\": \"c101b721e81f6f016c610d62fc71d37c\", \"metric_id\": \"5d41db3e2978489948d6355ba623d06b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.709846482588817, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T20:00:00\", \"bucket_end\": \"2024-03-29T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 826852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1139225.3907644427, \"training_avg\": 412862.0862068966, \"training_stddev\": 242121.1015191821, \"training_set_size\": 116.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-29T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 229.68 hours ago. Usually the table is updated within 114.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 834052.0, \"average\": 416462.0, \"min_value\": 0.0, \"max_value\": 1149061.1873459867, \"start_time\": \"2024-03-29T22:00:00\", \"end_time\": \"2024-03-30T00:00:00\", \"id\": \"4965510f7274ac05abb10eeddadf1fdf\", \"metric_id\": \"fbb4c6bed96c455e4d87b42de51f5420\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.710034656929466, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-29T22:00:00\", \"bucket_end\": \"2024-03-30T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 834052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1149061.1873459867, \"training_avg\": 416462.0, \"training_stddev\": 244199.7291153289, \"training_set_size\": 117.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 231.68 hours ago. Usually the table is updated within 115.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 841252.0, \"average\": 420061.9152542373, \"min_value\": 0.0, \"max_value\": 1158896.9769612649, \"start_time\": \"2024-03-30T00:00:00\", \"end_time\": \"2024-03-30T02:00:00\", \"id\": \"ec9d0c1be5467429c3bdb6474120f71c\", \"metric_id\": \"01840e3c547f3b6d3ddb5bf348bbc74c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.710219668403251, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T00:00:00\", \"bucket_end\": \"2024-03-30T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 841252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1158896.9769612649, \"training_avg\": 420061.9152542373, \"training_stddev\": 246278.35390234253, \"training_set_size\": 118.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 233.68 hours ago. Usually the table is updated within 116.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 848452.0, \"average\": 423661.8319327731, \"min_value\": 0.0, \"max_value\": 1168732.7597847811, \"start_time\": \"2024-03-30T02:00:00\", \"end_time\": \"2024-03-30T04:00:00\", \"id\": \"1df650aac60837051cc3cd6dab353f55\", \"metric_id\": \"7569cb5dce8c3df6e85e333e89c5fbb7\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7104015960944947, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T02:00:00\", \"bucket_end\": \"2024-03-30T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 848452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1168732.7597847811, \"training_avg\": 423661.8319327731, \"training_stddev\": 248356.97595066935, \"training_set_size\": 119.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 235.68 hours ago. Usually the table is updated within 117.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 855652.0, \"average\": 427261.75, \"min_value\": 0.0, \"max_value\": 1178568.5359852593, \"start_time\": \"2024-03-30T04:00:00\", \"end_time\": \"2024-03-30T06:00:00\", \"id\": \"fef1e9953552ba238dfd076727efd3c2\", \"metric_id\": \"e047a91304f89bcfb62e2651437b85a2\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.710580516472555, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T04:00:00\", \"bucket_end\": \"2024-03-30T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 855652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1178568.5359852593, \"training_avg\": 427261.75, \"training_stddev\": 250435.59532841973, \"training_set_size\": 120.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 237.68 hours ago. Usually the table is updated within 118.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 862852.0, \"average\": 430861.6694214876, \"min_value\": 0.0, \"max_value\": 1188404.3057258795, \"start_time\": \"2024-03-30T06:00:00\", \"end_time\": \"2024-03-30T08:00:00\", \"id\": \"fbc2c62c401c04afccfc07acbcfedeb9\", \"metric_id\": \"af17d504fdab25c7ed08332f0c389b29\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7107565034990277, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T06:00:00\", \"bucket_end\": \"2024-03-30T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 862852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1188404.3057258795, \"training_avg\": 430861.6694214876, \"training_stddev\": 252514.21210146399, \"training_set_size\": 121.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 239.68 hours ago. Usually the table is updated within 119.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 870052.0, \"average\": 434461.59016393445, \"min_value\": 0.0, \"max_value\": 1198240.069164506, \"start_time\": \"2024-03-30T08:00:00\", \"end_time\": \"2024-03-30T10:00:00\", \"id\": \"3d34411042220fef87f6d1828f0c4f05\", \"metric_id\": \"10dd94d3c2659d3029e4f8b8e04c41bd\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7109296287297184, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T08:00:00\", \"bucket_end\": \"2024-03-30T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 870052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1198240.069164506, \"training_avg\": 434461.59016393445, \"training_stddev\": 254592.8263335238, \"training_set_size\": 122.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 241.68 hours ago. Usually the table is updated within 120.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 877252.0, \"average\": 438061.51219512196, \"min_value\": 0.0, \"max_value\": 1208075.826453899, \"start_time\": \"2024-03-30T10:00:00\", \"end_time\": \"2024-03-30T12:00:00\", \"id\": \"628548d847eaecc2701daea49de7b867\", \"metric_id\": \"11dc8625b46c4e534e439842c7a6980b\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7110999614116793, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T10:00:00\", \"bucket_end\": \"2024-03-30T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 877252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1208075.826453899, \"training_avg\": 438061.51219512196, \"training_stddev\": 256671.438086259, \"training_set_size\": 123.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 243.68 hours ago. Usually the table is updated within 121.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 884452.0, \"average\": 441661.43548387097, \"min_value\": 0.0, \"max_value\": 1217911.5777419226, \"start_time\": \"2024-03-30T12:00:00\", \"end_time\": \"2024-03-30T14:00:00\", \"id\": \"0a8b67424df9cae3208f3efca3c2bb63\", \"metric_id\": \"e7c3f5e7579cb6ce0bf0d43731139417\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.711267568575584, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T12:00:00\", \"bucket_end\": \"2024-03-30T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 884452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1217911.5777419226, \"training_avg\": 441661.43548387097, \"training_stddev\": 258750.0474193505, \"training_set_size\": 124.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 245.68 hours ago. Usually the table is updated within 122.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 891652.0, \"average\": 445261.36, \"min_value\": 0.0, \"max_value\": 1227747.3231717362, \"start_time\": \"2024-03-30T14:00:00\", \"end_time\": \"2024-03-30T16:00:00\", \"id\": \"191681c420131a1ff40b4348e5625178\", \"metric_id\": \"9d09184bf3fca6c5d74259b715cdbad7\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7114325151237055, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T14:00:00\", \"bucket_end\": \"2024-03-30T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 891652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1227747.3231717362, \"training_avg\": 445261.36, \"training_stddev\": 260828.6543905788, \"training_set_size\": 125.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 247.68 hours ago. Usually the table is updated within 123.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 898852.0, \"average\": 448861.28571428574, \"min_value\": 0.0, \"max_value\": 1237583.0628819836, \"start_time\": \"2024-03-30T16:00:00\", \"end_time\": \"2024-03-30T18:00:00\", \"id\": \"96be90c85b4e71fc2996147143d3bfb1\", \"metric_id\": \"f0c0b16b2d3c53159c66cd318e447c73\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7115948639137322, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T16:00:00\", \"bucket_end\": \"2024-03-30T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 898852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1237583.0628819836, \"training_avg\": 448861.28571428574, \"training_stddev\": 262907.2590558993, \"training_set_size\": 126.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 249.68 hours ago. Usually the table is updated within 124.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 906052.0, \"average\": 452461.2125984252, \"min_value\": 0.0, \"max_value\": 1247418.7970069656, \"start_time\": \"2024-03-30T18:00:00\", \"end_time\": \"2024-03-30T20:00:00\", \"id\": \"a86e7176f22e86271399d07fe3a6986b\", \"metric_id\": \"cc29d2a0188b07ac18b52056bcd52029\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.711754675838659, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T18:00:00\", \"bucket_end\": \"2024-03-30T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 906052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1247418.7970069656, \"training_avg\": 452461.2125984252, \"training_stddev\": 264985.86146951345, \"training_set_size\": 127.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 251.68 hours ago. Usually the table is updated within 125.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 913252.0, \"average\": 456061.140625, \"min_value\": 0.0, \"max_value\": 1257254.525676812, \"start_time\": \"2024-03-30T20:00:00\", \"end_time\": \"2024-03-30T22:00:00\", \"id\": \"a95036e57cfe3792d46da3d314b54686\", \"metric_id\": \"4f3192a4ec2b2f225aab4f6a2bb4eeaf\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7119120099029554, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T20:00:00\", \"bucket_end\": \"2024-03-30T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 913252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1257254.525676812, \"training_avg\": 456061.140625, \"training_stddev\": 267064.46168393735, \"training_set_size\": 128.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-30T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 253.68 hours ago. Usually the table is updated within 126.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 920452.0, \"average\": 459661.06976744183, \"min_value\": 0.0, \"max_value\": 1267090.2490176416, \"start_time\": \"2024-03-30T22:00:00\", \"end_time\": \"2024-03-31T00:00:00\", \"id\": \"181703344bfe280414c4f37bcdf74ccf\", \"metric_id\": \"28aa8e2acc041ceaa7931e17ada8c1f4\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7120669232952204, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-30T22:00:00\", \"bucket_end\": \"2024-03-31T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 920452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1267090.2490176416, \"training_avg\": 459661.06976744183, \"training_stddev\": 269143.0597500666, \"training_set_size\": 129.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 255.68 hours ago. Usually the table is updated within 127.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 927652.0, \"average\": 463261.0, \"min_value\": 0.0, \"max_value\": 1276925.967151714, \"start_time\": \"2024-03-31T00:00:00\", \"end_time\": \"2024-03-31T02:00:00\", \"id\": \"650703c2df18f34c9ca0f2cc136e5590\", \"metric_id\": \"073214bf1b4924086171da658a87aa74\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7122194714575099, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T00:00:00\", \"bucket_end\": \"2024-03-31T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 927652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1276925.967151714, \"training_avg\": 463261.0, \"training_stddev\": 271221.655717238, \"training_set_size\": 130.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 257.68 hours ago. Usually the table is updated within 128.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 934852.0, \"average\": 466860.93129770993, \"min_value\": 0.0, \"max_value\": 1286761.6801975782, \"start_time\": \"2024-03-31T02:00:00\", \"end_time\": \"2024-03-31T04:00:00\", \"id\": \"ede23ac102a5c930aa6cd694749eef31\", \"metric_id\": \"ac65d7233fea58e5ba487b3f3c5fface\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.712369708151508, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T02:00:00\", \"bucket_end\": \"2024-03-31T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 934852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1286761.6801975782, \"training_avg\": 466860.93129770993, \"training_stddev\": 273300.2496332894, \"training_set_size\": 131.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 259.68 hours ago. Usually the table is updated within 129.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 942052.0, \"average\": 470460.86363636365, \"min_value\": 0.0, \"max_value\": 1296597.3882702107, \"start_time\": \"2024-03-31T04:00:00\", \"end_time\": \"2024-03-31T06:00:00\", \"id\": \"fcf2d42bac553a0e6aa8a621971ce659\", \"metric_id\": \"c235ccd3b7a9af23f38c3c7f35d2f6e1\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.712517685521715, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T04:00:00\", \"bucket_end\": \"2024-03-31T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 942052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1296597.3882702107, \"training_avg\": 470460.86363636365, \"training_stddev\": 275378.8415446157, \"training_set_size\": 132.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 261.68 hours ago. Usually the table is updated within 130.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 949252.0, \"average\": 474060.7969924812, \"min_value\": 0.0, \"max_value\": 1306433.0914811497, \"start_time\": \"2024-03-31T06:00:00\", \"end_time\": \"2024-03-31T08:00:00\", \"id\": \"56d4126b8c5ae755e064c19fa9df3c95\", \"metric_id\": \"7dcaf04ea5de5720fe123c7e297e4485\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7126634541558055, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T06:00:00\", \"bucket_end\": \"2024-03-31T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 949252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1306433.0914811497, \"training_avg\": 474060.7969924812, \"training_stddev\": 277457.43149622285, \"training_set_size\": 133.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 263.68 hours ago. Usually the table is updated within 131.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 956452.0, \"average\": 477660.7313432836, \"min_value\": 0.0, \"max_value\": 1316268.7899386233, \"start_time\": \"2024-03-31T08:00:00\", \"end_time\": \"2024-03-31T10:00:00\", \"id\": \"710038b3db0f5c5fe7216cad499d01ab\", \"metric_id\": \"d5983c913d785724828f121f380cf341\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7128070631422994, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T08:00:00\", \"bucket_end\": \"2024-03-31T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 956452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1316268.7899386233, \"training_avg\": 477660.7313432836, \"training_stddev\": 279536.0195317799, \"training_set_size\": 134.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 265.68 hours ago. Usually the table is updated within 132.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 963652.0, \"average\": 481260.6666666667, \"min_value\": 0.0, \"max_value\": 1326104.4837476702, \"start_time\": \"2024-03-31T10:00:00\", \"end_time\": \"2024-03-31T12:00:00\", \"id\": \"8d07abfb2962ce87db04d25913a8935e\", \"metric_id\": \"46dd93accc42b43a6a32a33f1d2bc7ff\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7129485601256937, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T10:00:00\", \"bucket_end\": \"2024-03-31T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 963652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1326104.4837476702, \"training_avg\": 481260.6666666667, \"training_stddev\": 281614.60569366784, \"training_set_size\": 135.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 267.68 hours ago. Usually the table is updated within 133.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 970852.0, \"average\": 484860.60294117645, \"min_value\": 0.0, \"max_value\": 1335940.1730102568, \"start_time\": \"2024-03-31T12:00:00\", \"end_time\": \"2024-03-31T14:00:00\", \"id\": \"89893a454d36a251adc70930e5561228\", \"metric_id\": \"d9d60c1fcac8212c41bac8112428b37d\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7130879913591746, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T12:00:00\", \"bucket_end\": \"2024-03-31T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 970852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1335940.1730102568, \"training_avg\": 484860.60294117645, \"training_stddev\": 283693.1900230268, \"training_set_size\": 136.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 269.68 hours ago. Usually the table is updated within 134.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 978052.0, \"average\": 488460.5401459854, \"min_value\": 0.0, \"max_value\": 1345775.8578253891, \"start_time\": \"2024-03-31T14:00:00\", \"end_time\": \"2024-03-31T16:00:00\", \"id\": \"cf44f977de5baef6fff4129f0c87883e\", \"metric_id\": \"bb1e9d1fa5c926408720bb4cfa4f0d56\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.713225401755037, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T14:00:00\", \"bucket_end\": \"2024-03-31T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 978052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1345775.8578253891, \"training_avg\": 488460.5401459854, \"training_stddev\": 285771.7725598013, \"training_set_size\": 137.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 271.68 hours ago. Usually the table is updated within 135.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 985252.0, \"average\": 492060.47826086957, \"min_value\": 0.0, \"max_value\": 1355611.5382892196, \"start_time\": \"2024-03-31T16:00:00\", \"end_time\": \"2024-03-31T18:00:00\", \"id\": \"d5b05f52b77a1e0d6cc6366b11e39621\", \"metric_id\": \"e3be39f72b99da51582a3c619fdbf344\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7133608349329308, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T16:00:00\", \"bucket_end\": \"2024-03-31T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 985252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1355611.5382892196, \"training_avg\": 492060.47826086957, \"training_stddev\": 287850.35334278335, \"training_set_size\": 138.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 273.68 hours ago. Usually the table is updated within 136.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 992452.0, \"average\": 495660.417266187, \"min_value\": 0.0, \"max_value\": 1365447.2144951476, \"start_time\": \"2024-03-31T18:00:00\", \"end_time\": \"2024-03-31T20:00:00\", \"id\": \"7a5d2e1fbec56b1c646d2df2747076fa\", \"metric_id\": \"061c37a98f79bdea3e3c02fe2723b09c\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7134943332660362, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T18:00:00\", \"bucket_end\": \"2024-03-31T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 992452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1365447.2144951476, \"training_avg\": 495660.417266187, \"training_stddev\": 289928.93240965356, \"training_set_size\": 139.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 275.68 hours ago. Usually the table is updated within 137.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 999652.0, \"average\": 499260.35714285716, \"min_value\": 0.0, \"max_value\": 1375282.8865339193, \"start_time\": \"2024-03-31T20:00:00\", \"end_time\": \"2024-03-31T22:00:00\", \"id\": \"a02abef25943df537ca9d2a76f886831\", \"metric_id\": \"e21ef52c18441f48d9b9489d579b6c87\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7136259379252727, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T20:00:00\", \"bucket_end\": \"2024-03-31T22:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 999652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1375282.8865339193, \"training_avg\": 499260.35714285716, \"training_stddev\": 292007.5097970207, \"training_set_size\": 140.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-03-31T22:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 277.68 hours ago. Usually the table is updated within 138.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1006852.0, \"average\": 502860.2978723404, \"min_value\": 0.0, \"max_value\": 1385118.5544937197, \"start_time\": \"2024-03-31T22:00:00\", \"end_time\": \"2024-04-01T00:00:00\", \"id\": \"a3eec10672f73578314fc65adad5220f\", \"metric_id\": \"7114c4fb4afac06396f80596b484409a\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7137556889216419, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-03-31T22:00:00\", \"bucket_end\": \"2024-04-01T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1006852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1385118.5544937197, \"training_avg\": 502860.2978723404, \"training_stddev\": 294086.0855404598, \"training_set_size\": 141.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 279.68 hours ago. Usually the table is updated within 139.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1014052.0, \"average\": 506460.23943661974, \"min_value\": 0.0, \"max_value\": 1394954.2184602637, \"start_time\": \"2024-04-01T00:00:00\", \"end_time\": \"2024-04-01T02:00:00\", \"id\": \"6d0ebb2ca4aaeb2d6d5187bc833b23e2\", \"metric_id\": \"72be6ce9ab1dd92da3bd77eab09d682f\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.713883625146792, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T00:00:00\", \"bucket_end\": \"2024-04-01T02:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1014052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1394954.2184602637, \"training_avg\": 506460.23943661974, \"training_stddev\": 296164.659674548, \"training_set_size\": 142.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T02:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 281.68 hours ago. Usually the table is updated within 140.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1021252.0, \"average\": 510060.1818181818, \"min_value\": 0.0, \"max_value\": 1404789.8785168806, \"start_time\": \"2024-04-01T02:00:00\", \"end_time\": \"2024-04-01T04:00:00\", \"id\": \"046896f6228458c52fd99a6b167af34d\", \"metric_id\": \"dbd3ad9b3b069b500e9bb075b9bce206\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7140097844118924, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T02:00:00\", \"bucket_end\": \"2024-04-01T04:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1021252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1404789.8785168806, \"training_avg\": 510060.1818181818, \"training_stddev\": 298243.2322328996, \"training_set_size\": 143.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T04:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 283.68 hours ago. Usually the table is updated within 141.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1028452.0, \"average\": 513660.125, \"min_value\": 0.0, \"max_value\": 1414625.534744597, \"start_time\": \"2024-04-01T04:00:00\", \"end_time\": \"2024-04-01T06:00:00\", \"id\": \"875c29695aa6696f488484439af4276d\", \"metric_id\": \"269e15f52c4f4e24947d251e068b99d4\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7141342034848983, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T04:00:00\", \"bucket_end\": \"2024-04-01T06:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1028452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1414625.534744597, \"training_avg\": 513660.125, \"training_stddev\": 300321.80324819905, \"training_set_size\": 144.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T06:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 285.68 hours ago. Usually the table is updated within 142.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1035652.0, \"average\": 517260.0689655172, \"min_value\": 0.0, \"max_value\": 1424461.1872222172, \"start_time\": \"2024-04-01T06:00:00\", \"end_time\": \"2024-04-01T08:00:00\", \"id\": \"8adfe10065a528ccf4630d26020c69f3\", \"metric_id\": \"02dddc74a4a641516a339110fc7f848e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7142569181262834, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T06:00:00\", \"bucket_end\": \"2024-04-01T08:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1035652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1424461.1872222172, \"training_avg\": 517260.0689655172, \"training_stddev\": 302400.3727522333, \"training_set_size\": 145.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T08:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 287.68 hours ago. Usually the table is updated within 143.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1042852.0, \"average\": 520860.01369863015, \"min_value\": 0.0, \"max_value\": 1434296.8360263961, \"start_time\": \"2024-04-01T08:00:00\", \"end_time\": \"2024-04-01T10:00:00\", \"id\": \"44be222f49c4bfba3c92222fb8a1f2cd\", \"metric_id\": \"fa555822124f561ebf1c812e9589ce77\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7143779631233158, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T08:00:00\", \"bucket_end\": \"2024-04-01T10:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1042852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1434296.8360263961, \"training_avg\": 520860.01369863015, \"training_stddev\": 304478.940775922, \"training_set_size\": 146.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T10:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 289.68 hours ago. Usually the table is updated within 144.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1050052.0, \"average\": 524459.9591836735, \"min_value\": 0.0, \"max_value\": 1444132.4812317141, \"start_time\": \"2024-04-01T10:00:00\", \"end_time\": \"2024-04-01T12:00:00\", \"id\": \"863c898760a4fdea22212dc964ef27d3\", \"metric_id\": \"96480178f7a4914272be7e6d3dbc0b10\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7144973723229426, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T10:00:00\", \"bucket_end\": \"2024-04-01T12:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1050052.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1444132.4812317141, \"training_avg\": 524459.9591836735, \"training_stddev\": 306557.50734934694, \"training_set_size\": 147.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T12:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 291.68 hours ago. Usually the table is updated within 145.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1057252.0, \"average\": 528059.9054054054, \"min_value\": 0.0, \"max_value\": 1453968.122910747, \"start_time\": \"2024-04-01T12:00:00\", \"end_time\": \"2024-04-01T14:00:00\", \"id\": \"a0583d655e4802ca8537c7c00987f986\", \"metric_id\": \"2d0e4f97f0b8742980e040fca8a869a2\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7146151786633483, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T12:00:00\", \"bucket_end\": \"2024-04-01T14:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1057252.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1453968.122910747, \"training_avg\": 528059.9054054054, \"training_stddev\": 308636.0725017805, \"training_set_size\": 148.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T14:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 293.68 hours ago. Usually the table is updated within 146.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1064452.0, \"average\": 531659.8523489933, \"min_value\": 0.0, \"max_value\": 1463803.7611341309, \"start_time\": \"2024-04-01T14:00:00\", \"end_time\": \"2024-04-01T16:00:00\", \"id\": \"4b78dc92af54c0fc565016eca4791289\", \"metric_id\": \"315b998f944084f34e256ccfb1da48f3\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.714731414204254, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T14:00:00\", \"bucket_end\": \"2024-04-01T16:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1064452.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1463803.7611341309, \"training_avg\": 531659.8523489933, \"training_stddev\": 310714.6362617125, \"training_set_size\": 149.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T16:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 295.68 hours ago. Usually the table is updated within 147.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1071652.0, \"average\": 535259.8, \"min_value\": 0.0, \"max_value\": 1473639.3959706286, \"start_time\": \"2024-04-01T16:00:00\", \"end_time\": \"2024-04-01T18:00:00\", \"id\": \"6a526420d8798e9e4ca18aa3a8742b55\", \"metric_id\": \"f49d4913f0fc1b783887fdfe4b653ca5\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7148461101560093, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T16:00:00\", \"bucket_end\": \"2024-04-01T18:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1071652.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1473639.3959706286, \"training_avg\": 535259.8, \"training_stddev\": 312793.19865687616, \"training_set_size\": 150.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T18:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 297.68 hours ago. Usually the table is updated within 148.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}, {\"value\": 1078852.0, \"average\": 538859.7483443709, \"min_value\": 0.0, \"max_value\": 1483475.02748719, \"start_time\": \"2024-04-01T18:00:00\", \"end_time\": \"2024-04-01T20:00:00\", \"id\": \"9d52f207a32cd1be9053461dcf2f4c55\", \"metric_id\": \"9e6b67c05d00770987a9219227505252\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"test_unique_id\": \"test.dbt_testing_example.elementary_freshness_anomalies_body_mass_indexes_hour__2__processed_at.e39d6b3299\", \"detected_at\": \"2024-04-01T21:00:31.115657\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"freshness\", \"anomaly_score\": 1.7149592969075387, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": \"2024-03-20 08:19:08.801254\", \"bucket_start\": \"2024-04-01T18:00:00\", \"bucket_end\": \"2024-04-01T20:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 1078852.0, \"min_metric_value\": 0.0, \"max_metric_value\": 1483475.02748719, \"training_avg\": 538859.7483443709, \"training_stddev\": 314871.75971427304, \"training_set_size\": 151.0, \"training_start\": \"2024-03-19T08:00:00\", \"training_end\": \"2024-04-01T20:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"Last update was at 2024-03-20 08:19:08.801254, 299.68 hours ago. Usually the table is updated within 149.68 hours.\", \"max_bucket_end\": \"2024-04-01T20:00:00\", \"is_anomalous\": false}]}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-01T20:49:17\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240401204910096562\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-01T20:59:16\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240401205905994495\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_schema_changes_body_mass_indexes_.5e7b3caf3a\", \"detected_at\": \"2024-04-01T21:00:37\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"schema_columns_snapshot\\\"\\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        select * from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_5e7b3caf3__schema_changes_alerts__tmp_20240401210030929379\\\"\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"34dfacbe38a12f9de5651c5767e99a9e\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240401204910106844\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"974b9d7b73f343e3902b7da01f36bc4c\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-01T20:59:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240401205906280739\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"9cefcf6e8cff7839ca187f0a15e6f22a\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"elementary_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103.None.row_count\", \"detected_at\": \"2024-04-01T21:00:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 4.000. The average for this metric is 4.000.\\n      \\n  \", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n  -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n\\n  \\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"monitors_runs\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"data_monitoring_metrics\\\"\\n    -- depends_on: \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"dbt_run_results\\\"\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"neondb\\\".\\\"dbt_testing_example_elementary\\\".\\\"test_c1d889d103_eleme__anomaly_scores__tmp_20240401210031217025\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n            anomaly_score is not null and\\n            (\\n              \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n              (\\n                case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n                \\n      (1 = 1)\\n  \\n\\n  and\\n\\n  \\n      (1 = 1)\\n  \\n              )\\n            ) and\\n            bucket_end >= \\n    cast(max_bucket_end as TIMESTAMP) + cast('-2' as INT) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      )\\n\\n      select\\n        metric_value as value,\\n        training_avg as average,\\n        \\n        case\\n        when is_anomalous = TRUE and 'both' = 'spike' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'spike' then\\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'spike' then metric_value\\n        else min_metric_value end as min_value,\\n        case\\n        when is_anomalous = TRUE and 'both' = 'drop' then\\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when is_anomalous = TRUE and 'both' != 'drop' then\\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n        when 'both' = 'drop' then metric_value\\n        else max_metric_value end as max_value,\\n        bucket_start as start_time,\\n        bucket_end as end_time,\\n        *\\n      from anomaly_scores_with_is_anomalous\\n      order by bucket_end, dimension_value\\n    \\n\\n\\n) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\", \\\"timestamp_column\\\": null, \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null}\", \"severity\": \"warn\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-01T20:49:03\", \"id\": \"935bcf166f70eaacfed75b7ff7d10ebc\", \"metric_id\": \"087ede81bb081f440e325475e49c3a50\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-01T21:00:31.315645\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-01T20:49:03\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 2.0, \"training_start\": \"2024-03-19T08:00:24\", \"training_end\": \"2024-04-01T20:49:03\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-01T21:00:24\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-01T20:58:55\", \"id\": \"87bbfe0527a6970faebe783955f0983d\", \"metric_id\": \"f9fb50e3e2f23f987651be20732d3b6e\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-01T21:00:31.315645\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-01T20:58:55\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 3.0, \"training_start\": \"2024-03-19T08:00:24\", \"training_end\": \"2024-04-01T20:58:55\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-01T21:00:24\", \"is_anomalous\": false}, {\"value\": 4.0, \"average\": 4.0, \"min_value\": 4.0, \"max_value\": 4.0, \"start_time\": null, \"end_time\": \"2024-04-01T21:00:24\", \"id\": \"9cefcf6e8cff7839ca187f0a15e6f22a\", \"metric_id\": \"8e64f1bb19810a5b1c09bb9189e1e479\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"test_unique_id\": \"test.dbt_testing_example.elementary_volume_anomalies_body_mass_indexes_.c1d889d103\", \"detected_at\": \"2024-04-01T21:00:31.315645\", \"full_table_name\": \"NEONDB.DBT_TESTING_EXAMPLE.BODY_MASS_INDEXES\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3.0, \"anomalous_value\": null, \"bucket_start\": null, \"bucket_end\": \"2024-04-01T21:00:24\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 4.0, \"min_metric_value\": 4.0, \"max_metric_value\": 4.0, \"training_avg\": 4.0, \"training_stddev\": 0.0, \"training_set_size\": 4.0, \"training_start\": \"2024-03-19T08:00:24\", \"training_end\": \"2024-04-01T21:00:24\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 4.000. The average for this metric is 4.000.\", \"max_bucket_end\": \"2024-04-01T21:00:24\", \"is_anomalous\": false}]}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:59:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:00:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f\", \"test_execution_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:04:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"invocation_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25\", \"test_execution_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"test_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.int_weight_measurements_with_latest_height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"int_weight_measurements_with_latest_height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T20:59:06\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T21:00:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:57\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T21:06:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T21:06:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2024-04-03T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T20:49:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T21:06:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T21:06:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-01T21:36:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-02T05:34:47\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2024-04-03T05:34:58\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T20:49:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T21:06:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T21:06:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-01T21:36:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T20:49:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-01T21:36:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T20:49:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T21:00:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T21:06:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-01T21:36:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T20:49:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 8, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T20:59:07\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T21:00:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76\", \"test_execution_id\": \"c59c9360-cdba-4a4a-aa43-a4c04bcfaa76.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T21:06:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"6e364479-c040-436c-a9cc-4aea439658c4\", \"test_execution_id\": \"6e364479-c040-436c-a9cc-4aea439658c4.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T21:06:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"6d641096-a280-4493-8192-3e32de3390ed\", \"test_execution_id\": \"6d641096-a280-4493-8192-3e32de3390ed.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-01T21:36:49\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"276273b2-ce54-481d-82d4-94c38982e112\", \"test_execution_id\": \"276273b2-ce54-481d-82d4-94c38982e112.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-02T05:34:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587\", \"test_execution_id\": \"2f93eda6-c8e2-41d1-af3c-6af4bc9c3587.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2024-04-03T05:34:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:49:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:59:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": null, \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:00:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": null, \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": null, \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": null, \"meta\": \"{}\", \"model_meta\": null, \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f\", \"test_execution_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:04:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"invocation_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25\", \"test_execution_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.stg_gym_app__height_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__height_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\\n\\nUNION ALL\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__height_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1\", \"test_execution_id\": \"4071cb91-9f9c-4acd-bbae-27ea6bd6aab1.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:49:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e\", \"test_execution_id\": \"8415c757-e155-4aa4-8d49-0fee430ca59e.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-01T20:59:09\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac\", \"test_execution_id\": \"1e4e8e80-56eb-4bff-8053-79d74e3655ac.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:00:34\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f\", \"test_execution_id\": \"d430eabf-e30b-4f44-b5f7-1ac5ac3f295f.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:04:48\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"invocation_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25\", \"test_execution_id\": \"8dc40bbf-507f-4f60-971e-767a495dab25.test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"test_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test\", \"elementary_unique_id\": \"test.dbt_testing_example.stg_gym_app__weight_unit_test.None.singular\", \"detected_at\": \"2024-04-01T21:05:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"unit-test\\\", \\\"unit-tests\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\n\\n  \\n  \\n\\n\\n  \\n    \\n    \\n\\n    \\n  \\n\\n    \\n    \\n    \\n\\n    \\n    \\n    select 1 as a from (select 1) as t where False\\n  \\n\", \"other\": null, \"test_name\": \"stg_gym_app__weight_unit_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]", "name": "JinjaLogInfo", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:47.067254Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:47.106905Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 3.8361406, "process_in_blocks": "0", "process_kernel_time": 0.199721, "process_mem_max_rss": "118620", "process_out_blocks": "6184", "process_user_time": 2.792102}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 3.8361406, \"process_user_time\": 2.792102, \"process_kernel_time\": 0.199721, \"process_mem_max_rss\": \"118620\", \"process_out_blocks\": \"6184\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:47.109508Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:37:47.110227Z", "elapsed": 3.8370917, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:47.110227 after 3.84 seconds", "name": "CommandCompleted", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:47.110420Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:47.111073Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff154d3a430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff152bf4610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff151f3d940>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff154d3a430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff152bf4610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff151f3d940>]}", "name": "SendingEvent", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:47.111679Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "03c3dfae-6d7f-49b4-bcc3-b1965e3bb73f", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 100, "thread": "MainThread", "ts": "2024-04-03T05:37:47.112332Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efce0afa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efd481910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efd481bb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efce0afa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efd481910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efd481bb0>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:49.786520Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:49.790255Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'static_parser': 'True', 'introspect': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:49.791067Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:49.795047Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '7e5eb66c-6a63-465c-91f6-3346faaf0657', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efd4dd550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '7e5eb66c-6a63-465c-91f6-3346faaf0657', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efd4dd550>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:49.990297Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '7e5eb66c-6a63-465c-91f6-3346faaf0657', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efa3f6880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '7e5eb66c-6a63-465c-91f6-3346faaf0657', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efa3f6880>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.092779Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.093820Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.111324Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.230813Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.231491Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '7e5eb66c-6a63-465c-91f6-3346faaf0657', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0ef9bd9f40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '7e5eb66c-6a63-465c-91f6-3346faaf0657', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0ef9bd9f40>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.242022Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '7e5eb66c-6a63-465c-91f6-3346faaf0657', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efa3e3dc0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '7e5eb66c-6a63-465c-91f6-3346faaf0657', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efa3e3dc0>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.319541Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.320376Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '7e5eb66c-6a63-465c-91f6-3346faaf0657', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efa3703a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '7e5eb66c-6a63-465c-91f6-3346faaf0657', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efa3703a0>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.321065Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.322110Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.322764Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.323405Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:50.324010Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:51.570991Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:51.572019Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:51.572642Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:51.573336Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:51.728623Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:51.772014Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:51.772699Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:51.926967Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:51.927676Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:51.928362Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 17"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "SQL status: SELECT 17 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.087675Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.096038Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.096711Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 22"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "SQL status: SELECT 22 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.253463Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.291502Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  ", "name": "SQLQuery", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.292268Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.448272Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.456688Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.457464Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.611791Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.880113, "process_in_blocks": "0", "process_kernel_time": 0.207017, "process_mem_max_rss": "111392", "process_out_blocks": "3680", "process_user_time": 2.67132}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.880113, \"process_user_time\": 2.67132, \"process_kernel_time\": 0.207017, \"process_mem_max_rss\": \"111392\", \"process_out_blocks\": \"3680\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.614431Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:37:52.615147Z", "elapsed": 2.881052, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:52.615147 after 2.88 seconds", "name": "CommandCompleted", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.615343Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.615991Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efce0afa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0ef9f26dc0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efa3e3fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efce0afa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0ef9f26dc0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0efa3e3fa0>]}", "name": "SendingEvent", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.616600Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "7e5eb66c-6a63-465c-91f6-3346faaf0657", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 102, "thread": "MainThread", "ts": "2024-04-03T05:37:52.617261Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0d0127fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0d07a9910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0d07a9bb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0d0127fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0d07a9910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0d07a9bb0>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.275190Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.278918Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'version_check': 'True', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.279742Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.283688Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '51eebe96-9c39-49a7-929a-a688df00aee7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0d0806550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '51eebe96-9c39-49a7-929a-a688df00aee7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0d0806550>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.479703Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '51eebe96-9c39-49a7-929a-a688df00aee7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0cd3f7880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '51eebe96-9c39-49a7-929a-a688df00aee7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0cd3f7880>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.583136Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.584146Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.601611Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.720348Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.721046Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '51eebe96-9c39-49a7-929a-a688df00aee7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0ccfd9f40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '51eebe96-9c39-49a7-929a-a688df00aee7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0ccfd9f40>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.731420Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '51eebe96-9c39-49a7-929a-a688df00aee7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0cd3e2dc0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '51eebe96-9c39-49a7-929a-a688df00aee7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0cd3e2dc0>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.802568Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.803418Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '51eebe96-9c39-49a7-929a-a688df00aee7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0cd3713a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '51eebe96-9c39-49a7-929a-a688df00aee7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0cd3713a0>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.804067Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.805137Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.805790Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.806404Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:55.807018Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.052067Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.053114Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.053770Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.054464Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.208982Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.227644Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.240911Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.241562Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.395886Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.396809Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.397556Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.554067Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, snapshot_run_results, anomaly_threshold_sensitivity, model_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.563884Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.576255Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.576938Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "SQL status: SELECT 19 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.735712Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.746447Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  ", "name": "SQLQuery", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.747138Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 4"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "SQL status: SELECT 4 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.902392Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}, {\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "info", "msg": "Elementary: [{\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}, {\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}]", "name": "JinjaLogInfo", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.911457Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:57.912317Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:58.066657Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.8467343, "process_in_blocks": "0", "process_kernel_time": 0.147962, "process_mem_max_rss": "111272", "process_out_blocks": "3680", "process_user_time": 2.707317}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.8467343, \"process_user_time\": 2.707317, \"process_kernel_time\": 0.147962, \"process_mem_max_rss\": \"111272\", \"process_out_blocks\": \"3680\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:58.069384Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:37:58.070111Z", "elapsed": 2.8476923, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:37:58.070111 after 2.85 seconds", "name": "CommandCompleted", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:58.070302Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:58.070955Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0d0127fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0ccb7cd60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0cd3e2fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0d0127fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0ccb7cd60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc0cd3e2fa0>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:58.071575Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "51eebe96-9c39-49a7-929a-a688df00aee7", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 104, "thread": "MainThread", "ts": "2024-04-03T05:37:58.072209Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5134e22490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f513552a3d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f513552aa00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5134e22490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f513552a3d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f513552aa00>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:00.724101Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:00.727879Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'debug': 'False', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:00.728708Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:00.732711Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'fccd4e20-22d9-48e5-a598-63cf747a58fc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f513674c520>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'fccd4e20-22d9-48e5-a598-63cf747a58fc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f513674c520>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:00.927698Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'fccd4e20-22d9-48e5-a598-63cf747a58fc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5131de0d30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'fccd4e20-22d9-48e5-a598-63cf747a58fc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5131de0d30>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.029832Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.030858Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.048240Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.168185Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.168943Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'fccd4e20-22d9-48e5-a598-63cf747a58fc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f51319dbfa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'fccd4e20-22d9-48e5-a598-63cf747a58fc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f51319dbfa0>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.180173Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'fccd4e20-22d9-48e5-a598-63cf747a58fc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f51311a8ac0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'fccd4e20-22d9-48e5-a598-63cf747a58fc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f51311a8ac0>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.253903Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.254746Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'fccd4e20-22d9-48e5-a598-63cf747a58fc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f51321c0d90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'fccd4e20-22d9-48e5-a598-63cf747a58fc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f51321c0d90>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.255418Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.256484Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.257173Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.257799Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:01.258413Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:02.511009Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:02.511873Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:02.512697Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:02.513378Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:02.670581Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:02.688856Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:02.702076Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:02.702724Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:02.857385Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:02.858166Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:02.858835Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.015599Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, snapshot_run_results, anomaly_threshold_sensitivity, model_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.025239Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.032314Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  ", "name": "SQLQuery", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.033019Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 2"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "SQL status: SELECT 2 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.190364Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}, {\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "info", "msg": "Elementary: [{\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}, {\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}]", "name": "JinjaLogInfo", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.198742Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.199524Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.354095Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.6847212, "process_in_blocks": "0", "process_kernel_time": 0.187893, "process_mem_max_rss": "111272", "process_out_blocks": "3672", "process_user_time": 2.638507}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.6847212, \"process_user_time\": 2.638507, \"process_kernel_time\": 0.187893, \"process_mem_max_rss\": \"111272\", \"process_out_blocks\": \"3672\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.356426Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:38:03.357194Z", "elapsed": 2.6857154, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:03.357194 after 2.69 seconds", "name": "CommandCompleted", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.357415Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.358092Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5134e22490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f513674c520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5131de0d30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5134e22490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f513674c520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5131de0d30>]}", "name": "SendingEvent", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.358691Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "fccd4e20-22d9-48e5-a598-63cf747a58fc", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 106, "thread": "MainThread", "ts": "2024-04-03T05:38:03.359331Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c309e430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c37224c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c3722e80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c309e430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c37224c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c3722e80>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.011235Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.014985Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'debug': 'False', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'log_format': 'json', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.015805Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.019781Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c372f0d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c372f0d0>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.213810Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c0f5a610>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c0f5a610>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.315709Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.316683Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.334117Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.454590Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.455309Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52bfbdcf10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52bfbdcf10>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.466153Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c027fc40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c027fc40>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.541295Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.542102Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c027f6d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c027f6d0>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.542750Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.543805Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.544456Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.545096Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:06.545707Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:07.794599Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:07.795540Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:07.796292Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:07.796951Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:07.951275Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:07.971564Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:07.984685Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:07.985351Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.139698Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.140639Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.141392Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.298125Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, snapshot_run_results, anomaly_threshold_sensitivity, model_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.307935Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.320214Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.320905Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "SQL status: SELECT 19 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.484479Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.492399Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.493077Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "SQL status: SELECT 19 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.650083Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.659039Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries\n                  \n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries\n                  \n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  ", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.659737Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "SQL status: SELECT 0 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.814479Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.822655Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.823396Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.977585Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 3.021325, "process_in_blocks": "0", "process_kernel_time": 0.143777, "process_mem_max_rss": "111284", "process_out_blocks": "3680", "process_user_time": 2.703815}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 3.021325, \"process_user_time\": 2.703815, \"process_kernel_time\": 0.143777, \"process_mem_max_rss\": \"111284\", \"process_out_blocks\": \"3680\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.980105Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:38:08.980818Z", "elapsed": 3.0222611, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:08.980818 after 3.02 seconds", "name": "CommandCompleted", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.981110Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.981818Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c309e430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c0f5a610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c027f940>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c309e430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c0f5a610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f52c027f940>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.982429Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "4f9cbee1-c86a-4eb7-8150-0f8cb6c75f90", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 108, "thread": "MainThread", "ts": "2024-04-03T05:38:08.983082Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7154d61490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f715545c3d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f715545ca00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7154d61490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f715545c3d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f715545ca00>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:11.633347Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:11.637110Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'fail_fast': 'False', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'static_parser': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:11.637931Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:11.641845Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '52d43595-81a0-4105-b1ff-135897e991ee', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71566a9520>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '52d43595-81a0-4105-b1ff-135897e991ee', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71566a9520>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:11.835174Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '52d43595-81a0-4105-b1ff-135897e991ee', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7151fa0d30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '52d43595-81a0-4105-b1ff-135897e991ee', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7151fa0d30>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:11.936855Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:11.937837Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:11.955234Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:12.073831Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:12.074537Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '52d43595-81a0-4105-b1ff-135897e991ee', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7151bd9fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '52d43595-81a0-4105-b1ff-135897e991ee', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7151bd9fa0>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:12.085121Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '52d43595-81a0-4105-b1ff-135897e991ee', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71513a8ac0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '52d43595-81a0-4105-b1ff-135897e991ee', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71513a8ac0>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:12.157866Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:12.158697Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '52d43595-81a0-4105-b1ff-135897e991ee', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71526b1d90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '52d43595-81a0-4105-b1ff-135897e991ee', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71526b1d90>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:12.159371Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:12.160410Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:12.161095Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:12.161717Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:12.162317Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.415207Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.416140Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.416771Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.417428Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.571928Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.631279Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  ", "name": "SQLQuery", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.631975Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "SQL status: SELECT 20 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.796405Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"8c81aa7e-6473-4e57-910b-08e45eb82d7b\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:07:47\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"8c81aa7e-6473-4e57-910b-08e45eb82d7b\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-01 21:07:47\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"8c81aa7e-6473-4e57-910b-08e45eb82d7b\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-01 21:07:47\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"8c81aa7e-6473-4e57-910b-08e45eb82d7b\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:07:47\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"561a152c-552b-4962-a9b5-0e2808df3117\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-01 21:08:38\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"561a152c-552b-4962-a9b5-0e2808df3117\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:08:38\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"561a152c-552b-4962-a9b5-0e2808df3117\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:08:38\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"561a152c-552b-4962-a9b5-0e2808df3117\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-01 21:08:38\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"cbceb5be-36e7-4ea0-ac27-1f38738126d0\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-01 21:37:49\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"cbceb5be-36e7-4ea0-ac27-1f38738126d0\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:37:49\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"cbceb5be-36e7-4ea0-ac27-1f38738126d0\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:37:49\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"cbceb5be-36e7-4ea0-ac27-1f38738126d0\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-01 21:37:49\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-03 05:36:02\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"8c81aa7e-6473-4e57-910b-08e45eb82d7b\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:07:47\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"8c81aa7e-6473-4e57-910b-08e45eb82d7b\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-01 21:07:47\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"8c81aa7e-6473-4e57-910b-08e45eb82d7b\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-01 21:07:47\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"8c81aa7e-6473-4e57-910b-08e45eb82d7b\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:07:47\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"561a152c-552b-4962-a9b5-0e2808df3117\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-01 21:08:38\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"561a152c-552b-4962-a9b5-0e2808df3117\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:08:38\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"561a152c-552b-4962-a9b5-0e2808df3117\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:08:38\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"561a152c-552b-4962-a9b5-0e2808df3117\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.1, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-01 21:08:38\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"cbceb5be-36e7-4ea0-ac27-1f38738126d0\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-01 21:37:49\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"cbceb5be-36e7-4ea0-ac27-1f38738126d0\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:37:49\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"cbceb5be-36e7-4ea0-ac27-1f38738126d0\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-01 21:37:49\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"cbceb5be-36e7-4ea0-ac27-1f38738126d0\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-01 21:37:49\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"66bab095-ee26-4d8b-a082-63d19083ec48\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-02 05:36:08\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2024-04-03 05:36:02\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-04-03 05:36:02\"}]", "name": "JinjaLogInfo", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.808745Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.810530Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.231476, "process_in_blocks": "0", "process_kernel_time": 0.199609, "process_mem_max_rss": "111500", "process_out_blocks": "3720", "process_user_time": 2.630849}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.231476, \"process_user_time\": 2.630849, \"process_kernel_time\": 0.199609, \"process_mem_max_rss\": \"111500\", \"process_out_blocks\": \"3720\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.812738Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:38:13.813531Z", "elapsed": 2.232494, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:13.813531 after 2.23 seconds", "name": "CommandCompleted", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.813727Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.814383Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7154d61490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71566a9520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7151fa0d30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7154d61490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71566a9520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f7151fa0d30>]}", "name": "SendingEvent", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.814991Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "52d43595-81a0-4105-b1ff-135897e991ee", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 110, "thread": "MainThread", "ts": "2024-04-03T05:38:13.815662Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf940f0fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf94774910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf94774bb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf940f0fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf94774910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf94774bb0>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:16.496467Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:16.500287Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'log_format': 'json', 'introspect': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:16.501146Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:16.505193Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'be381035-413e-4e0c-928c-038ace6aa213', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf947d0550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'be381035-413e-4e0c-928c-038ace6aa213', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf947d0550>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:16.700280Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'be381035-413e-4e0c-928c-038ace6aa213', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf913b6880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'be381035-413e-4e0c-928c-038ace6aa213', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf913b6880>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:16.802204Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:16.803162Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:16.820638Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:16.940258Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:16.940997Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'be381035-413e-4e0c-928c-038ace6aa213', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf90fdcf40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'be381035-413e-4e0c-928c-038ace6aa213', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf90fdcf40>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:16.951558Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'be381035-413e-4e0c-928c-038ace6aa213', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf913a2dc0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'be381035-413e-4e0c-928c-038ace6aa213', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf913a2dc0>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:17.024490Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:17.025350Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'be381035-413e-4e0c-928c-038ace6aa213', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf913303a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'be381035-413e-4e0c-928c-038ace6aa213', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf913303a0>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:17.026017Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:17.027067Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:17.027730Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:17.028356Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:17.028989Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.289321Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.290265Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.290915Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.291542Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.448499Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.467163Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.480624Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.481313Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.637187Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.638160Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.638873Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.796517Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, snapshot_run_results, anomaly_threshold_sensitivity, model_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.806491Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.813895Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  ", "name": "SQLQuery", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.814582Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "SQL status: SELECT 6 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.975636Z"}}
{"data": {"msg": "Elementary: [{\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "info", "msg": "Elementary: [{\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}]", "name": "JinjaLogInfo", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.984373Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:18.985198Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:19.140735Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.699962, "process_in_blocks": "0", "process_kernel_time": 0.151526, "process_mem_max_rss": "111400", "process_out_blocks": "3672", "process_user_time": 2.687605}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.699962, \"process_user_time\": 2.687605, \"process_kernel_time\": 0.151526, \"process_mem_max_rss\": \"111400\", \"process_out_blocks\": \"3672\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:19.143597Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:38:19.144327Z", "elapsed": 2.700926, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:19.144327 after 2.70 seconds", "name": "CommandCompleted", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:19.144525Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:19.145207Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf940f0fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf9125ad60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf913a2fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf940f0fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf9125ad60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7faf913a2fa0>]}", "name": "SendingEvent", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:19.145821Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "be381035-413e-4e0c-928c-038ace6aa213", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 112, "thread": "MainThread", "ts": "2024-04-03T05:38:19.146468Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71d0d92fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71d1408910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71d1408bb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71d0d92fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71d1408910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71d1408bb0>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:21.775457Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:21.779173Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'log_format': 'json', 'introspect': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:21.779996Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:21.783956Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'ec10a97b-f751-4a99-be45-5623057d1907', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71d1465550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ec10a97b-f751-4a99-be45-5623057d1907', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71d1465550>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:21.977097Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'ec10a97b-f751-4a99-be45-5623057d1907', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71ce375880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ec10a97b-f751-4a99-be45-5623057d1907', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71ce375880>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.078702Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.079625Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.096829Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.215913Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.216588Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'ec10a97b-f751-4a99-be45-5623057d1907', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71cdbd9f40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ec10a97b-f751-4a99-be45-5623057d1907', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71cdbd9f40>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.227067Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'ec10a97b-f751-4a99-be45-5623057d1907', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71ce362dc0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ec10a97b-f751-4a99-be45-5623057d1907', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71ce362dc0>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.298516Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.299344Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'ec10a97b-f751-4a99-be45-5623057d1907', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71cdff03a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ec10a97b-f751-4a99-be45-5623057d1907', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71cdff03a0>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.300012Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.301068Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.301717Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.302332Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:22.302924Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:23.547505Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:23.548497Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:23.549190Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:23.549899Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:23.704101Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:23.723486Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:23.736829Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:23.737501Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:23.892255Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:23.893166Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:23.893865Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "SQL status: SELECT 30 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.054575Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, dbt_exposures, schema_columns_snapshot, dbt_snapshots, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, metrics_anomaly_score, alerts_dbt_source_freshness, monitors_runs, information_schema_columns, job_run_results, dbt_artifacts_hashes, snapshot_run_results, anomaly_threshold_sensitivity, model_run_results, alerts_anomaly_detection, alerts_dbt_models, alerts_dbt_tests, enriched_columns, alerts_schema_changes", "name": "ListRelations", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.064346Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.071908Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_models as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n            \n              where package_name != 'elementary'\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        ),\n\n        dbt_exposures as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n        )\n\n        select\n            unique_id,\n            depends_on_nodes,\n            'model' as type\n        from dbt_models\n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            'source' as type\n        from dbt_sources\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            'exposure' as type\n        from dbt_exposures\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_models as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n            \n              where package_name != 'elementary'\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        ),\n\n        dbt_exposures as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n        )\n\n        select\n            unique_id,\n            depends_on_nodes,\n            'model' as type\n        from dbt_models\n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            'source' as type\n        from dbt_sources\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            'exposure' as type\n        from dbt_exposures\n    \n  ", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.072605Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "SQL status: SELECT 6 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.229222Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"type\": \"source\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"type\": \"source\"}]", "name": "JinjaLogInfo", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.237520Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.238323Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.392517Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.6717727, "process_in_blocks": "0", "process_kernel_time": 0.168036, "process_mem_max_rss": "110932", "process_out_blocks": "3680", "process_user_time": 2.628572}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.6717727, \"process_user_time\": 2.628572, \"process_kernel_time\": 0.168036, \"process_mem_max_rss\": \"110932\", \"process_out_blocks\": \"3680\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.395119Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:38:24.395833Z", "elapsed": 2.672712, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:24.395833 after 2.67 seconds", "name": "CommandCompleted", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.396028Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.396681Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71d0d92fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71cdf3bd60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71ce362fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71d0d92fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71cdf3bd60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f71ce362fa0>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.397335Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "ec10a97b-f751-4a99-be45-5623057d1907", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 114, "thread": "MainThread", "ts": "2024-04-03T05:38:24.398001Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cd08db20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cd7883d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cd788a00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cd08db20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cd7883d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cd788a00>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.047440Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.051111Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.051928Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.055821Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'fd68812f-7ca2-420a-84f4-60d97983c6c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ce9d6550>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'fd68812f-7ca2-420a-84f4-60d97983c6c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ce9d6550>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.248949Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'fd68812f-7ca2-420a-84f4-60d97983c6c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ca2e0d30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'fd68812f-7ca2-420a-84f4-60d97983c6c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ca2e0d30>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.350333Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.351319Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.368652Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.487468Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.488154Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'fd68812f-7ca2-420a-84f4-60d97983c6c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55c9fdbfa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'fd68812f-7ca2-420a-84f4-60d97983c6c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55c9fdbfa0>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.498821Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'fd68812f-7ca2-420a-84f4-60d97983c6c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55c96e8ac0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'fd68812f-7ca2-420a-84f4-60d97983c6c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55c96e8ac0>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.577624Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.578454Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'fd68812f-7ca2-420a-84f4-60d97983c6c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ca781d90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'fd68812f-7ca2-420a-84f4-60d97983c6c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ca781d90>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.579118Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.580153Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.580805Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.581473Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:27.582078Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:28.831026Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:28.831945Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:28.832672Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:28.833367Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:28.986824Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:29.010534Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  ", "name": "SQLQuery", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:29.011226Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 34"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "SQL status: SELECT 34 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:29.167597Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\"}]", "name": "JinjaLogInfo", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:29.177583Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:29.178560Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.185795, "process_in_blocks": "0", "process_kernel_time": 0.184139, "process_mem_max_rss": "110984", "process_out_blocks": "3664", "process_user_time": 2.593966}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.185795, \"process_user_time\": 2.593966, \"process_kernel_time\": 0.184139, \"process_mem_max_rss\": \"110984\", \"process_out_blocks\": \"3664\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:29.180848Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:38:29.181672Z", "elapsed": 2.1868408, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:29.181672 after 2.19 seconds", "name": "CommandCompleted", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:29.181868Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:29.182518Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cd08db20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ce9d6550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ca2e0d30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55cd08db20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ce9d6550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f55ca2e0d30>]}", "name": "SendingEvent", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:29.183125Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "fd68812f-7ca2-420a-84f4-60d97983c6c3", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 116, "thread": "MainThread", "ts": "2024-04-03T05:38:29.183765Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb8790e7430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb87975f4c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb87975fe80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb8790e7430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb87975f4c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb87975fe80>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:31.821893Z"}}
{"data": {"log_version": 3, "version": "=1.7.11"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "info", "msg": "Running with dbt=1.7.11", "name": "MainReportVersion", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:31.825603Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'debug': 'False', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:31.826438Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:31.830389Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '40f24b5d-35df-4172-a508-f6a66464e93e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb87976c0d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '40f24b5d-35df-4172-a508-f6a66464e93e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb87976c0d0>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.025790Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '40f24b5d-35df-4172-a508-f6a66464e93e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb876fb3610>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '40f24b5d-35df-4172-a508-f6a66464e93e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb876fb3610>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.129144Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.7.11"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "info", "msg": "Registered adapter: postgres=1.7.11", "name": "AdapterRegistered", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.130170Z"}}
{"data": {"checksum": "1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7", "profile": "", "target": "", "vars": "{}", "version": "1.7.11"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "checksum: 1b58ec263fbd34ee8091684d6a2f6c1ad2902b1459e632a74eb63768af36ddb7, vars: {}, profile: , target: , version: 1.7.11", "name": "StateCheckVarsHash", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.147447Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.266864Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.267576Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '40f24b5d-35df-4172-a508-f6a66464e93e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb875fdcf10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '40f24b5d-35df-4172-a508-f6a66464e93e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb875fdcf10>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.278400Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '40f24b5d-35df-4172-a508-f6a66464e93e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb8762ffc40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '40f24b5d-35df-4172-a508-f6a66464e93e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb8762ffc40>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.349871Z"}}
{"data": {"stat_line": "40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "info", "msg": "Found 40 models, 2 operations, 6 tests, 6 sources, 0 exposures, 0 metrics, 1301 macros, 0 groups, 0 semantic models", "name": "FoundStats", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.350693Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '40f24b5d-35df-4172-a508-f6a66464e93e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb8762ff6d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '40f24b5d-35df-4172-a508-f6a66464e93e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb8762ff6d0>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.351346Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.352408Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.353100Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.353728Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:32.354349Z"}}
{"data": {"elapsed": 1.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "SQL status: BEGIN in 1.0 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:33.600521Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:33.601556Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:33.602193Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:33.602807Z"}}
{"data": {"elapsed": 0.0, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "SQL status: COMMIT in 0.0 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:33.757992Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:33.787830Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:33.788509Z"}}
{"data": {"elapsed": 0.0, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "SQL status: BEGIN in 0.0 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:33.942901Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:33.943812Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:33.944540Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 35"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "SQL status: SELECT 35 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.104132Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.115906Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.7.11\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  ", "name": "SQLQuery", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.116594Z"}}
{"data": {"elapsed": 0.0, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "SQL status: SELECT 1 in 0.0 seconds", "name": "SQLQueryStatus", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.273308Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8533751648\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"884fd7a9-f12a-4808-bc7b-fd68a0353ae3\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/8533751648\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]", "name": "JinjaLogInfo", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.281594Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.282337Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.438822Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.6720173, "process_in_blocks": "0", "process_kernel_time": 0.175665, "process_mem_max_rss": "111288", "process_out_blocks": "3664", "process_user_time": 2.634977}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.6720173, \"process_user_time\": 2.634977, \"process_kernel_time\": 0.175665, \"process_mem_max_rss\": \"111288\", \"process_out_blocks\": \"3664\", \"process_in_blocks\": \"0\"}", "name": "ResourceReport", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.441460Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-04-03T05:38:34.442177Z", "elapsed": 2.6729615, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:38:34.442177 after 2.67 seconds", "name": "CommandCompleted", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.442372Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.443017Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb8790e7430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb876fb3610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb8762ff940>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb8790e7430>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb876fb3610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb8762ff940>]}", "name": "SendingEvent", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.443627Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "40f24b5d-35df-4172-a508-f6a66464e93e", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 118, "thread": "MainThread", "ts": "2024-04-03T05:38:34.444282Z"}}
