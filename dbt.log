{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4b1bc190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a3e0a00>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a3e09a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4b1bc190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a3e0a00>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a3e09a0>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.366866Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.372035Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json deps --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.372832Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '0882cd62-1960-498c-a1e1-e0a0208785bc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4c649cd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '0882cd62-1960-498c-a1e1-e0a0208785bc', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4c649cd0>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.520283Z"}}
{"data": {"path": "/tmp/dbt-downloads-8u13lj_x"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-8u13lj_x'", "name": "DepsSetDownloadDirectory", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.532975Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M022", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Making package index registry request: GET https://hub.getdbt.com/api/v1/index.json", "name": "RegistryIndexProgressGETRequest", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.533745Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/index.json"}, "info": {"category": "", "code": "M023", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Response from registry index: GET https://hub.getdbt.com/api/v1/index.json 200", "name": "RegistryIndexProgressGETResponse", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.603559Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json", "name": "RegistryProgressGETRequest", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.604422Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json 200", "name": "RegistryProgressGETResponse", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.617551Z"}}
{"data": {"url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M008", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Making package registry request: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json", "name": "RegistryProgressGETRequest", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.626272Z"}}
{"data": {"resp_code": 200, "url": "https://hub.getdbt.com/api/v1/elementary-data/elementary.json"}, "info": {"category": "", "code": "M009", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Response from registry: GET https://hub.getdbt.com/api/v1/elementary-data/elementary.json 200", "name": "RegistryProgressGETResponse", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.640348Z"}}
{"data": {"lock_filepath": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml"}, "info": {"category": "", "code": "M031", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "info", "msg": "Updating lock file in file path: /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/package-lock.yml", "name": "DepsLockUpdating", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.668118Z"}}
{"data": {"path": "/tmp/dbt-downloads-om_zmo6j"}, "info": {"category": "", "code": "M028", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Set downloads directory='/tmp/dbt-downloads-om_zmo6j'", "name": "DepsSetDownloadDirectory", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.670903Z"}}
{"data": {"package_name": "dbt-labs/dbt_utils"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "info", "msg": "Installing dbt-labs/dbt_utils", "name": "DepsStartPackageInstall", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.682584Z"}}
{"data": {"version_name": "version 0.8.6"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "info", "msg": "Installed from version 0.8.6", "name": "DepsInstallInfo", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.866320Z"}}
{"data": {"version_latest": "1.3.0"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "info", "msg": "Updated version available: 1.3.0", "name": "DepsUpdateAvailable", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.866943Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '0882cd62-1960-498c-a1e1-e0a0208785bc', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a3e0970>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a251e80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '0882cd62-1960-498c-a1e1-e0a0208785bc', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a3e0970>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a251e80>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.867568Z"}}
{"data": {"package_name": "elementary-data/elementary"}, "info": {"category": "", "code": "M014", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "info", "msg": "Installing elementary-data/elementary", "name": "DepsStartPackageInstall", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:01.868168Z"}}
{"data": {"version_name": "version 0.14.1"}, "info": {"category": "", "code": "M015", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "info", "msg": "Installed from version 0.14.1", "name": "DepsInstallInfo", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:02.095905Z"}}
{"data": {"version_latest": "0.18.1"}, "info": {"category": "", "code": "M016", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "info", "msg": "Updated version available: 0.18.1", "name": "DepsUpdateAvailable", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:02.096609Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'package', 'label': '0882cd62-1960-498c-a1e1-e0a0208785bc', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4c6612b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a2d6790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'package', 'label': '0882cd62-1960-498c-a1e1-e0a0208785bc', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4c6612b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a2d6790>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:02.097205Z"}}
{"data": {"msg": ""}, "info": {"category": "", "code": "Z017", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "info", "msg": "", "name": "Formatting", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:02.097836Z"}}
{"data": {"packages": ["dbt-labs/dbt_utils", "elementary-data/elementary"]}, "info": {"category": "", "code": "M019", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "info", "msg": "Updates available for packages: ['dbt-labs/dbt_utils', 'elementary-data/elementary']                 \nUpdate your versions in packages.yml, then run dbt deps", "name": "DepsNotifyUpdatesAvailable", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:02.098396Z"}}
{"data": {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.8001297, "process_in_blocks": "0", "process_kernel_time": 0.23441, "process_mem_max_rss": "93392", "process_out_blocks": "7160", "process_user_time": 1.618832}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Resource report: {\"command_name\": \"deps\", \"command_success\": true, \"command_wall_clock_time\": 0.8001297, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.23441, \"process_mem_max_rss\": \"93392\", \"process_out_blocks\": \"7160\", \"process_user_time\": 1.618832}", "name": "ResourceReport", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:02.100007Z"}}
{"data": {"command": "dbt deps", "completed_at": "2025-03-21T05:39:02.100797Z", "elapsed": 0.80119896, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Command `dbt deps` succeeded at 05:39:02.100797 after 0.80 seconds", "name": "CommandCompleted", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:02.100923Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4b1bc190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4afcc910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a3e0a90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4b1bc190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4afcc910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a3e0a90>]}", "name": "SendingEvent", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:02.101581Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:02.102145Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "0882cd62-1960-498c-a1e1-e0a0208785bc", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 95, "thread": "MainThread", "ts": "2025-03-21T05:39:02.186743Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ecb4f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ec022910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ec0228b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ecb4f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ec022910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ec0228b0>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:03.724787Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:03.729734Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'debug': 'False', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'log_format': 'json', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:03.730510Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:03.734352Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28eb7963a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28eb7963a0>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:03.930710Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28eb801850>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28eb801850>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:04.000413Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:04.001364Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:04.119549Z"}}
{"data": {"reason": "saved manifest not found. Starting full parse."}, "info": {"category": "", "code": "I024", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "info", "msg": "Unable to do partial parsing because saved manifest not found. Starting full parse.", "name": "UnableToPartialParse", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:04.120697Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'partial_parser', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28edfce310>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28edfce310>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:04.121301Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ea16d100>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ea16d100>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:09.087718Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:09.281864Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:09.285883Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ea1b2100>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ea1b2100>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:09.299028Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:09.299787Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ea1b2580>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'c64eab2e-129e-4f72-8e7c-79a853b55d67', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ea1b2580>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:09.300401Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:09.301196Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:09.301813Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:09.302356Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:09.302909Z"}}
{"data": {"elapsed": 0.9001062, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "SQL status: BEGIN in 0.900 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.203155Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.204177Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.204760Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.205297Z"}}
{"data": {"elapsed": 0.111368835, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "SQL status: COMMIT in 0.111 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.317258Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.335074Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.379107Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.379739Z"}}
{"data": {"elapsed": 0.11137135, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "SQL status: BEGIN in 0.111 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.491768Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.492699Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.493321Z"}}
{"data": {"elapsed": 0.11369215, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "SQL status: SELECT 30 in 0.114 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.607703Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_schema_changes, enriched_columns, metrics_anomaly_score, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models", "name": "ListRelations", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.615412Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.622491Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  ", "name": "SQLQuery", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.623101Z"}}
{"data": {"elapsed": 0.11218091, "query_id": "", "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "SQL status: SELECT 1 in 0.112 seconds", "name": "SQLQueryStatus", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.735915Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"13985361121\", \"run_started_at\": \"2025-03-21 05:37:10\", \"run_completed_at\": \"2025-03-21 05:37:38\", \"generated_at\": \"2025-03-21 05:37:38\", \"created_at\": \"2025-03-21T05:37:38.465637\", \"command\": \"run\", \"dbt_version\": \"1.7.11\", \"elementary_version\": \"0.14.1\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"b20c185e15cb00e9b46864e6dc6dfd5febb0ae1f\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/13985361121\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/13985361121\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"job_id\": null, \"job_name\": null, \"job_run_id\": \"13985361121\", \"run_started_at\": \"2025-03-21 05:37:10\", \"run_completed_at\": \"2025-03-21 05:37:38\", \"generated_at\": \"2025-03-21 05:37:38\", \"created_at\": \"2025-03-21T05:37:38.465637\", \"command\": \"run\", \"dbt_version\": \"1.7.11\", \"elementary_version\": \"0.14.1\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"test\", \"target_database\": \"neondb\", \"target_schema\": \"dbt_testing_example\", \"target_profile_name\": \"dbt_testing_example\", \"threads\": 4, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": \"portovep/dbt-testing-examples\", \"project_name\": \"dbt_testing_example\", \"env\": null, \"env_id\": null, \"cause_category\": \"schedule\", \"cause\": null, \"pull_request_id\": null, \"git_sha\": \"b20c185e15cb00e9b46864e6dc6dfd5febb0ae1f\", \"orchestrator\": \"github_actions\", \"dbt_user\": null, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/13985361121\", \"job_run_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/13985361121\", \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"portovep\\\"}\"}]", "name": "JinjaLogInfo", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.744992Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.745793Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.857705Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.866559Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 7.209386, "process_in_blocks": "0", "process_kernel_time": 0.265047, "process_mem_max_rss": "123748", "process_out_blocks": "7416", "process_user_time": 6.843215}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 7.209386, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.265047, \"process_mem_max_rss\": \"123748\", \"process_out_blocks\": \"7416\", \"process_user_time\": 6.843215}", "name": "ResourceReport", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.867687Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:10.868418Z", "elapsed": 7.210372, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:10.868418 after 7.21 seconds", "name": "CommandCompleted", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.868561Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.869156Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ecb4f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28eb7963a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ea1b27c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ecb4f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28eb7963a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f28ea1b27c0>]}", "name": "SendingEvent", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.869727Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.870315Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "c64eab2e-129e-4f72-8e7c-79a853b55d67", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 97, "thread": "MainThread", "ts": "2025-03-21T05:39:10.958034Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd76cfb0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd761c96a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd761c9700>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd76cfb0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd761c96a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd761c9700>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:12.604063Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:12.609266Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'log_format': 'json', 'introspect': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:12.610060Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:12.614051Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd76b762b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd76b762b0>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:12.812071Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd758d4d00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd758d4d00>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:12.882943Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:12.884021Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.002109Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.289679Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.290357Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd74fd8130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd74fd8130>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.377643Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.610679Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.614870Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd74fd79d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd74fd79d0>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.628220Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.628988Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd75462220>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd75462220>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.629582Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.630359Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.630970Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.631509Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:13.632062Z"}}
{"data": {"elapsed": 0.91204154, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "SQL status: BEGIN in 0.912 seconds", "name": "SQLQueryStatus", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.544242Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.545267Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.545857Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.546406Z"}}
{"data": {"elapsed": 0.11252603, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "SQL status: COMMIT in 0.113 seconds", "name": "SQLQueryStatus", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.659557Z"}}
{"data": {"msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "info", "msg": "Elementary: [\"postgres\", \"ep-little-wind-39666542.eu-central-1.aws.neon.tech\"]", "name": "JinjaLogInfo", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.676233Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.676974Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.685498Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.1498768, "process_in_blocks": "0", "process_kernel_time": 0.212046, "process_mem_max_rss": "110964", "process_out_blocks": "3816", "process_user_time": 2.309501}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.1498768, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.212046, \"process_mem_max_rss\": \"110964\", \"process_out_blocks\": \"3816\", \"process_user_time\": 2.309501}", "name": "ResourceReport", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.686724Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:14.687460Z", "elapsed": 2.150887, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:14.687460 after 2.15 seconds", "name": "CommandCompleted", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.687605Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.688211Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd76cfb0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd77865310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd76fa83d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd76cfb0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd77865310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdd76fa83d0>]}", "name": "SendingEvent", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.688788Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.689380Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "8f5d36d7-9ce0-4e22-9d79-6b283cf6dbc7", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 104, "thread": "MainThread", "ts": "2025-03-21T05:39:14.771297Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadb69b130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadab69700>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadab69760>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadb69b130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadab69700>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadab69760>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:16.330157Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:16.335289Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:16.336071Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:16.339956Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '9075613c-bfe0-4ce7-a3e4-3f1854ad27c6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadb4f0400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '9075613c-bfe0-4ce7-a3e4-3f1854ad27c6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadb4f0400>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:16.537141Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '9075613c-bfe0-4ce7-a3e4-3f1854ad27c6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadaf572e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '9075613c-bfe0-4ce7-a3e4-3f1854ad27c6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadaf572e0>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:16.607266Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:16.608265Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:16.729071Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.014244Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.014907Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '9075613c-bfe0-4ce7-a3e4-3f1854ad27c6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdad9dd7130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '9075613c-bfe0-4ce7-a3e4-3f1854ad27c6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdad9dd7130>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.098752Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.330351Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.334437Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '9075613c-bfe0-4ce7-a3e4-3f1854ad27c6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdad9dd6940>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '9075613c-bfe0-4ce7-a3e4-3f1854ad27c6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdad9dd6940>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.348037Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.348789Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '9075613c-bfe0-4ce7-a3e4-3f1854ad27c6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdad9dd7490>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '9075613c-bfe0-4ce7-a3e4-3f1854ad27c6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdad9dd7490>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.349378Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.350164Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.350777Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.351308Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:17.351868Z"}}
{"data": {"elapsed": 0.9004377, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "SQL status: BEGIN in 0.900 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.252424Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.253350Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.253934Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.254461Z"}}
{"data": {"elapsed": 0.11117879, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "SQL status: COMMIT in 0.111 seconds", "name": "SQLQueryStatus", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.366228Z"}}
{"data": {"msg": "Elementary: \"neondb.dbt_testing_example_elementary\""}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "info", "msg": "Elementary: \"neondb.dbt_testing_example_elementary\"", "name": "JinjaLogInfo", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.384658Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.385332Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.393766Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.1314628, "process_in_blocks": "0", "process_kernel_time": 0.244855, "process_mem_max_rss": "111016", "process_out_blocks": "3816", "process_user_time": 2.226687}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.1314628, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.244855, \"process_mem_max_rss\": \"111016\", \"process_out_blocks\": \"3816\", \"process_user_time\": 2.226687}", "name": "ResourceReport", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.394898Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:18.395667Z", "elapsed": 2.132475, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:18.395667 after 2.13 seconds", "name": "CommandCompleted", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.395794Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.396394Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadb69b130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdada2098b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdad9152790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdadb69b130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdada2098b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdad9152790>]}", "name": "SendingEvent", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.396965Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.397572Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "9075613c-bfe0-4ce7-a3e4-3f1854ad27c6", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 108, "thread": "MainThread", "ts": "2025-03-21T05:39:18.498463Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7ec01160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7e0d68b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7e0d6850>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7ec01160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7e0d68b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7e0d6850>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:20.076122Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:20.081386Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:20.082186Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:20.086146Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'def07f50-48dd-46d1-934f-a99594a86a22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7d83e280>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'def07f50-48dd-46d1-934f-a99594a86a22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7d83e280>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:20.287174Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'def07f50-48dd-46d1-934f-a99594a86a22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7e4bc220>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'def07f50-48dd-46d1-934f-a99594a86a22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7e4bc220>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:20.357078Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:20.358057Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:20.475287Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:20.758812Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:20.759463Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'def07f50-48dd-46d1-934f-a99594a86a22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7d353130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'def07f50-48dd-46d1-934f-a99594a86a22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7d353130>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:20.843983Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:21.078267Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:21.082608Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'def07f50-48dd-46d1-934f-a99594a86a22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7d3529a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'def07f50-48dd-46d1-934f-a99594a86a22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7d3529a0>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:21.096065Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:21.096824Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'def07f50-48dd-46d1-934f-a99594a86a22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7d353370>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'def07f50-48dd-46d1-934f-a99594a86a22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7d353370>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:21.097410Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:21.098208Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:21.098819Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:21.099356Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:21.099910Z"}}
{"data": {"elapsed": 0.9128372, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "SQL status: BEGIN in 0.913 seconds", "name": "SQLQueryStatus", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:22.012869Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:22.013751Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:22.014320Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:22.014881Z"}}
{"data": {"elapsed": 0.11262885, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "SQL status: COMMIT in 0.113 seconds", "name": "SQLQueryStatus", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:22.128072Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:22.234741Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.meta,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  ", "name": "SQLQuery", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:22.235613Z"}}
{"data": {"elapsed": 0.601404, "query_id": "", "status": "SELECT 112"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "SQL status: SELECT 112 in 0.601 seconds", "name": "SQLQueryStatus", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:22.837895Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:22.851982Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"neondb\".\"dbt_testing_example_elementary\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  ", "name": "SQLQuery", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:22.852606Z"}}
{"data": {"elapsed": 0.15648, "query_id": "", "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "SQL status: SELECT 0 in 0.156 seconds", "name": "SQLQueryStatus", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:23.009691Z"}}
{"data": {"msg": "Elementary: [{\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-16T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-20T05:36:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-16T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-20T05:36:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-16T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-20T05:36:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-16T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-20T05:36:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-17T05:37:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-20T05:36:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-21T05:36:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-17T05:37:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-20T05:36:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-21T05:36:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-16T05:35:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-20T05:36:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-16T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-20T05:36:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-17T05:37:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-20T05:36:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-21T05:36:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-17T05:37:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-20T05:36:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-21T05:36:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-17T05:37:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-20T05:36:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-21T05:36:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-17T05:37:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-20T05:36:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-21T05:36:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-15T05:35:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-16T05:35:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-17T05:37:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-18T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-19T05:37:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-20T05:36:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-21T05:36:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-15T05:35:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-16T05:35:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-17T05:37:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-18T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-19T05:37:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-20T05:36:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-21T05:36:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-15T05:35:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-16T05:35:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-17T05:37:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-18T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-19T05:37:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-20T05:36:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-21T05:36:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-15T05:35:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-16T05:35:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-17T05:37:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-18T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-19T05:37:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-20T05:36:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-21T05:36:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "info", "msg": "Elementary: [{\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-16T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-20T05:36:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height__double_precision.1f5b371f9e.height.expectation\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-16T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-20T05:36:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_height_unit__text.c82161c012.height_unit.expectation\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'HEIGHT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-16T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-20T05:36:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_height_user_id__integer.14569ac5f0.user_id.expectation\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('HEIGHT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-16T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-20T05:36:50\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_measurement_unit__text.7271116707.measurement_unit.expectation\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'MEASUREMENT_UNIT'\\n            and\\n            relation_column_type not in ('TEXT')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"text\\\", \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-17T05:37:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-20T05:36:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_user_id__integer.feda35ce32.user_id.expectation\", \"detected_at\": \"2025-03-21T05:36:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'USER_ID'\\n            and\\n            relation_column_type not in ('INTEGER')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"integer\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-17T05:37:11\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-20T05:36:52\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_expectations_source_expect_column_values_to_be_of_type_gym_app_raw_weight_weight__double_precision.0c34285381.weight.expectation\", \"detected_at\": \"2025-03-21T05:36:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"expectation\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Expect a column to be of a specified data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"with relation_columns as (\\n\\n        \\n        select\\n            cast('DATE' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('USER_ID' as TEXT) as relation_column,\\n            cast('INTEGER' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('WEIGHT' as TEXT) as relation_column,\\n            cast('DOUBLE PRECISION' as TEXT) as relation_column_type\\n        union all\\n        \\n        select\\n            cast('MEASUREMENT_UNIT' as TEXT) as relation_column,\\n            cast('TEXT' as TEXT) as relation_column_type\\n        \\n        \\n    ),\\n    test_data as (\\n\\n        select\\n            *\\n        from\\n            relation_columns\\n        where\\n            relation_column = 'WEIGHT'\\n            and\\n            relation_column_type not in ('DOUBLE PRECISION')\\n\\n    )\\n    select *\\n    from test_data\", \"other\": null, \"test_name\": \"expect_column_values_to_be_of_type\", \"test_params\": \"{\\\"column_type\\\": \\\"double precision\\\", \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-16T05:35:31\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-20T05:36:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_height_height__False__0.0dd5e14a3d.height.generic\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not height > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-15T05:35:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-16T05:35:30\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-17T05:37:10\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-18T05:36:59\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-19T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-20T05:36:51\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d\", \"elementary_unique_id\": \"test.dbt_testing_example.dbt_utils_source_accepted_range_gym_app_raw_weight_weight__False__0.2147fe640d.weight.generic\", \"detected_at\": \"2025-03-21T05:36:39\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n\\nwith meet_condition as(\\n  select *\\n  from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n),\\n\\nvalidation_errors as (\\n  select *\\n  from meet_condition\\n  where\\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\\n    1 = 2\\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\\n    or not weight > 0\\n)\\n\\nselect *\\nfrom validation_errors\\n\\n\", \"other\": null, \"test_name\": \"accepted_range\", \"test_params\": \"{\\\"min_value\\\": 0, \\\"inclusive\\\": false, \\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-17T05:37:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-20T05:36:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_height_.d338d193c2.user_id.generic\", \"detected_at\": \"2025-03-21T05:36:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_height')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-17T05:37:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-20T05:36:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"test_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0\", \"elementary_unique_id\": \"test.dbt_testing_example.relationships_body_mass_indexes_user_id__user_id__source_gym_app_raw_weight_.1ef253afa0.user_id.generic\", \"detected_at\": \"2025-03-21T05:36:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"data-quality\\\"]\", \"model_tags\": \"[]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \\\\\\\"referential integrity\\\\\\\".\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith child as (\\n    select user_id as from_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"body_mass_indexes\\\"\\n    where user_id is not null\\n),\\n\\nparent as (\\n    select user_id as to_field\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n)\\n\\nselect\\n    from_field\\n\\nfrom child\\nleft join parent\\n    on child.from_field = parent.to_field\\n\\nwhere parent.to_field is null\\n\\n\\n\", \"other\": null, \"test_name\": \"relationships\", \"test_params\": \"{\\\"to\\\": \\\"source('gym_app', 'raw_weight')\\\", \\\"field\\\": \\\"user_id\\\", \\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('body_mass_indexes')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-17T05:37:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-20T05:36:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_height_height_unit__cm__inches.f4af351a08.height_unit.generic\", \"detected_at\": \"2025-03-21T05:36:40\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        height_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n    group by height_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'cm','inches'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"cm\\\", \\\"inches\\\"], \\\"column_name\\\": \\\"height_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-15T05:35:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-16T05:35:32\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-17T05:37:12\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-18T05:37:00\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-19T05:37:03\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-20T05:36:53\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da\", \"elementary_unique_id\": \"test.dbt_testing_example.source_accepted_values_gym_app_raw_weight_measurement_unit__kg__pounds.0e8337c1da.measurement_unit.generic\", \"detected_at\": \"2025-03-21T05:36:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"measurement_unit\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\nwith all_values as (\\n\\n    select\\n        measurement_unit as value_field,\\n        count(*) as n_records\\n\\n    from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n    group by measurement_unit\\n\\n)\\n\\nselect *\\nfrom all_values\\nwhere value_field not in (\\n    'kg','pounds'\\n)\\n\\n\\n\", \"other\": null, \"test_name\": \"accepted_values\", \"test_params\": \"{\\\"values\\\": [\\\"kg\\\", \\\"pounds\\\"], \\\"column_name\\\": \\\"measurement_unit\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-15T05:35:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-16T05:35:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-17T05:37:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-18T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-19T05:37:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-20T05:36:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_height.e7ed26fbfe.height.generic\", \"detected_at\": \"2025-03-21T05:36:41\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"height\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect height\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere height is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"height\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-15T05:35:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-16T05:35:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-17T05:37:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-18T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-19T05:37:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-20T05:36:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_height_user_id.4fb45a730a.user_id.generic\", \"detected_at\": \"2025-03-21T05:36:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_height')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-15T05:35:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-16T05:35:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-17T05:37:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-18T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-19T05:37:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-20T05:36:54\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_user_id.e854c4fcc8.user_id.generic\", \"detected_at\": \"2025-03-21T05:36:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"user_id\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect user_id\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere user_id is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"user_id\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda\", \"test_execution_id\": \"955a4ecf-3ad6-4246-bfad-c7ac0a66cdda.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-15T05:35:56\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 6, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"06195619-11d0-4c02-8aca-d19406762b11\", \"test_execution_id\": \"06195619-11d0-4c02-8aca-d19406762b11.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-16T05:35:33\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 5, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca\", \"test_execution_id\": \"ed483e9a-10bc-4e10-8dbb-267c179ca9ca.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-17T05:37:13\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 4, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f\", \"test_execution_id\": \"5ff01f90-a768-4b01-a08c-c49cb6b28f3f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-18T05:37:01\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 3, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5\", \"test_execution_id\": \"3a0b40ab-b8d1-4460-88c3-37ccf0de73b5.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-19T05:37:05\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 2, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f\", \"test_execution_id\": \"210bd2f9-94fe-449d-b1a3-a1e7d3b1ec7f.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-20T05:36:55\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 1, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"invocation_id\": \"09adfec7-2801-4341-b0a3-98241c701949\", \"test_execution_id\": \"09adfec7-2801-4341-b0a3-98241c701949.test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"test_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d\", \"elementary_unique_id\": \"test.dbt_testing_example.source_not_null_gym_app_raw_weight_weight.3cc3503e9d.weight.generic\", \"detected_at\": \"2025-03-21T05:36:42\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"column_name\": \"weight\", \"test_type\": \"dbt_test\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\", \\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"test_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"model_tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"meta\": \"{\\\"description\\\": \\\"This test validates that there are no `null` values present in a column.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n    \\n\\n\\n\\nselect weight\\nfrom \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\nwhere weight is null\\n\\n\\n\", \"other\": null, \"test_name\": \"not_null\", \"test_params\": \"{\\\"column_name\\\": \\\"weight\\\", \\\"model\\\": \\\"{{ get_where_subquery(source('gym_app', 'raw_weight')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}]", "name": "JinjaLogInfo", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:23.074691Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:23.091246Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:23.100074Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 3.0919693, "process_in_blocks": "0", "process_kernel_time": 0.245127, "process_mem_max_rss": "117628", "process_out_blocks": "4936", "process_user_time": 2.432266}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 3.0919693, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.245127, \"process_mem_max_rss\": \"117628\", \"process_out_blocks\": \"4936\", \"process_user_time\": 2.432266}", "name": "ResourceReport", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:23.101318Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:23.102186Z", "elapsed": 3.0931463, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:23.102186 after 3.09 seconds", "name": "CommandCompleted", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:23.102312Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:23.102938Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7ec01160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7f789ee0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7d3529a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7ec01160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7f789ee0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6a7d3529a0>]}", "name": "SendingEvent", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:23.103500Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:23.104125Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "def07f50-48dd-46d1-934f-a99594a86a22", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 111, "thread": "MainThread", "ts": "2025-03-21T05:39:23.212570Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c37d071c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c371daa30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c371da9d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c37d071c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c371daa30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c371da9d0>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:24.811587Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:24.816746Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:24.817590Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:24.821549Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '514c6741-fc4e-4ec3-9bb6-718e04eaa185', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c369a81c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '514c6741-fc4e-4ec3-9bb6-718e04eaa185', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c369a81c0>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.026211Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '514c6741-fc4e-4ec3-9bb6-718e04eaa185', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c37b2a460>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '514c6741-fc4e-4ec3-9bb6-718e04eaa185', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c37b2a460>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.097137Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.098150Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.218790Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.508658Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.509355Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '514c6741-fc4e-4ec3-9bb6-718e04eaa185', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c35fd3130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '514c6741-fc4e-4ec3-9bb6-718e04eaa185', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c35fd3130>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.596023Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.835883Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.840049Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '514c6741-fc4e-4ec3-9bb6-718e04eaa185', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c35fd2a60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '514c6741-fc4e-4ec3-9bb6-718e04eaa185', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c35fd2a60>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.853655Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.854459Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '514c6741-fc4e-4ec3-9bb6-718e04eaa185', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c35fd3430>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '514c6741-fc4e-4ec3-9bb6-718e04eaa185', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c35fd3430>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.855108Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.855926Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.856541Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.857095Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:25.857676Z"}}
{"data": {"elapsed": 0.90365636, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "SQL status: BEGIN in 0.904 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:26.761447Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:26.762369Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:26.762949Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:26.763483Z"}}
{"data": {"elapsed": 0.11128531, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "SQL status: COMMIT in 0.111 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:26.875357Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:26.963186Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:26.963921Z"}}
{"data": {"elapsed": 0.111327894, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "SQL status: BEGIN in 0.111 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.075860Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.076660Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.077262Z"}}
{"data": {"elapsed": 0.12313317, "query_id": "", "status": "SELECT 17"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "SQL status: SELECT 17 in 0.123 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.201057Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.209943Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.210568Z"}}
{"data": {"elapsed": 0.113634065, "query_id": "", "status": "SELECT 22"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "SQL status: SELECT 22 in 0.114 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.324839Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.362212Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  ", "name": "SQLQuery", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.363034Z"}}
{"data": {"elapsed": 0.11297749, "query_id": "", "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "SQL status: SELECT 0 in 0.113 seconds", "name": "SQLQueryStatus", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.476826Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.485156Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.485883Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.597814Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.607253Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.864573, "process_in_blocks": "0", "process_kernel_time": 0.230959, "process_mem_max_rss": "114232", "process_out_blocks": "3840", "process_user_time": 2.406581}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.864573, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.230959, \"process_mem_max_rss\": \"114232\", \"process_out_blocks\": \"3840\", \"process_user_time\": 2.406581}", "name": "ResourceReport", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.608456Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:27.609219Z", "elapsed": 2.8655908, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:27.609219 after 2.87 seconds", "name": "CommandCompleted", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.609343Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.609987Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c37d071c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c37eb96a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c3887e370>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c37d071c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c37eb96a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f6c3887e370>]}", "name": "SendingEvent", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.610573Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.611179Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "514c6741-fc4e-4ec3-9bb6-718e04eaa185", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 114, "thread": "MainThread", "ts": "2025-03-21T05:39:27.692072Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e01db8190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e00fd5610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e00fd5670>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e01db8190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e00fd5610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e00fd5670>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:29.298824Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:29.303860Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'log_format': 'json', 'introspect': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:29.306136Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:29.310082Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '6f6d65b9-e323-4c86-b2d1-0106a5131fd4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e009f66a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '6f6d65b9-e323-4c86-b2d1-0106a5131fd4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e009f66a0>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:29.511972Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '6f6d65b9-e323-4c86-b2d1-0106a5131fd4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e00a18370>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '6f6d65b9-e323-4c86-b2d1-0106a5131fd4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e00a18370>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:29.583147Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:29.584311Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:29.706410Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.000055Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.000824Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '6f6d65b9-e323-4c86-b2d1-0106a5131fd4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e00512130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '6f6d65b9-e323-4c86-b2d1-0106a5131fd4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e00512130>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.088664Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.333441Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.337976Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '6f6d65b9-e323-4c86-b2d1-0106a5131fd4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5dff84b7f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '6f6d65b9-e323-4c86-b2d1-0106a5131fd4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5dff84b7f0>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.352011Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.352783Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '6f6d65b9-e323-4c86-b2d1-0106a5131fd4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e00511a00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '6f6d65b9-e323-4c86-b2d1-0106a5131fd4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e00511a00>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.353374Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.354190Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.354814Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.355357Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:30.355909Z"}}
{"data": {"elapsed": 0.9105186, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "SQL status: BEGIN in 0.911 seconds", "name": "SQLQueryStatus", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.266605Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.267619Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.268190Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.268750Z"}}
{"data": {"elapsed": 0.112355396, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "SQL status: COMMIT in 0.112 seconds", "name": "SQLQueryStatus", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.381683Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.402739Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.446514Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.447159Z"}}
{"data": {"elapsed": 0.11241192, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "SQL status: BEGIN in 0.112 seconds", "name": "SQLQueryStatus", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.560253Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.561146Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.561773Z"}}
{"data": {"elapsed": 0.11461982, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "SQL status: SELECT 30 in 0.115 seconds", "name": "SQLQueryStatus", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.677031Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_schema_changes, enriched_columns, metrics_anomaly_score, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models", "name": "ListRelations", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.684687Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.708401Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.709150Z"}}
{"data": {"elapsed": 0.12147053, "query_id": "", "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "SQL status: SELECT 19 in 0.121 seconds", "name": "SQLQueryStatus", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.831363Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.841871Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  ", "name": "SQLQuery", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.842552Z"}}
{"data": {"elapsed": 0.11374198, "query_id": "", "status": "SELECT 4"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "SQL status: SELECT 4 in 0.114 seconds", "name": "SQLQueryStatus", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.957041Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "info", "msg": "Elementary: [{\"name\": \"body_mass_indexes\", \"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"body_mass_indexes\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": \"dbt_testing_example://models/marts/_body_mass_indexes__models.yml\", \"full_path\": \"models/marts/body_mass_indexes.sql\"}, {\"name\": \"stg_gym_app__height\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__height.sql\"}, {\"name\": \"stg_gym_app__weight\", \"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"stg_gym_app__weight\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/staging/gym_app/stg_gym_app__weight.sql\"}, {\"name\": \"int_weight_measurements_with_latest_height\", \"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"int_weight_measurements_with_latest_height\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"materialization\": \"table\", \"patch_path\": null, \"full_path\": \"models/intermediate/int_weight_measurements_with_latest_height.sql\"}]", "name": "JinjaLogInfo", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.966223Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:31.967108Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:32.080130Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:32.090268Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.8604777, "process_in_blocks": "0", "process_kernel_time": 0.243816, "process_mem_max_rss": "114036", "process_out_blocks": "3856", "process_user_time": 2.387205}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.8604777, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.243816, \"process_mem_max_rss\": \"114036\", \"process_out_blocks\": \"3856\", \"process_user_time\": 2.387205}", "name": "ResourceReport", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:32.091479Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:32.092260Z", "elapsed": 2.8615115, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:32.092260 after 2.86 seconds", "name": "CommandCompleted", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:32.092384Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:32.093010Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e01db8190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e01fb76a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e0200d0d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e01db8190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e01fb76a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5e0200d0d0>]}", "name": "SendingEvent", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:32.093597Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:32.094199Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "6f6d65b9-e323-4c86-b2d1-0106a5131fd4", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 117, "thread": "MainThread", "ts": "2025-03-21T05:39:32.174757Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0975cf7130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f09751ca700>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f09751ca760>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0975cf7130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f09751ca700>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f09751ca760>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:33.760586Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:33.765647Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'debug': 'False', 'version_check': 'True', 'log_path': '/github/workspace/report', 'warn_error': 'None', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:33.766457Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:33.770309Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '1d2cc06a-4dc0-4193-a8b2-3e3b153824ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0975b4d400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '1d2cc06a-4dc0-4193-a8b2-3e3b153824ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0975b4d400>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:33.968570Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '1d2cc06a-4dc0-4193-a8b2-3e3b153824ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f09755b6910>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '1d2cc06a-4dc0-4193-a8b2-3e3b153824ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f09755b6910>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.039258Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.040376Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.160192Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.448769Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.449466Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '1d2cc06a-4dc0-4193-a8b2-3e3b153824ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0973fd7130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '1d2cc06a-4dc0-4193-a8b2-3e3b153824ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0973fd7130>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.540392Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.773971Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.778104Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '1d2cc06a-4dc0-4193-a8b2-3e3b153824ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0973fd6940>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '1d2cc06a-4dc0-4193-a8b2-3e3b153824ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0973fd6940>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.791655Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.792400Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '1d2cc06a-4dc0-4193-a8b2-3e3b153824ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0973fd7490>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '1d2cc06a-4dc0-4193-a8b2-3e3b153824ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0973fd7490>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.793012Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.793807Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.794395Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.794957Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:34.795482Z"}}
{"data": {"elapsed": 0.90538377, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "SQL status: BEGIN in 0.905 seconds", "name": "SQLQueryStatus", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:35.701004Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:35.701979Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:35.702577Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:35.703121Z"}}
{"data": {"elapsed": 0.11166525, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "SQL status: COMMIT in 0.112 seconds", "name": "SQLQueryStatus", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:35.815459Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:35.835824Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:35.880270Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:35.881029Z"}}
{"data": {"elapsed": 0.11168812, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "SQL status: BEGIN in 0.112 seconds", "name": "SQLQueryStatus", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:35.993440Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:35.994403Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:35.995011Z"}}
{"data": {"elapsed": 0.114502706, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "SQL status: SELECT 30 in 0.115 seconds", "name": "SQLQueryStatus", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.110268Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_schema_changes, enriched_columns, metrics_anomaly_score, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models", "name": "ListRelations", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.118123Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.125453Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  ", "name": "SQLQuery", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.126126Z"}}
{"data": {"elapsed": 0.11223008, "query_id": "", "status": "SELECT 2"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "SQL status: SELECT 2 in 0.112 seconds", "name": "SQLQueryStatus", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.239097Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}, {\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "info", "msg": "Elementary: [{\"name\": \"raw_weight\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_weight\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_weight_schema.yml\"}, {\"name\": \"raw_height\", \"source_name\": \"gym_app\", \"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"database_name\": \"neondb\", \"schema_name\": \"dbt_testing_example\", \"table_name\": \"raw_height\", \"owners\": \"[]\", \"tags\": \"[\\\"contract-test-source\\\", \\\"data-quality\\\"]\", \"package_name\": \"dbt_testing_example\", \"description\": \"\", \"full_path\": \"models/staging/gym_app/_gym_app__raw_height_schema.yml\"}]", "name": "JinjaLogInfo", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.247959Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.248783Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.361213Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.370814Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.6787808, "process_in_blocks": "0", "process_kernel_time": 0.235083, "process_mem_max_rss": "114260", "process_out_blocks": "3848", "process_user_time": 2.330829}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.6787808, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.235083, \"process_mem_max_rss\": \"114260\", \"process_out_blocks\": \"3848\", \"process_user_time\": 2.330829}", "name": "ResourceReport", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.372063Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:36.372827Z", "elapsed": 2.6798058, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:36.372827 after 2.68 seconds", "name": "CommandCompleted", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.372951Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.373580Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0975cf7130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0975b4d400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f09745f58b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0975cf7130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0975b4d400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f09745f58b0>]}", "name": "SendingEvent", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.374138Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.374755Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "1d2cc06a-4dc0-4193-a8b2-3e3b153824ce", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 120, "thread": "MainThread", "ts": "2025-03-21T05:39:36.455868Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5e38a160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5d5d1940>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5d5d18e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5e38a160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5d5d1940>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5d5d18e0>]}", "name": "SendingEvent", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:38.127393Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:38.133044Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'version_check': 'True', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'log_format': 'json', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:38.133868Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:38.137959Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '5b34c057-7bdd-416c-aa52-000be009dd42', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5cfd3e20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '5b34c057-7bdd-416c-aa52-000be009dd42', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5cfd3e20>]}", "name": "SendingEvent", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:38.342664Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '5b34c057-7bdd-416c-aa52-000be009dd42', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5dc49250>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '5b34c057-7bdd-416c-aa52-000be009dd42', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5dc49250>]}", "name": "SendingEvent", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:38.414340Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:38.415578Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:38.534783Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:38.826015Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:38.826797Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '5b34c057-7bdd-416c-aa52-000be009dd42', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5cad7130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '5b34c057-7bdd-416c-aa52-000be009dd42', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5cad7130>]}", "name": "SendingEvent", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:38.914955Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:39.157894Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:39.162456Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '5b34c057-7bdd-416c-aa52-000be009dd42', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5cad7880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '5b34c057-7bdd-416c-aa52-000be009dd42', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5cad7880>]}", "name": "SendingEvent", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:39.176632Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:39.177412Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '5b34c057-7bdd-416c-aa52-000be009dd42', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5cac1f70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '5b34c057-7bdd-416c-aa52-000be009dd42', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5cac1f70>]}", "name": "SendingEvent", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:39.178017Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:39.178854Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:39.179465Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:39.180041Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:39.180594Z"}}
{"data": {"elapsed": 0.9005404, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "SQL status: BEGIN in 0.901 seconds", "name": "SQLQueryStatus", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.081271Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.082236Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.082844Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.083408Z"}}
{"data": {"elapsed": 0.11286429, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "SQL status: COMMIT in 0.113 seconds", "name": "SQLQueryStatus", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.196967Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.220051Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.263634Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.264318Z"}}
{"data": {"elapsed": 0.11126399, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "SQL status: BEGIN in 0.111 seconds", "name": "SQLQueryStatus", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.376331Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.377242Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.377900Z"}}
{"data": {"elapsed": 0.114350274, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "SQL status: SELECT 30 in 0.114 seconds", "name": "SQLQueryStatus", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.492991Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_schema_changes, enriched_columns, metrics_anomaly_score, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models", "name": "ListRelations", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.500884Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.524213Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.524862Z"}}
{"data": {"elapsed": 0.12544003, "query_id": "", "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "SQL status: SELECT 20 in 0.125 seconds", "name": "SQLQueryStatus", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.651024Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.660859Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.661543Z"}}
{"data": {"elapsed": 0.11374914, "query_id": "", "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "SQL status: SELECT 20 in 0.114 seconds", "name": "SQLQueryStatus", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.776008Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.782937Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.783588Z"}}
{"data": {"elapsed": 0.11378876, "query_id": "", "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "SQL status: SELECT 20 in 0.114 seconds", "name": "SQLQueryStatus", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.898094Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.907163Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  \n                    depends_on_columns\n                  \n\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  \n                    depends_on_columns\n                  \n\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  ", "name": "SQLQuery", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:40.907817Z"}}
{"data": {"elapsed": 0.111634076, "query_id": "", "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "SQL status: SELECT 0 in 0.112 seconds", "name": "SQLQueryStatus", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:41.020181Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:41.028487Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:41.029229Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:41.141162Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:41.150469Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 3.0927465, "process_in_blocks": "0", "process_kernel_time": 0.24835, "process_mem_max_rss": "114700", "process_out_blocks": "3856", "process_user_time": 2.436443}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 3.0927465, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.24835, \"process_mem_max_rss\": \"114700\", \"process_out_blocks\": \"3856\", \"process_user_time\": 2.436443}", "name": "ResourceReport", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:41.151711Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:41.152453Z", "elapsed": 3.0937726, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:41.152453 after 3.09 seconds", "name": "CommandCompleted", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:41.152599Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:41.153223Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5e38a160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5ef52670>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5efa46a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5e38a160>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5ef52670>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1b5efa46a0>]}", "name": "SendingEvent", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:41.153810Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:41.154414Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "5b34c057-7bdd-416c-aa52-000be009dd42", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 123, "thread": "MainThread", "ts": "2025-03-21T05:39:41.313121Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd18a14040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd17ee8730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd17ee8790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd18a14040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd17ee8730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd17ee8790>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:42.936958Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:42.942262Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'static_parser': 'True', 'log_format': 'json', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:42.943050Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:42.947004Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '3e6c5947-1603-4e2d-bc90-68ed61f6d29e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd17666eb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '3e6c5947-1603-4e2d-bc90-68ed61f6d29e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd17666eb0>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.144944Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '3e6c5947-1603-4e2d-bc90-68ed61f6d29e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd18324fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '3e6c5947-1603-4e2d-bc90-68ed61f6d29e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd18324fa0>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.215089Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.216260Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.336123Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.625071Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.625794Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '3e6c5947-1603-4e2d-bc90-68ed61f6d29e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd17198eb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '3e6c5947-1603-4e2d-bc90-68ed61f6d29e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd17198eb0>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.711429Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.954978Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.959632Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '3e6c5947-1603-4e2d-bc90-68ed61f6d29e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd164d73a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '3e6c5947-1603-4e2d-bc90-68ed61f6d29e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd164d73a0>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.973358Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.974139Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '3e6c5947-1603-4e2d-bc90-68ed61f6d29e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd16f7e040>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '3e6c5947-1603-4e2d-bc90-68ed61f6d29e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd16f7e040>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.974738Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.975548Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.976154Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.976741Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:43.977272Z"}}
{"data": {"elapsed": 0.90676033, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "SQL status: BEGIN in 0.907 seconds", "name": "SQLQueryStatus", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:44.884215Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:44.885574Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:44.886616Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:44.887588Z"}}
{"data": {"elapsed": 0.11170499, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "SQL status: COMMIT in 0.112 seconds", "name": "SQLQueryStatus", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.000381Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.090695Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"neondb\".\"dbt_testing_example_elementary\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  ", "name": "SQLQuery", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.091494Z"}}
{"data": {"elapsed": 0.570155, "query_id": "", "status": "SELECT 28"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "SQL status: SELECT 28 in 0.570 seconds", "name": "SQLQueryStatus", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.662449Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"01251cc3-380b-4a41-9beb-480a7f912376\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-15 05:36:52\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"01251cc3-380b-4a41-9beb-480a7f912376\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-15 05:36:52\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"01251cc3-380b-4a41-9beb-480a7f912376\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-15 05:36:52\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"01251cc3-380b-4a41-9beb-480a7f912376\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-15 05:36:52\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"6a2a1db0-ffd0-4de7-86bc-58cc8f5287c0\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-16 05:36:30\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"6a2a1db0-ffd0-4de7-86bc-58cc8f5287c0\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-16 05:36:30\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"6a2a1db0-ffd0-4de7-86bc-58cc8f5287c0\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-16 05:36:30\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"6a2a1db0-ffd0-4de7-86bc-58cc8f5287c0\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-16 05:36:30\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"9bb2c9cb-afed-41ec-bb11-fd8678f242ad\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-17 05:38:15\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"9bb2c9cb-afed-41ec-bb11-fd8678f242ad\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-17 05:38:15\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"9bb2c9cb-afed-41ec-bb11-fd8678f242ad\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-17 05:38:15\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"9bb2c9cb-afed-41ec-bb11-fd8678f242ad\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-17 05:38:15\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"55a92e75-b551-4b58-9fcf-2deaba42ae44\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-18 05:38:12\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"55a92e75-b551-4b58-9fcf-2deaba42ae44\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-18 05:38:12\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"55a92e75-b551-4b58-9fcf-2deaba42ae44\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-18 05:38:12\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"55a92e75-b551-4b58-9fcf-2deaba42ae44\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-18 05:38:12\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"23f4a4e0-c2de-4477-abe0-405d15aa328c\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-19 05:38:18\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"23f4a4e0-c2de-4477-abe0-405d15aa328c\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-19 05:38:18\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"23f4a4e0-c2de-4477-abe0-405d15aa328c\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-19 05:38:18\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"23f4a4e0-c2de-4477-abe0-405d15aa328c\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-19 05:38:18\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"3a869d4c-d6ca-4c67-9aaa-0a394ab36c07\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-20 05:37:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"3a869d4c-d6ca-4c67-9aaa-0a394ab36c07\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-20 05:37:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"3a869d4c-d6ca-4c67-9aaa-0a394ab36c07\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-20 05:37:58\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"3a869d4c-d6ca-4c67-9aaa-0a394ab36c07\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-20 05:37:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-21 05:37:36\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-21 05:37:36\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-21 05:37:36\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-21 05:37:37\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"01251cc3-380b-4a41-9beb-480a7f912376\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-15 05:36:52\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"01251cc3-380b-4a41-9beb-480a7f912376\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-15 05:36:52\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"01251cc3-380b-4a41-9beb-480a7f912376\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-15 05:36:52\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"01251cc3-380b-4a41-9beb-480a7f912376\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-15 05:36:52\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"6a2a1db0-ffd0-4de7-86bc-58cc8f5287c0\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-16 05:36:30\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"6a2a1db0-ffd0-4de7-86bc-58cc8f5287c0\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-16 05:36:30\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"6a2a1db0-ffd0-4de7-86bc-58cc8f5287c0\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-16 05:36:30\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"6a2a1db0-ffd0-4de7-86bc-58cc8f5287c0\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-16 05:36:30\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"9bb2c9cb-afed-41ec-bb11-fd8678f242ad\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-17 05:38:15\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"9bb2c9cb-afed-41ec-bb11-fd8678f242ad\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-17 05:38:15\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"9bb2c9cb-afed-41ec-bb11-fd8678f242ad\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-17 05:38:15\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"9bb2c9cb-afed-41ec-bb11-fd8678f242ad\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.7, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-17 05:38:15\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"55a92e75-b551-4b58-9fcf-2deaba42ae44\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-18 05:38:12\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"55a92e75-b551-4b58-9fcf-2deaba42ae44\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.3, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-18 05:38:12\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"55a92e75-b551-4b58-9fcf-2deaba42ae44\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-18 05:38:12\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"55a92e75-b551-4b58-9fcf-2deaba42ae44\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-18 05:38:12\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"23f4a4e0-c2de-4477-abe0-405d15aa328c\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-19 05:38:18\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"23f4a4e0-c2de-4477-abe0-405d15aa328c\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-19 05:38:18\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"23f4a4e0-c2de-4477-abe0-405d15aa328c\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-19 05:38:18\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"23f4a4e0-c2de-4477-abe0-405d15aa328c\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 2.2, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-19 05:38:18\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"3a869d4c-d6ca-4c67-9aaa-0a394ab36c07\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-20 05:37:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"3a869d4c-d6ca-4c67-9aaa-0a394ab36c07\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-20 05:37:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"3a869d4c-d6ca-4c67-9aaa-0a394ab36c07\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.8, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-20 05:37:58\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"3a869d4c-d6ca-4c67-9aaa-0a394ab36c07\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.5, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-20 05:37:58\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"name\": \"stg_gym_app__height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_height\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        user_id,\\n        height,\\n        height_unit as measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-21 05:37:36\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"name\": \"stg_gym_app__weight\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.6, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nsource as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"raw_weight\\\"\\n\\n),\\n\\nrenamed as (\\n\\n    select\\n        TO_DATE(date, 'DD/MM/YYYY') as created_date,\\n        weight,\\n        user_id,\\n        measurement_unit\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2025-03-21 05:37:36\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"name\": \"int_weight_measurements_with_latest_height\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nheight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__height\\\"\\n\\n),\\n\\nweight as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"stg_gym_app__weight\\\"\\n\\n),\\n\\nenrich_with_lasted_height_recorded_before_the_weight_measurement as (\\n\\n    select\\n        weight.created_date,\\n        user_id,\\n        weight,\\n        (select height\\n         from height\\n         where  height.created_date < weight.created_date and\\n                height.user_id = weight.user_id\\n         order by height.created_date DESC\\n         limit 1) as height\\n    from weight\\n)\\n\\nselect * from enrich_with_lasted_height_recorded_before_the_weight_measurement\", \"generated_at\": \"2025-03-21 05:37:36\"}, {\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"name\": \"body_mass_indexes\", \"schema\": \"dbt_testing_example\", \"status\": \"success\", \"execution_time\": 1.4, \"full_refresh\": false, \"materialization\": \"table\", \"compiled_code\": \"with\\n\\nweights_with_latest_height as (\\n\\n    select * from \\\"neondb\\\".\\\"dbt_testing_example\\\".\\\"int_weight_measurements_with_latest_height\\\"\\n\\n),\\n\\nbody_mass_indexes as (\\n\\n    select\\n        created_date,\\n        user_id,\\n        weight,\\n        height,\\n        round((weight::numeric / (height::numeric / 100) ^ 2)::numeric, 1) as bmi,\\n        current_timestamp as processed_at\\n    from weights_with_latest_height\\n)\\n\\nselect * from body_mass_indexes\", \"generated_at\": \"2025-03-21 05:37:37\"}]", "name": "JinjaLogInfo", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.676578Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.678609Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.687260Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.8181179, "process_in_blocks": "0", "process_kernel_time": 0.232145, "process_mem_max_rss": "114212", "process_out_blocks": "3920", "process_user_time": 2.394495}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.8181179, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.232145, \"process_mem_max_rss\": \"114212\", \"process_out_blocks\": \"3920\", \"process_user_time\": 2.394495}", "name": "ResourceReport", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.688437Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:45.689207Z", "elapsed": 2.8191416, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:45.689207 after 2.82 seconds", "name": "CommandCompleted", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.689331Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.689958Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd18a14040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd195f6550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd164fe460>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd18a14040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd195f6550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fbd164fe460>]}", "name": "SendingEvent", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.690532Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.691127Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "3e6c5947-1603-4e2d-bc90-68ed61f6d29e", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 126, "thread": "MainThread", "ts": "2025-03-21T05:39:45.769773Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98ee8f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98e360970>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98e360910>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98ee8f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98e360970>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98e360910>]}", "name": "SendingEvent", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:47.402358Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:47.408213Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:47.409054Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:47.413167Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '27c34d1a-cb50-4787-bf00-138fe4633fde', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98ed0a2b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '27c34d1a-cb50-4787-bf00-138fe4633fde', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98ed0a2b0>]}", "name": "SendingEvent", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:47.610858Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '27c34d1a-cb50-4787-bf00-138fe4633fde', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98da59d00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '27c34d1a-cb50-4787-bf00-138fe4633fde', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98da59d00>]}", "name": "SendingEvent", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:47.683696Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:47.684725Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:47.804289Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.093309Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.094054Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '27c34d1a-cb50-4787-bf00-138fe4633fde', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98d5d6130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '27c34d1a-cb50-4787-bf00-138fe4633fde', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98d5d6130>]}", "name": "SendingEvent", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.181063Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.420848Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.424941Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '27c34d1a-cb50-4787-bf00-138fe4633fde', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98d5d59d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '27c34d1a-cb50-4787-bf00-138fe4633fde', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98d5d59d0>]}", "name": "SendingEvent", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.438281Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.439046Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '27c34d1a-cb50-4787-bf00-138fe4633fde', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98d41e220>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '27c34d1a-cb50-4787-bf00-138fe4633fde', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98d41e220>]}", "name": "SendingEvent", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.439667Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.440451Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.441073Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.441638Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:48.442168Z"}}
{"data": {"elapsed": 0.90396345, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "SQL status: BEGIN in 0.904 seconds", "name": "SQLQueryStatus", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.346248Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.347053Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.347639Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.348196Z"}}
{"data": {"elapsed": 0.111455016, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "SQL status: COMMIT in 0.111 seconds", "name": "SQLQueryStatus", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.460293Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.479835Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.522847Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.523450Z"}}
{"data": {"elapsed": 0.1121767, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "SQL status: BEGIN in 0.112 seconds", "name": "SQLQueryStatus", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.636236Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.636898Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.637505Z"}}
{"data": {"elapsed": 0.11367121, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "SQL status: SELECT 30 in 0.114 seconds", "name": "SQLQueryStatus", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.751829Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_schema_changes, enriched_columns, metrics_anomaly_score, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models", "name": "ListRelations", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.759235Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.766252Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  ", "name": "SQLQuery", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.766906Z"}}
{"data": {"elapsed": 0.11978891, "query_id": "", "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "SQL status: SELECT 6 in 0.120 seconds", "name": "SQLQueryStatus", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.887362Z"}}
{"data": {"msg": "Elementary: [{\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}, {\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "info", "msg": "Elementary: [{\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"column_tests\": 7, \"table_tests\": 0}, {\"model_unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"column_tests\": 2, \"table_tests\": 5}, {\"model_unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"column_tests\": 0, \"table_tests\": 1}]", "name": "JinjaLogInfo", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.895668Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:49.896456Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:50.008975Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:50.018075Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.6864545, "process_in_blocks": "0", "process_kernel_time": 0.247156, "process_mem_max_rss": "114300", "process_out_blocks": "3848", "process_user_time": 2.365493}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.6864545, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.247156, \"process_mem_max_rss\": \"114300\", \"process_out_blocks\": \"3848\", \"process_user_time\": 2.365493}", "name": "ResourceReport", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:50.019245Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:50.020017Z", "elapsed": 2.687475, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:50.020017 after 2.69 seconds", "name": "CommandCompleted", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:50.020140Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:50.020766Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98ee8f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98f9f8b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98f13c3d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98ee8f0d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98f9f8b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fc98f13c3d0>]}", "name": "SendingEvent", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:50.021333Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:50.021957Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "27c34d1a-cb50-4787-bf00-138fe4633fde", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 129, "thread": "MainThread", "ts": "2025-03-21T05:39:50.121338Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac1ed7130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac13aa910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac13aa8b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac1ed7130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac13aa910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac13aa8b0>]}", "name": "SendingEvent", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:51.707103Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:51.712006Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'profiles_dir': '/github/workspace', 'log_path': '/github/workspace/report', 'debug': 'False', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'introspect': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:51.712808Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:51.716691Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'ea306d10-32f2-4156-b735-7147c51d20b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac1d2c400>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ea306d10-32f2-4156-b735-7147c51d20b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac1d2c400>]}", "name": "SendingEvent", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:51.915295Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'ea306d10-32f2-4156-b735-7147c51d20b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac1795910>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ea306d10-32f2-4156-b735-7147c51d20b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac1795910>]}", "name": "SendingEvent", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:51.985661Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:51.986617Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.105289Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.392945Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.393643Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'ea306d10-32f2-4156-b735-7147c51d20b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac01d2130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ea306d10-32f2-4156-b735-7147c51d20b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac01d2130>]}", "name": "SendingEvent", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.478984Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.711216Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.715337Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'ea306d10-32f2-4156-b735-7147c51d20b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac01d1940>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ea306d10-32f2-4156-b735-7147c51d20b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac01d1940>]}", "name": "SendingEvent", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.728891Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.729672Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'ea306d10-32f2-4156-b735-7147c51d20b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac01d2490>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ea306d10-32f2-4156-b735-7147c51d20b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac01d2490>]}", "name": "SendingEvent", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.730256Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.731050Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.731662Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.732209Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:52.732763Z"}}
{"data": {"elapsed": 0.91366416, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "SQL status: BEGIN in 0.914 seconds", "name": "SQLQueryStatus", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:53.646598Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:53.647616Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:53.648186Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:53.648744Z"}}
{"data": {"elapsed": 0.112487786, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "SQL status: COMMIT in 0.112 seconds", "name": "SQLQueryStatus", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:53.761807Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "neondb", "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"neondb.dbt_testing_example_elementary\", this is inefficient", "name": "CacheMiss", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:53.783376Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:53.826857Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:53.827461Z"}}
{"data": {"elapsed": 0.11288125, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "SQL status: BEGIN in 0.113 seconds", "name": "SQLQueryStatus", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:53.940968Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:53.941841Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'neondb' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'dbt_testing_example_elementary'\n    union all\n    select\n      'neondb' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'dbt_testing_example_elementary'\n  ", "name": "SQLQuery", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:53.942446Z"}}
{"data": {"elapsed": 0.11466466, "query_id": "", "status": "SELECT 30"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "SQL status: SELECT 30 in 0.115 seconds", "name": "SQLQueryStatus", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.057749Z"}}
{"data": {"database": "neondb", "relations": [{"database": "neondb", "identifier": "dbt_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "test_result_rows", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "elementary_test_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "data_monitoring_metrics", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_seeds", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "schema_columns_snapshot", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_snapshots", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_exposures", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_invocations", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_source_freshness_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_models", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_sources", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metadata", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_schema_changes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "enriched_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "metrics_anomaly_score", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "monitors_runs", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_source_freshness", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "job_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "information_schema_columns", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "model_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "dbt_artifacts_hashes", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "snapshot_run_results", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_anomaly_detection", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "anomaly_threshold_sensitivity", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_tests", "schema": "dbt_testing_example_elementary"}, {"database": "neondb", "identifier": "alerts_dbt_models", "schema": "dbt_testing_example_elementary"}], "schema": "dbt_testing_example_elementary"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "While listing relations in database=neondb, schema=dbt_testing_example_elementary, found: dbt_metrics, dbt_tests, test_result_rows, dbt_columns, dbt_run_results, elementary_test_results, data_monitoring_metrics, dbt_seeds, schema_columns_snapshot, dbt_snapshots, dbt_exposures, dbt_invocations, dbt_source_freshness_results, dbt_models, dbt_sources, metadata, alerts_schema_changes, enriched_columns, metrics_anomaly_score, monitors_runs, alerts_dbt_source_freshness, job_run_results, information_schema_columns, model_run_results, dbt_artifacts_hashes, snapshot_run_results, alerts_anomaly_detection, anomaly_threshold_sensitivity, alerts_dbt_tests, alerts_dbt_models", "name": "ListRelations", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.065308Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.072647Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_exposures\"\n    \n  ", "name": "SQLQuery", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.073277Z"}}
{"data": {"elapsed": 0.11330294, "query_id": "", "status": "SELECT 6"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "SQL status: SELECT 6 in 0.113 seconds", "name": "SQLQueryStatus", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.187267Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.int_weight_measurements_with_latest_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_height\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"depends_on_nodes\": \"[\\\"source.dbt_testing_example.gym_app.raw_weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"depends_on_nodes\": \"[\\\"model.dbt_testing_example.stg_gym_app__height\\\", \\\"model.dbt_testing_example.stg_gym_app__weight\\\"]\", \"materialization\": \"table\", \"type\": \"model\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_weight\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}, {\"unique_id\": \"source.dbt_testing_example.gym_app.raw_height\", \"depends_on_nodes\": null, \"materialization\": null, \"type\": \"source\"}]", "name": "JinjaLogInfo", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.195672Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.196445Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.310123Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.319147Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.6808977, "process_in_blocks": "0", "process_kernel_time": 0.208973, "process_mem_max_rss": "114220", "process_out_blocks": "3848", "process_user_time": 2.347703}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.6808977, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.208973, \"process_mem_max_rss\": \"114220\", \"process_out_blocks\": \"3848\", \"process_user_time\": 2.347703}", "name": "ResourceReport", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.320318Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:54.321103Z", "elapsed": 2.6819224, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:54.321103 after 2.68 seconds", "name": "CommandCompleted", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.321226Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.321852Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac1ed7130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac1d2c400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac07b58b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac1ed7130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac1d2c400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdac07b58b0>]}", "name": "SendingEvent", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.322404Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.323012Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "ea306d10-32f2-4156-b735-7147c51d20b9", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 132, "thread": "MainThread", "ts": "2025-03-21T05:39:54.404308Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580ba81190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580af53a00>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580af539a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580ba81190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580af53a00>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580af539a0>]}", "name": "SendingEvent", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:55.971150Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:55.976259Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/github/workspace', 'version_check': 'True', 'warn_error': 'None', 'log_path': '/github/workspace/report', 'fail_fast': 'False', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'log_format': 'json', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:55.977053Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:55.980954Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '042ad235-3922-49c5-992e-472534197078', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580a6c76a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '042ad235-3922-49c5-992e-472534197078', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580a6c76a0>]}", "name": "SendingEvent", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.178748Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '042ad235-3922-49c5-992e-472534197078', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580a6ea370>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '042ad235-3922-49c5-992e-472534197078', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580a6ea370>]}", "name": "SendingEvent", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.248931Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.249871Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.371283Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.657206Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.657889Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '042ad235-3922-49c5-992e-472534197078', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580a1d7130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '042ad235-3922-49c5-992e-472534197078', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580a1d7130>]}", "name": "SendingEvent", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.742944Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.977858Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.981958Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '042ad235-3922-49c5-992e-472534197078', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f58095137f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '042ad235-3922-49c5-992e-472534197078', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f58095137f0>]}", "name": "SendingEvent", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.995249Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.996003Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '042ad235-3922-49c5-992e-472534197078', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580a1d6a00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '042ad235-3922-49c5-992e-472534197078', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580a1d6a00>]}", "name": "SendingEvent", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.996622Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.997395Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.998016Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.998576Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:56.999111Z"}}
{"data": {"elapsed": 0.91795534, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "SQL status: BEGIN in 0.918 seconds", "name": "SQLQueryStatus", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:57.917212Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:57.918103Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:57.918702Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:57.919243Z"}}
{"data": {"elapsed": 0.11111155, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "SQL status: COMMIT in 0.111 seconds", "name": "SQLQueryStatus", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.030954Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.086328Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  ", "name": "SQLQuery", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.087011Z"}}
{"data": {"elapsed": 0.17356321, "query_id": "", "status": "SELECT 34"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "SQL status: SELECT 34 in 0.174 seconds", "name": "SQLQueryStatus", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.261247Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.dbt_testing_example.body_mass_indexes\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.dbt_testing_example.int_weight_measurements_with_latest_height\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__height\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.dbt_testing_example.stg_gym_app__weight\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.enriched_columns\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.information_schema_columns\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\"}]", "name": "JinjaLogInfo", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.270836Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.271793Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.280472Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.3774922, "process_in_blocks": "0", "process_kernel_time": 0.251294, "process_mem_max_rss": "114068", "process_out_blocks": "3840", "process_user_time": 2.268656}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.3774922, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.251294, \"process_mem_max_rss\": \"114068\", \"process_out_blocks\": \"3840\", \"process_user_time\": 2.268656}", "name": "ResourceReport", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.281647Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:39:58.282383Z", "elapsed": 2.3785052, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:39:58.282383 after 2.38 seconds", "name": "CommandCompleted", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.282504Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.283136Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580ba81190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580bc816a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580bcd60d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580ba81190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580bc816a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f580bcd60d0>]}", "name": "SendingEvent", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.283711Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.284295Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "042ad235-3922-49c5-992e-472534197078", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 135, "thread": "MainThread", "ts": "2025-03-21T05:39:58.370950Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8cf48100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8c41a940>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8c41a8e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8cf48100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8c41a940>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8c41a8e0>]}", "name": "SendingEvent", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:39:59.935698Z"}}
{"data": {"log_version": 3, "version": "=1.9.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "info", "msg": "Running with dbt=1.9.3", "name": "MainReportVersion", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:39:59.940665Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/github/workspace/report", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/github/workspace", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/github/workspace/report', 'version_check': 'True', 'profiles_dir': '/github/workspace', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:39:59.941441Z"}}
{"data": {"profile_name": "elementary", "target_name": "default"}, "info": {"category": "", "code": "A005", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "info", "msg": "target not specified in profile 'elementary', using 'default'", "name": "MissingProfileTarget", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:39:59.945322Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'ca150a28-68bb-46fc-8778-b18e45830d74', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8bbe50d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ca150a28-68bb-46fc-8778-b18e45830d74', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8bbe50d0>]}", "name": "SendingEvent", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.144498Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'ca150a28-68bb-46fc-8778-b18e45830d74', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8e3e4850>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ca150a28-68bb-46fc-8778-b18e45830d74', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8e3e4850>]}", "name": "SendingEvent", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.215008Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.9.0"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "info", "msg": "Registered adapter: postgres=1.9.0", "name": "AdapterRegistered", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.216070Z"}}
{"data": {"checksum": "5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f", "profile": "", "target": "", "vars": "{}", "version": "1.9.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "checksum: 5671c00892cdbcef29c3b00cc5ba7510c3d18a35c883caeb9ab9ee266dc29c8f, vars: {}, profile: , target: , version: 1.9.3", "name": "StateCheckVarsHash", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.337943Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.624597Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.625263Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'ca150a28-68bb-46fc-8778-b18e45830d74', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8b697130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ca150a28-68bb-46fc-8778-b18e45830d74', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8b697130>]}", "name": "SendingEvent", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.710931Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "artifact_type": "WritableManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Wrote artifact WritableManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/manifest.json", "name": "ArtifactWritten", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.945499Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "artifact_type": "SemanticManifest"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Wrote artifact SemanticManifest to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/semantic_manifest.json", "name": "ArtifactWritten", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.949609Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'ca150a28-68bb-46fc-8778-b18e45830d74', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8b696730>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ca150a28-68bb-46fc-8778-b18e45830d74', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8b696730>]}", "name": "SendingEvent", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.962932Z"}}
{"data": {"stat_line": "41 models, 2 operations, 6 data tests, 6 sources, 1356 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "info", "msg": "Found 41 models, 2 operations, 6 data tests, 6 sources, 1356 macros", "name": "FoundStats", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.963676Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'ca150a28-68bb-46fc-8778-b18e45830d74', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8b6960a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ca150a28-68bb-46fc-8778-b18e45830d74', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8b6960a0>]}", "name": "SendingEvent", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.964262Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.965058Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.965671Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.966215Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:00.966765Z"}}
{"data": {"elapsed": 0.9120557, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "SQL status: BEGIN in 0.912 seconds", "name": "SQLQueryStatus", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:01.878962Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:01.879989Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:01.880569Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:01.881105Z"}}
{"data": {"elapsed": 0.11253482, "query_id": "", "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "SQL status: COMMIT in 0.113 seconds", "name": "SQLQueryStatus", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:01.994226Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.066702Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.067393Z"}}
{"data": {"elapsed": 0.11249289, "query_id": "", "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "SQL status: BEGIN in 0.112 seconds", "name": "SQLQueryStatus", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.180510Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.181384Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"neondb\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'dbt_testing_example_elementary'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.181993Z"}}
{"data": {"elapsed": 0.12384114, "query_id": "", "status": "SELECT 35"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "SQL status: SELECT 35 in 0.124 seconds", "name": "SQLQueryStatus", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.306471Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.317907Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.9.3\", \"profile_name\": \"elementary\", \"target_name\": \"default\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_run_results\" run_results\n      join \"neondb\".\"dbt_testing_example_elementary\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"neondb\".\"dbt_testing_example_elementary\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  ", "name": "SQLQuery", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.318592Z"}}
{"data": {"elapsed": 0.13449919, "query_id": "", "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "SQL status: SELECT 1 in 0.134 seconds", "name": "SQLQueryStatus", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.453771Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/13985361121\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"fdb33b49-77ea-4aee-be7e-1163c5ef2210\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": \"https://github.com/portovep/dbt-testing-examples/actions/runs/13985361121\", \"job_name\": null, \"job_id\": null, \"orchestrator\": \"github_actions\"}]", "name": "JinjaLogInfo", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.462113Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.462829Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.575841Z"}}
{"data": {"artifact_path": "/usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "artifact_type": "RunResultsArtifact"}, "info": {"category": "", "code": "P001", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Wrote artifact RunResultsArtifact to /usr/local/lib/python3.9/site-packages/elementary/monitor/dbt_project/target/run_results.json", "name": "ArtifactWritten", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.584811Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.7178404, "process_in_blocks": "0", "process_kernel_time": 0.24976, "process_mem_max_rss": "114336", "process_out_blocks": "3840", "process_user_time": 2.308784}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.7178404, \"process_in_blocks\": \"0\", \"process_kernel_time\": 0.24976, \"process_mem_max_rss\": \"114336\", \"process_out_blocks\": \"3840\", \"process_user_time\": 2.308784}", "name": "ResourceReport", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.586003Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2025-03-21T05:40:02.586770Z", "elapsed": 2.7188547, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 05:40:02.586770 after 2.72 seconds", "name": "CommandCompleted", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.586892Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.587480Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8cf48100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8bbe50d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8db00220>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8cf48100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8bbe50d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fec8db00220>]}", "name": "SendingEvent", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.588054Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.588660Z"}}
{"data": {}, "info": {"category": "", "code": "Z043", "extra": {}, "invocation_id": "ca150a28-68bb-46fc-8778-b18e45830d74", "level": "debug", "msg": "An error was encountered while trying to flush usage events", "name": "FlushEventsFailure", "pid": 138, "thread": "MainThread", "ts": "2025-03-21T05:40:02.667328Z"}}
